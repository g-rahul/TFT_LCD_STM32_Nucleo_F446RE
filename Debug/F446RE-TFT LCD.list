
F446RE-TFT LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a34  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f2c  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b24  08007b24  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b2c  08007b2c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000018  08007b4c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08007b4c  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db91  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bf7  00000000  00000000  0002dbd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  0002f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000217d7  00000000  00000000  000305f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009e69  00000000  00000000  00051dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000cfc0c  00000000  00000000  0005bc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0012b83c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d48  00000000  00000000  0012b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003c28  00000000  00000000  0012c600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006be0 	.word	0x08006be0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08006be0 	.word	0x08006be0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <delay>:
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint32_t time)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <delay+0x2c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000514:	bf00      	nop
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <delay+0x2c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	429a      	cmp	r2, r3
 8000520:	d8f9      	bhi.n	8000516 <delay+0x12>
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000044 	.word	0x20000044

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f004 fc65 	bl	8004e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f84d 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f931 	bl	80007a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000546:	f000 f8b5 	bl	80006b4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800054a:	f000 f903 	bl	8000754 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <main+0x98>)
 8000550:	f005 fcbf 	bl	8005ed2 <HAL_TIM_Base_Start>
  ID=readID();
 8000554:	f001 fde8 	bl	8002128 <readID>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <main+0x9c>)
 800055e:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f004 fcc3 	bl	8004eec <HAL_Delay>
  tft_init(ID);
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <main+0x9c>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f001 face 	bl	8001b0c <tft_init>
  setRotation(0);
 8000570:	2000      	movs	r0, #0
 8000572:	f002 fc83 	bl	8002e7c <setRotation>
  fillScreen(BLACK);
 8000576:	2000      	movs	r0, #0
 8000578:	f003 fa42 	bl	8003a00 <fillScreen>

  testFillScreen();
 800057c:	f004 f836 	bl	80045ec <testFillScreen>
  testLines(CYAN);
 8000580:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000584:	f004 f847 	bl	8004616 <testLines>
  testFastLines(RED, BLUE);
 8000588:	211f      	movs	r1, #31
 800058a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800058e:	f004 f93f 	bl	8004810 <testFastLines>
  testFilledCircles(10, YELLOW);
 8000592:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000596:	200a      	movs	r0, #10
 8000598:	f004 f975 	bl	8004886 <testFilledCircles>
  testCircles(10,WHITE);
 800059c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005a0:	200a      	movs	r0, #10
 80005a2:	f004 f9a9 	bl	80048f8 <testCircles>

  fillScreen(BLACK);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f003 fa2a 	bl	8003a00 <fillScreen>
  setRotation(0);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f002 fc65 	bl	8002e7c <setRotation>
  printnewtstr(100, WHITE, &mono12x7bold, 1, "HEY NIGGER");
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <main+0xa0>)
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <main+0xa4>)
 80005ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f004 fb64 	bl	8004c8c <printnewtstr>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  scrollup(100);
 80005c4:	2064      	movs	r0, #100	; 0x64
 80005c6:	f004 fbb9 	bl	8004d3c <scrollup>
 80005ca:	e7fb      	b.n	80005c4 <main+0x90>
 80005cc:	20000044 	.word	0x20000044
 80005d0:	20000034 	.word	0x20000034
 80005d4:	08006bf8 	.word	0x08006bf8
 80005d8:	080075c4 	.word	0x080075c4

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2234      	movs	r2, #52	; 0x34
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f006 faf0 	bl	8006bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <SystemClock_Config+0xd0>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a28      	ldr	r2, [pc, #160]	; (80006ac <SystemClock_Config+0xd0>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xd4>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000654:	2348      	movs	r3, #72	; 0x48
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f005 f9ad 	bl	80059c8 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000674:	f000 f934 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fedd 	bl	8005454 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006a0:	f000 f91e 	bl	80008e0 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_TIM1_Init+0x98>)
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <MX_TIM1_Init+0x9c>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_TIM1_Init+0x98>)
 80006d8:	2247      	movs	r2, #71	; 0x47
 80006da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_TIM1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_TIM1_Init+0x98>)
 80006e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_TIM1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_TIM1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_TIM1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <MX_TIM1_Init+0x98>)
 80006fe:	f005 fbbd 	bl	8005e7c <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000708:	f000 f8ea 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	4619      	mov	r1, r3
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_TIM1_Init+0x98>)
 800071a:	f005 fbfe 	bl	8005f1a <HAL_TIM_ConfigClockSource>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000724:	f000 f8dc 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_TIM1_Init+0x98>)
 8000736:	f005 fde1 	bl	80062fc <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 f8ce 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000044 	.word	0x20000044
 8000750:	40010000 	.word	0x40010000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f005 fe32 	bl	80063f4 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f8a3 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000084 	.word	0x20000084
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <MX_GPIO_Init+0x124>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a41      	ldr	r2, [pc, #260]	; (80008cc <MX_GPIO_Init+0x124>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <MX_GPIO_Init+0x124>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <MX_GPIO_Init+0x124>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a3a      	ldr	r2, [pc, #232]	; (80008cc <MX_GPIO_Init+0x124>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b38      	ldr	r3, [pc, #224]	; (80008cc <MX_GPIO_Init+0x124>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b34      	ldr	r3, [pc, #208]	; (80008cc <MX_GPIO_Init+0x124>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a33      	ldr	r2, [pc, #204]	; (80008cc <MX_GPIO_Init+0x124>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_GPIO_Init+0x124>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_GPIO_Init+0x124>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <MX_GPIO_Init+0x124>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0x124>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|D1_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2182      	movs	r1, #130	; 0x82
 8000832:	4827      	ldr	r0, [pc, #156]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000834:	f004 fdf4 	bl	8005420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LD2_Pin
 8000838:	2200      	movs	r2, #0
 800083a:	f240 7133 	movw	r1, #1843	; 0x733
 800083e:	4825      	ldr	r0, [pc, #148]	; (80008d4 <MX_GPIO_Init+0x12c>)
 8000840:	f004 fdee 	bl	8005420 <HAL_GPIO_WritePin>
                          |D7_Pin|D0_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|D6_Pin|D3_Pin|D5_Pin
 8000844:	2200      	movs	r2, #0
 8000846:	f240 4139 	movw	r1, #1081	; 0x439
 800084a:	4823      	ldr	r0, [pc, #140]	; (80008d8 <MX_GPIO_Init+0x130>)
 800084c:	f004 fde8 	bl	8005420 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_GPIO_Init+0x134>)
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000866:	f004 fc49 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|D1_Pin;
 800086a:	2382      	movs	r3, #130	; 0x82
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000882:	f004 fc3b 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LD2_Pin
                           D7_Pin D0_Pin D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LD2_Pin
 8000886:	f240 7333 	movw	r3, #1843	; 0x733
 800088a:	617b      	str	r3, [r7, #20]
                          |D7_Pin|D0_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_GPIO_Init+0x12c>)
 80008a0:	f004 fc2c 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin D6_Pin D3_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|D6_Pin|D3_Pin|D5_Pin
 80008a4:	f240 4339 	movw	r3, #1081	; 0x439
 80008a8:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_GPIO_Init+0x130>)
 80008be:	f004 fc1d 	bl	80050fc <HAL_GPIO_Init>

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020400 	.word	0x40020400
 80008dc:	10210000 	.word	0x10210000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <HAL_MspInit+0x4c>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800092e:	2007      	movs	r0, #7
 8000930:	f004 fbb0 	bl	8005094 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <HAL_TIM_Base_MspInit+0x3c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d10d      	bne.n	800096e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_TIM_Base_MspInit+0x40>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a09      	ldr	r2, [pc, #36]	; (8000980 <HAL_TIM_Base_MspInit+0x40>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_TIM_Base_MspInit+0x40>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40010000 	.word	0x40010000
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_UART_MspInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12b      	bne.n	80009fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009de:	230c      	movs	r3, #12
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ee:	2307      	movs	r3, #7
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_UART_MspInit+0x8c>)
 80009fa:	f004 fb7f 	bl	80050fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40004400 	.word	0x40004400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f004 fa20 	bl	8004eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <SystemInit+0x28>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <SystemInit+0x28>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SystemInit+0x28>)
 8000a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f004 fcb6 	bl	8005420 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	2201      	movs	r2, #1
 8000acc:	4619      	mov	r1, r3
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f004 fca6 	bl	8005420 <HAL_GPIO_WritePin>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f004 fafe 	bl	80050fc <HAL_GPIO_Init>
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f004 fae6 	bl	80050fc <HAL_GPIO_Init>
}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <width+0x14>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000004 	.word	0x20000004

08000b50 <height>:

uint16_t height(void)
{ return _height; }
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <height+0x14>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000006 	.word	0x20000006

08000b68 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8000b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	b29b      	uxth	r3, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	115b      	asrs	r3, r3, #5
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	f003 0320 	and.w	r3, r3, #32
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	105b      	asrs	r3, r3, #1
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	f003 031f 	and.w	r3, r3, #31
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	b29b      	uxth	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	121b      	asrs	r3, r3, #8
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f023 0307 	bic.w	r3, r3, #7
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	10db      	asrs	r3, r3, #3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f023 0303 	bic.w	r3, r3, #3
 8000c20:	b2db      	uxtb	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	b2db      	uxtb	r3, r3
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	460b      	mov	r3, r1
 8000c56:	71bb      	strb	r3, [r7, #6]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	717b      	strb	r3, [r7, #5]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c66:	f023 0307 	bic.w	r3, r3, #7
 8000c6a:	b21a      	sxth	r2, r3
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	08db      	lsrs	r3, r3, #3
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af02      	add	r7, sp, #8
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	460a      	mov	r2, r1
 8000ca0:	80fb      	strh	r3, [r7, #6]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	80bb      	strh	r3, [r7, #4]
 8000ca6:	f107 020e 	add.w	r2, r7, #14
 8000caa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f001 fb76 	bl	80023a8 <readGRAM>
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	460a      	mov	r2, r1
 8000cd0:	80fb      	strh	r3, [r7, #6]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	80bb      	strh	r3, [r7, #4]
 8000cd6:	88ba      	ldrh	r2, [r7, #4]
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f95b 	bl	8000f98 <writecmddata>
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	6039      	str	r1, [r7, #0]
 8000cf4:	80fb      	strh	r3, [r7, #6]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	717b      	strb	r3, [r7, #5]
 8000cfa:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fa7e 	bl	8001204 <WriteCmdParamN>
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d18:	4811      	ldr	r0, [pc, #68]	; (8000d60 <setReadDir+0x50>)
 8000d1a:	f7ff fedf 	bl	8000adc <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	4810      	ldr	r0, [pc, #64]	; (8000d64 <setReadDir+0x54>)
 8000d22:	f7ff fedb 	bl	8000adc <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000d26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <setReadDir+0x50>)
 8000d2c:	f7ff fed6 	bl	8000adc <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000d30:	2108      	movs	r1, #8
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <setReadDir+0x58>)
 8000d34:	f7ff fed2 	bl	8000adc <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000d38:	2120      	movs	r1, #32
 8000d3a:	480b      	ldr	r0, [pc, #44]	; (8000d68 <setReadDir+0x58>)
 8000d3c:	f7ff fece 	bl	8000adc <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000d40:	2110      	movs	r1, #16
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <setReadDir+0x58>)
 8000d44:	f7ff feca 	bl	8000adc <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4c:	4806      	ldr	r0, [pc, #24]	; (8000d68 <setReadDir+0x58>)
 8000d4e:	f7ff fec5 	bl	8000adc <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d56:	4802      	ldr	r0, [pc, #8]	; (8000d60 <setReadDir+0x50>)
 8000d58:	f7ff fec0 	bl	8000adc <PIN_INPUT>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020400 	.word	0x40020400

08000d6c <setWriteDir>:

void setWriteDir (void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <setWriteDir+0x50>)
 8000d76:	f7ff fec7 	bl	8000b08 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <setWriteDir+0x54>)
 8000d7e:	f7ff fec3 	bl	8000b08 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <setWriteDir+0x50>)
 8000d88:	f7ff febe 	bl	8000b08 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <setWriteDir+0x58>)
 8000d90:	f7ff feba 	bl	8000b08 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000d94:	2120      	movs	r1, #32
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <setWriteDir+0x58>)
 8000d98:	f7ff feb6 	bl	8000b08 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <setWriteDir+0x58>)
 8000da0:	f7ff feb2 	bl	8000b08 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <setWriteDir+0x58>)
 8000daa:	f7ff fead 	bl	8000b08 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	4802      	ldr	r0, [pc, #8]	; (8000dbc <setWriteDir+0x50>)
 8000db4:	f7ff fea8 	bl	8000b08 <PIN_OUTPUT>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff08 	bl	8000bea <color565_to_r>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff13 	bl	8000c0c <color565_to_g>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff1e 	bl	8000c2e <color565_to_b>
 8000df2:	4603      	mov	r3, r0
 8000df4:	737b      	strb	r3, [r7, #13]
    write8(r);
 8000df6:	4b65      	ldr	r3, [pc, #404]	; (8000f8c <write24+0x1c4>)
 8000df8:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000dfc:	619a      	str	r2, [r3, #24]
 8000dfe:	4b64      	ldr	r3, [pc, #400]	; (8000f90 <write24+0x1c8>)
 8000e00:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000e04:	619a      	str	r2, [r3, #24]
 8000e06:	4b63      	ldr	r3, [pc, #396]	; (8000f94 <write24+0x1cc>)
 8000e08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e0c:	619a      	str	r2, [r3, #24]
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	4b58      	ldr	r3, [pc, #352]	; (8000f8c <write24+0x1c4>)
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	105b      	asrs	r3, r3, #1
 8000e3a:	f003 0310 	and.w	r3, r3, #16
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	431a      	orrs	r2, r3
 8000e52:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <write24+0x1c8>)
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <write24+0x1cc>)
 8000e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	2102      	movs	r1, #2
 8000e64:	4849      	ldr	r0, [pc, #292]	; (8000f8c <write24+0x1c4>)
 8000e66:	f7ff fe19 	bl	8000a9c <PIN_LOW>
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	4847      	ldr	r0, [pc, #284]	; (8000f8c <write24+0x1c4>)
 8000e6e:	f7ff fe25 	bl	8000abc <PIN_HIGH>
 8000e72:	2102      	movs	r1, #2
 8000e74:	4845      	ldr	r0, [pc, #276]	; (8000f8c <write24+0x1c4>)
 8000e76:	f7ff fe21 	bl	8000abc <PIN_HIGH>
    write8(g);
 8000e7a:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <write24+0x1c4>)
 8000e7c:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000e80:	619a      	str	r2, [r3, #24]
 8000e82:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <write24+0x1c8>)
 8000e84:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000e88:	619a      	str	r2, [r3, #24]
 8000e8a:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <write24+0x1cc>)
 8000e8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e90:	619a      	str	r2, [r3, #24]
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	025b      	lsls	r3, r3, #9
 8000ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eac:	431a      	orrs	r2, r3
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <write24+0x1c4>)
 8000eb0:	619a      	str	r2, [r3, #24]
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	105b      	asrs	r3, r3, #1
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	7bbb      	ldrb	r3, [r7, #14]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <write24+0x1c8>)
 8000ed8:	619a      	str	r2, [r3, #24]
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <write24+0x1cc>)
 8000ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee4:	6193      	str	r3, [r2, #24]
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4828      	ldr	r0, [pc, #160]	; (8000f8c <write24+0x1c4>)
 8000eea:	f7ff fdd7 	bl	8000a9c <PIN_LOW>
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4826      	ldr	r0, [pc, #152]	; (8000f8c <write24+0x1c4>)
 8000ef2:	f7ff fde3 	bl	8000abc <PIN_HIGH>
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4824      	ldr	r0, [pc, #144]	; (8000f8c <write24+0x1c4>)
 8000efa:	f7ff fddf 	bl	8000abc <PIN_HIGH>
    write8(b);
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <write24+0x1c4>)
 8000f00:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000f04:	619a      	str	r2, [r3, #24]
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <write24+0x1c8>)
 8000f08:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000f0c:	619a      	str	r2, [r3, #24]
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <write24+0x1cc>)
 8000f10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f14:	619a      	str	r2, [r3, #24]
 8000f16:	7b7b      	ldrb	r3, [r7, #13]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f26:	431a      	orrs	r2, r3
 8000f28:	7b7b      	ldrb	r3, [r7, #13]
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <write24+0x1c4>)
 8000f34:	619a      	str	r2, [r3, #24]
 8000f36:	7b7b      	ldrb	r3, [r7, #13]
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000f3e:	7b7b      	ldrb	r3, [r7, #13]
 8000f40:	105b      	asrs	r3, r3, #1
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	431a      	orrs	r2, r3
 8000f48:	7b7b      	ldrb	r3, [r7, #13]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	431a      	orrs	r2, r3
 8000f52:	7b7b      	ldrb	r3, [r7, #13]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <write24+0x1c8>)
 8000f5c:	619a      	str	r2, [r3, #24]
 8000f5e:	7b7b      	ldrb	r3, [r7, #13]
 8000f60:	019b      	lsls	r3, r3, #6
 8000f62:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <write24+0x1cc>)
 8000f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <write24+0x1c4>)
 8000f6e:	f7ff fd95 	bl	8000a9c <PIN_LOW>
 8000f72:	2102      	movs	r1, #2
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <write24+0x1c4>)
 8000f76:	f7ff fda1 	bl	8000abc <PIN_HIGH>
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <write24+0x1c4>)
 8000f7e:	f7ff fd9d 	bl	8000abc <PIN_HIGH>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800

08000f98 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	80fb      	strh	r3, [r7, #6]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4893      	ldr	r0, [pc, #588]	; (80011f8 <writecmddata+0x260>)
 8000fac:	f7ff fd76 	bl	8000a9c <PIN_LOW>
    WriteCmd(cmd);
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	4892      	ldr	r0, [pc, #584]	; (80011fc <writecmddata+0x264>)
 8000fb4:	f7ff fd72 	bl	8000a9c <PIN_LOW>
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	73bb      	strb	r3, [r7, #14]
 8000fc4:	4b8d      	ldr	r3, [pc, #564]	; (80011fc <writecmddata+0x264>)
 8000fc6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000fca:	619a      	str	r2, [r3, #24]
 8000fcc:	4b8a      	ldr	r3, [pc, #552]	; (80011f8 <writecmddata+0x260>)
 8000fce:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000fd2:	619a      	str	r2, [r3, #24]
 8000fd4:	4b8a      	ldr	r3, [pc, #552]	; (8001200 <writecmddata+0x268>)
 8000fd6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fda:	619a      	str	r2, [r3, #24]
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fec:	431a      	orrs	r2, r3
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	025b      	lsls	r3, r3, #9
 8000ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	4b80      	ldr	r3, [pc, #512]	; (80011fc <writecmddata+0x264>)
 8000ffa:	619a      	str	r2, [r3, #24]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	105b      	asrs	r3, r3, #1
 8001008:	f003 0310 	and.w	r3, r3, #16
 800100c:	431a      	orrs	r2, r3
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	f003 0320 	and.w	r3, r3, #32
 8001016:	431a      	orrs	r2, r3
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	431a      	orrs	r2, r3
 8001020:	4b75      	ldr	r3, [pc, #468]	; (80011f8 <writecmddata+0x260>)
 8001022:	619a      	str	r2, [r3, #24]
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	019b      	lsls	r3, r3, #6
 8001028:	4a75      	ldr	r2, [pc, #468]	; (8001200 <writecmddata+0x268>)
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	2102      	movs	r1, #2
 8001032:	4872      	ldr	r0, [pc, #456]	; (80011fc <writecmddata+0x264>)
 8001034:	f7ff fd32 	bl	8000a9c <PIN_LOW>
 8001038:	2102      	movs	r1, #2
 800103a:	4870      	ldr	r0, [pc, #448]	; (80011fc <writecmddata+0x264>)
 800103c:	f7ff fd3e 	bl	8000abc <PIN_HIGH>
 8001040:	2102      	movs	r1, #2
 8001042:	486e      	ldr	r0, [pc, #440]	; (80011fc <writecmddata+0x264>)
 8001044:	f7ff fd3a 	bl	8000abc <PIN_HIGH>
 8001048:	4b6c      	ldr	r3, [pc, #432]	; (80011fc <writecmddata+0x264>)
 800104a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800104e:	619a      	str	r2, [r3, #24]
 8001050:	4b69      	ldr	r3, [pc, #420]	; (80011f8 <writecmddata+0x260>)
 8001052:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001056:	619a      	str	r2, [r3, #24]
 8001058:	4b69      	ldr	r3, [pc, #420]	; (8001200 <writecmddata+0x268>)
 800105a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800105e:	619a      	str	r2, [r3, #24]
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001070:	431a      	orrs	r2, r3
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	025b      	lsls	r3, r3, #9
 8001076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800107a:	431a      	orrs	r2, r3
 800107c:	4b5f      	ldr	r3, [pc, #380]	; (80011fc <writecmddata+0x264>)
 800107e:	619a      	str	r2, [r3, #24]
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	105b      	asrs	r3, r3, #1
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	431a      	orrs	r2, r3
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	431a      	orrs	r2, r3
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	431a      	orrs	r2, r3
 80010a4:	4b54      	ldr	r3, [pc, #336]	; (80011f8 <writecmddata+0x260>)
 80010a6:	619a      	str	r2, [r3, #24]
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	019b      	lsls	r3, r3, #6
 80010ac:	4a54      	ldr	r2, [pc, #336]	; (8001200 <writecmddata+0x268>)
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	2102      	movs	r1, #2
 80010b6:	4851      	ldr	r0, [pc, #324]	; (80011fc <writecmddata+0x264>)
 80010b8:	f7ff fcf0 	bl	8000a9c <PIN_LOW>
 80010bc:	2102      	movs	r1, #2
 80010be:	484f      	ldr	r0, [pc, #316]	; (80011fc <writecmddata+0x264>)
 80010c0:	f7ff fcfc 	bl	8000abc <PIN_HIGH>
 80010c4:	2102      	movs	r1, #2
 80010c6:	484d      	ldr	r0, [pc, #308]	; (80011fc <writecmddata+0x264>)
 80010c8:	f7ff fcf8 	bl	8000abc <PIN_HIGH>
 80010cc:	2110      	movs	r1, #16
 80010ce:	484b      	ldr	r0, [pc, #300]	; (80011fc <writecmddata+0x264>)
 80010d0:	f7ff fcf4 	bl	8000abc <PIN_HIGH>
    WriteData(dat);
 80010d4:	88bb      	ldrh	r3, [r7, #4]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	b29b      	uxth	r3, r3
 80010da:	737b      	strb	r3, [r7, #13]
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	733b      	strb	r3, [r7, #12]
 80010e0:	4b46      	ldr	r3, [pc, #280]	; (80011fc <writecmddata+0x264>)
 80010e2:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80010e6:	619a      	str	r2, [r3, #24]
 80010e8:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <writecmddata+0x260>)
 80010ea:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80010ee:	619a      	str	r2, [r3, #24]
 80010f0:	4b43      	ldr	r3, [pc, #268]	; (8001200 <writecmddata+0x268>)
 80010f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010f6:	619a      	str	r2, [r3, #24]
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001100:	7b7b      	ldrb	r3, [r7, #13]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001108:	431a      	orrs	r2, r3
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001112:	431a      	orrs	r2, r3
 8001114:	4b39      	ldr	r3, [pc, #228]	; (80011fc <writecmddata+0x264>)
 8001116:	619a      	str	r2, [r3, #24]
 8001118:	7b7b      	ldrb	r3, [r7, #13]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001120:	7b7b      	ldrb	r3, [r7, #13]
 8001122:	105b      	asrs	r3, r3, #1
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	431a      	orrs	r2, r3
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	431a      	orrs	r2, r3
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	431a      	orrs	r2, r3
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <writecmddata+0x260>)
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	7b7b      	ldrb	r3, [r7, #13]
 8001142:	019b      	lsls	r3, r3, #6
 8001144:	4a2e      	ldr	r2, [pc, #184]	; (8001200 <writecmddata+0x268>)
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	2102      	movs	r1, #2
 800114e:	482b      	ldr	r0, [pc, #172]	; (80011fc <writecmddata+0x264>)
 8001150:	f7ff fca4 	bl	8000a9c <PIN_LOW>
 8001154:	2102      	movs	r1, #2
 8001156:	4829      	ldr	r0, [pc, #164]	; (80011fc <writecmddata+0x264>)
 8001158:	f7ff fcb0 	bl	8000abc <PIN_HIGH>
 800115c:	2102      	movs	r1, #2
 800115e:	4827      	ldr	r0, [pc, #156]	; (80011fc <writecmddata+0x264>)
 8001160:	f7ff fcac 	bl	8000abc <PIN_HIGH>
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <writecmddata+0x264>)
 8001166:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800116a:	619a      	str	r2, [r3, #24]
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <writecmddata+0x260>)
 800116e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001172:	619a      	str	r2, [r3, #24]
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <writecmddata+0x268>)
 8001176:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	7b3b      	ldrb	r3, [r7, #12]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001184:	7b3b      	ldrb	r3, [r7, #12]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118c:	431a      	orrs	r2, r3
 800118e:	7b3b      	ldrb	r3, [r7, #12]
 8001190:	025b      	lsls	r3, r3, #9
 8001192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001196:	431a      	orrs	r2, r3
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <writecmddata+0x264>)
 800119a:	619a      	str	r2, [r3, #24]
 800119c:	7b3b      	ldrb	r3, [r7, #12]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80011a4:	7b3b      	ldrb	r3, [r7, #12]
 80011a6:	105b      	asrs	r3, r3, #1
 80011a8:	f003 0310 	and.w	r3, r3, #16
 80011ac:	431a      	orrs	r2, r3
 80011ae:	7b3b      	ldrb	r3, [r7, #12]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	f003 0320 	and.w	r3, r3, #32
 80011b6:	431a      	orrs	r2, r3
 80011b8:	7b3b      	ldrb	r3, [r7, #12]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	431a      	orrs	r2, r3
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <writecmddata+0x260>)
 80011c2:	619a      	str	r2, [r3, #24]
 80011c4:	7b3b      	ldrb	r3, [r7, #12]
 80011c6:	019b      	lsls	r3, r3, #6
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <writecmddata+0x268>)
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	2102      	movs	r1, #2
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <writecmddata+0x264>)
 80011d4:	f7ff fc62 	bl	8000a9c <PIN_LOW>
 80011d8:	2102      	movs	r1, #2
 80011da:	4808      	ldr	r0, [pc, #32]	; (80011fc <writecmddata+0x264>)
 80011dc:	f7ff fc6e 	bl	8000abc <PIN_HIGH>
 80011e0:	2102      	movs	r1, #2
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <writecmddata+0x264>)
 80011e4:	f7ff fc6a 	bl	8000abc <PIN_HIGH>
    CS_IDLE;
 80011e8:	2101      	movs	r1, #1
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <writecmddata+0x260>)
 80011ec:	f7ff fc66 	bl	8000abc <PIN_HIGH>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020800 	.word	0x40020800

08001204 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	603a      	str	r2, [r7, #0]
 800120e:	80fb      	strh	r3, [r7, #6]
 8001210:	460b      	mov	r3, r1
 8001212:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8001214:	2101      	movs	r1, #1
 8001216:	484b      	ldr	r0, [pc, #300]	; (8001344 <WriteCmdParamN+0x140>)
 8001218:	f7ff fc40 	bl	8000a9c <PIN_LOW>
    WriteCmd(cmd);
 800121c:	2110      	movs	r1, #16
 800121e:	484a      	ldr	r0, [pc, #296]	; (8001348 <WriteCmdParamN+0x144>)
 8001220:	f7ff fc3c 	bl	8000a9c <PIN_LOW>
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	b29b      	uxth	r3, r3
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	73bb      	strb	r3, [r7, #14]
 8001230:	4b45      	ldr	r3, [pc, #276]	; (8001348 <WriteCmdParamN+0x144>)
 8001232:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001236:	619a      	str	r2, [r3, #24]
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <WriteCmdParamN+0x140>)
 800123a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800123e:	619a      	str	r2, [r3, #24]
 8001240:	4b42      	ldr	r3, [pc, #264]	; (800134c <WriteCmdParamN+0x148>)
 8001242:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001246:	619a      	str	r2, [r3, #24]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	431a      	orrs	r2, r3
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	025b      	lsls	r3, r3, #9
 800125e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001262:	431a      	orrs	r2, r3
 8001264:	4b38      	ldr	r3, [pc, #224]	; (8001348 <WriteCmdParamN+0x144>)
 8001266:	619a      	str	r2, [r3, #24]
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	105b      	asrs	r3, r3, #1
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	431a      	orrs	r2, r3
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	431a      	orrs	r2, r3
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	431a      	orrs	r2, r3
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <WriteCmdParamN+0x140>)
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	019b      	lsls	r3, r3, #6
 8001294:	4a2d      	ldr	r2, [pc, #180]	; (800134c <WriteCmdParamN+0x148>)
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	2102      	movs	r1, #2
 800129e:	482a      	ldr	r0, [pc, #168]	; (8001348 <WriteCmdParamN+0x144>)
 80012a0:	f7ff fbfc 	bl	8000a9c <PIN_LOW>
 80012a4:	2102      	movs	r1, #2
 80012a6:	4828      	ldr	r0, [pc, #160]	; (8001348 <WriteCmdParamN+0x144>)
 80012a8:	f7ff fc08 	bl	8000abc <PIN_HIGH>
 80012ac:	2102      	movs	r1, #2
 80012ae:	4826      	ldr	r0, [pc, #152]	; (8001348 <WriteCmdParamN+0x144>)
 80012b0:	f7ff fc04 	bl	8000abc <PIN_HIGH>
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <WriteCmdParamN+0x144>)
 80012b6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <WriteCmdParamN+0x140>)
 80012be:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80012c2:	619a      	str	r2, [r3, #24]
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <WriteCmdParamN+0x148>)
 80012c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	7bbb      	ldrb	r3, [r7, #14]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80012d4:	7bbb      	ldrb	r3, [r7, #14]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012dc:	431a      	orrs	r2, r3
 80012de:	7bbb      	ldrb	r3, [r7, #14]
 80012e0:	025b      	lsls	r3, r3, #9
 80012e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e6:	431a      	orrs	r2, r3
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <WriteCmdParamN+0x144>)
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	7bbb      	ldrb	r3, [r7, #14]
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	105b      	asrs	r3, r3, #1
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	431a      	orrs	r2, r3
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	431a      	orrs	r2, r3
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	431a      	orrs	r2, r3
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <WriteCmdParamN+0x140>)
 8001312:	619a      	str	r2, [r3, #24]
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	019b      	lsls	r3, r3, #6
 8001318:	4a0c      	ldr	r2, [pc, #48]	; (800134c <WriteCmdParamN+0x148>)
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	2102      	movs	r1, #2
 8001322:	4809      	ldr	r0, [pc, #36]	; (8001348 <WriteCmdParamN+0x144>)
 8001324:	f7ff fbba 	bl	8000a9c <PIN_LOW>
 8001328:	2102      	movs	r1, #2
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <WriteCmdParamN+0x144>)
 800132c:	f7ff fbc6 	bl	8000abc <PIN_HIGH>
 8001330:	2102      	movs	r1, #2
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <WriteCmdParamN+0x144>)
 8001334:	f7ff fbc2 	bl	8000abc <PIN_HIGH>
 8001338:	2110      	movs	r1, #16
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <WriteCmdParamN+0x144>)
 800133c:	f7ff fbbe 	bl	8000abc <PIN_HIGH>
    while (N-- > 0) {
 8001340:	e0ec      	b.n	800151c <WriteCmdParamN+0x318>
 8001342:	bf00      	nop
 8001344:	40020400 	.word	0x40020400
 8001348:	40020000 	.word	0x40020000
 800134c:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	603a      	str	r2, [r7, #0]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	737b      	strb	r3, [r7, #13]
        write8(u8);
 800135a:	4b79      	ldr	r3, [pc, #484]	; (8001540 <WriteCmdParamN+0x33c>)
 800135c:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001360:	619a      	str	r2, [r3, #24]
 8001362:	4b78      	ldr	r3, [pc, #480]	; (8001544 <WriteCmdParamN+0x340>)
 8001364:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001368:	619a      	str	r2, [r3, #24]
 800136a:	4b77      	ldr	r3, [pc, #476]	; (8001548 <WriteCmdParamN+0x344>)
 800136c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001370:	619a      	str	r2, [r3, #24]
 8001372:	7b7b      	ldrb	r3, [r7, #13]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800137a:	7b7b      	ldrb	r3, [r7, #13]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001382:	431a      	orrs	r2, r3
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	025b      	lsls	r3, r3, #9
 8001388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800138c:	431a      	orrs	r2, r3
 800138e:	4b6c      	ldr	r3, [pc, #432]	; (8001540 <WriteCmdParamN+0x33c>)
 8001390:	619a      	str	r2, [r3, #24]
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800139a:	7b7b      	ldrb	r3, [r7, #13]
 800139c:	105b      	asrs	r3, r3, #1
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	431a      	orrs	r2, r3
 80013a4:	7b7b      	ldrb	r3, [r7, #13]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	431a      	orrs	r2, r3
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	431a      	orrs	r2, r3
 80013b6:	4b63      	ldr	r3, [pc, #396]	; (8001544 <WriteCmdParamN+0x340>)
 80013b8:	619a      	str	r2, [r3, #24]
 80013ba:	7b7b      	ldrb	r3, [r7, #13]
 80013bc:	019b      	lsls	r3, r3, #6
 80013be:	4a62      	ldr	r2, [pc, #392]	; (8001548 <WriteCmdParamN+0x344>)
 80013c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	2102      	movs	r1, #2
 80013c8:	485d      	ldr	r0, [pc, #372]	; (8001540 <WriteCmdParamN+0x33c>)
 80013ca:	f7ff fb67 	bl	8000a9c <PIN_LOW>
 80013ce:	2102      	movs	r1, #2
 80013d0:	485b      	ldr	r0, [pc, #364]	; (8001540 <WriteCmdParamN+0x33c>)
 80013d2:	f7ff fb73 	bl	8000abc <PIN_HIGH>
 80013d6:	2102      	movs	r1, #2
 80013d8:	4859      	ldr	r0, [pc, #356]	; (8001540 <WriteCmdParamN+0x33c>)
 80013da:	f7ff fb6f 	bl	8000abc <PIN_HIGH>
        if (N && is8347) {
 80013de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 809a 	beq.w	800151c <WriteCmdParamN+0x318>
 80013e8:	4b58      	ldr	r3, [pc, #352]	; (800154c <WriteCmdParamN+0x348>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8095 	beq.w	800151c <WriteCmdParamN+0x318>
            cmd++;
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	3301      	adds	r3, #1
 80013f6:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 80013f8:	2110      	movs	r1, #16
 80013fa:	4851      	ldr	r0, [pc, #324]	; (8001540 <WriteCmdParamN+0x33c>)
 80013fc:	f7ff fb4e 	bl	8000a9c <PIN_LOW>
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	b29b      	uxth	r3, r3
 8001406:	733b      	strb	r3, [r7, #12]
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	72fb      	strb	r3, [r7, #11]
 800140c:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <WriteCmdParamN+0x33c>)
 800140e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <WriteCmdParamN+0x340>)
 8001416:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <WriteCmdParamN+0x344>)
 800141e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001422:	619a      	str	r2, [r3, #24]
 8001424:	7b3b      	ldrb	r3, [r7, #12]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800142c:	7b3b      	ldrb	r3, [r7, #12]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	431a      	orrs	r2, r3
 8001436:	7b3b      	ldrb	r3, [r7, #12]
 8001438:	025b      	lsls	r3, r3, #9
 800143a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143e:	431a      	orrs	r2, r3
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <WriteCmdParamN+0x33c>)
 8001442:	619a      	str	r2, [r3, #24]
 8001444:	7b3b      	ldrb	r3, [r7, #12]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800144c:	7b3b      	ldrb	r3, [r7, #12]
 800144e:	105b      	asrs	r3, r3, #1
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	431a      	orrs	r2, r3
 8001456:	7b3b      	ldrb	r3, [r7, #12]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	431a      	orrs	r2, r3
 8001460:	7b3b      	ldrb	r3, [r7, #12]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	431a      	orrs	r2, r3
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <WriteCmdParamN+0x340>)
 800146a:	619a      	str	r2, [r3, #24]
 800146c:	7b3b      	ldrb	r3, [r7, #12]
 800146e:	019b      	lsls	r3, r3, #6
 8001470:	4a35      	ldr	r2, [pc, #212]	; (8001548 <WriteCmdParamN+0x344>)
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	2102      	movs	r1, #2
 800147a:	4831      	ldr	r0, [pc, #196]	; (8001540 <WriteCmdParamN+0x33c>)
 800147c:	f7ff fb0e 	bl	8000a9c <PIN_LOW>
 8001480:	2102      	movs	r1, #2
 8001482:	482f      	ldr	r0, [pc, #188]	; (8001540 <WriteCmdParamN+0x33c>)
 8001484:	f7ff fb1a 	bl	8000abc <PIN_HIGH>
 8001488:	2102      	movs	r1, #2
 800148a:	482d      	ldr	r0, [pc, #180]	; (8001540 <WriteCmdParamN+0x33c>)
 800148c:	f7ff fb16 	bl	8000abc <PIN_HIGH>
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <WriteCmdParamN+0x33c>)
 8001492:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <WriteCmdParamN+0x340>)
 800149a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	4b29      	ldr	r3, [pc, #164]	; (8001548 <WriteCmdParamN+0x344>)
 80014a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014a6:	619a      	str	r2, [r3, #24]
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	431a      	orrs	r2, r3
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014c2:	431a      	orrs	r2, r3
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <WriteCmdParamN+0x33c>)
 80014c6:	619a      	str	r2, [r3, #24]
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80014d0:	7afb      	ldrb	r3, [r7, #11]
 80014d2:	105b      	asrs	r3, r3, #1
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	431a      	orrs	r2, r3
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	431a      	orrs	r2, r3
 80014e4:	7afb      	ldrb	r3, [r7, #11]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	431a      	orrs	r2, r3
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <WriteCmdParamN+0x340>)
 80014ee:	619a      	str	r2, [r3, #24]
 80014f0:	7afb      	ldrb	r3, [r7, #11]
 80014f2:	019b      	lsls	r3, r3, #6
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <WriteCmdParamN+0x344>)
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	2102      	movs	r1, #2
 80014fe:	4810      	ldr	r0, [pc, #64]	; (8001540 <WriteCmdParamN+0x33c>)
 8001500:	f7ff facc 	bl	8000a9c <PIN_LOW>
 8001504:	2102      	movs	r1, #2
 8001506:	480e      	ldr	r0, [pc, #56]	; (8001540 <WriteCmdParamN+0x33c>)
 8001508:	f7ff fad8 	bl	8000abc <PIN_HIGH>
 800150c:	2102      	movs	r1, #2
 800150e:	480c      	ldr	r0, [pc, #48]	; (8001540 <WriteCmdParamN+0x33c>)
 8001510:	f7ff fad4 	bl	8000abc <PIN_HIGH>
 8001514:	2110      	movs	r1, #16
 8001516:	480a      	ldr	r0, [pc, #40]	; (8001540 <WriteCmdParamN+0x33c>)
 8001518:	f7ff fad0 	bl	8000abc <PIN_HIGH>
    while (N-- > 0) {
 800151c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	3a01      	subs	r2, #1
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	717a      	strb	r2, [r7, #5]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f73f af11 	bgt.w	8001350 <WriteCmdParamN+0x14c>
        }
    }
    CS_IDLE;
 800152e:	2101      	movs	r1, #1
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <WriteCmdParamN+0x340>)
 8001532:	f7ff fac3 	bl	8000abc <PIN_HIGH>
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40020000 	.word	0x40020000
 8001544:	40020400 	.word	0x40020400
 8001548:	40020800 	.word	0x40020800
 800154c:	20000037 	.word	0x20000037

08001550 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	4604      	mov	r4, r0
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	4603      	mov	r3, r0
 8001564:	71bb      	strb	r3, [r7, #6]
 8001566:	460b      	mov	r3, r1
 8001568:	717b      	strb	r3, [r7, #5]
 800156a:	4613      	mov	r3, r2
 800156c:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	733b      	strb	r3, [r7, #12]
 8001572:	797b      	ldrb	r3, [r7, #5]
 8001574:	737b      	strb	r3, [r7, #13]
 8001576:	793b      	ldrb	r3, [r7, #4]
 8001578:	73bb      	strb	r3, [r7, #14]
 800157a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800157e:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	b29b      	uxth	r3, r3
 8001584:	f107 020c 	add.w	r2, r7, #12
 8001588:	2104      	movs	r1, #4
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fe3a 	bl	8001204 <WriteCmdParamN>
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}

08001598 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 80015a8:	e046      	b.n	8001638 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	627a      	str	r2, [r7, #36]	; 0x24
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	627a      	str	r2, [r7, #36]	; 0x24
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 80015c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015c6:	2b7f      	cmp	r3, #127	; 0x7f
 80015c8:	d108      	bne.n	80015dc <init_table+0x44>
        {
            delay(len);
 80015ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff98 	bl	8000504 <delay>
            len = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015da:	e024      	b.n	8001626 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80015e2:	e010      	b.n	8001606 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	627a      	str	r2, [r7, #36]	; 0x24
 80015ea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80015ee:	7819      	ldrb	r1, [r3, #0]
 80015f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f4:	4413      	add	r3, r2
 80015f6:	460a      	mov	r2, r1
 80015f8:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 80015fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001600:	3301      	adds	r3, #1
 8001602:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001606:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800160a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800160e:	429a      	cmp	r2, r3
 8001610:	d3e8      	bcc.n	80015e4 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8001612:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001616:	b29b      	uxth	r3, r3
 8001618:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800161c:	f107 0208 	add.w	r2, r7, #8
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdef 	bl	8001204 <WriteCmdParamN>
        }
        size -= len + 2;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162c:	b29b      	uxth	r3, r3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	b29b      	uxth	r3, r3
 8001632:	3b02      	subs	r3, #2
 8001634:	b29b      	uxth	r3, r3
 8001636:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8001638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800163c:	2b00      	cmp	r3, #0
 800163e:	dcb4      	bgt.n	80015aa <init_table+0x12>
    }
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8001658:	e01d      	b.n	8001696 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1c9a      	adds	r2, r3, #2
 800165e:	60fa      	str	r2, [r7, #12]
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1c9a      	adds	r2, r3, #2
 8001668:	60fa      	str	r2, [r7, #12]
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 800166e:	897b      	ldrh	r3, [r7, #10]
 8001670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001674:	4293      	cmp	r3, r2
 8001676:	d104      	bne.n	8001682 <init_table16+0x3a>
            delay(d);
 8001678:	893b      	ldrh	r3, [r7, #8]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff42 	bl	8000504 <delay>
 8001680:	e005      	b.n	800168e <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8001682:	893a      	ldrh	r2, [r7, #8]
 8001684:	897b      	ldrh	r3, [r7, #10]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fc85 	bl	8000f98 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	3b04      	subs	r3, #4
 8001692:	b29b      	uxth	r3, r3
 8001694:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001696:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dcdd      	bgt.n	800165a <init_table16+0x12>
    }
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <reset>:



void reset(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
    done_reset = 1;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <reset+0x84>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80016b2:	f7ff fb5b 	bl	8000d6c <setWriteDir>
    CTL_INIT();
 80016b6:	2101      	movs	r1, #1
 80016b8:	481d      	ldr	r0, [pc, #116]	; (8001730 <reset+0x88>)
 80016ba:	f7ff fa25 	bl	8000b08 <PIN_OUTPUT>
 80016be:	2102      	movs	r1, #2
 80016c0:	481b      	ldr	r0, [pc, #108]	; (8001730 <reset+0x88>)
 80016c2:	f7ff fa21 	bl	8000b08 <PIN_OUTPUT>
 80016c6:	2110      	movs	r1, #16
 80016c8:	4819      	ldr	r0, [pc, #100]	; (8001730 <reset+0x88>)
 80016ca:	f7ff fa1d 	bl	8000b08 <PIN_OUTPUT>
 80016ce:	2101      	movs	r1, #1
 80016d0:	4818      	ldr	r0, [pc, #96]	; (8001734 <reset+0x8c>)
 80016d2:	f7ff fa19 	bl	8000b08 <PIN_OUTPUT>
 80016d6:	2102      	movs	r1, #2
 80016d8:	4817      	ldr	r0, [pc, #92]	; (8001738 <reset+0x90>)
 80016da:	f7ff fa15 	bl	8000b08 <PIN_OUTPUT>
    CS_IDLE;
 80016de:	2101      	movs	r1, #1
 80016e0:	4814      	ldr	r0, [pc, #80]	; (8001734 <reset+0x8c>)
 80016e2:	f7ff f9eb 	bl	8000abc <PIN_HIGH>
    RD_IDLE;
 80016e6:	2101      	movs	r1, #1
 80016e8:	4811      	ldr	r0, [pc, #68]	; (8001730 <reset+0x88>)
 80016ea:	f7ff f9e7 	bl	8000abc <PIN_HIGH>
    WR_IDLE;
 80016ee:	2102      	movs	r1, #2
 80016f0:	480f      	ldr	r0, [pc, #60]	; (8001730 <reset+0x88>)
 80016f2:	f7ff f9e3 	bl	8000abc <PIN_HIGH>
    RESET_IDLE;
 80016f6:	2102      	movs	r1, #2
 80016f8:	480f      	ldr	r0, [pc, #60]	; (8001738 <reset+0x90>)
 80016fa:	f7ff f9df 	bl	8000abc <PIN_HIGH>
    delay(50);
 80016fe:	2032      	movs	r0, #50	; 0x32
 8001700:	f7fe ff00 	bl	8000504 <delay>
    RESET_ACTIVE;
 8001704:	2102      	movs	r1, #2
 8001706:	480c      	ldr	r0, [pc, #48]	; (8001738 <reset+0x90>)
 8001708:	f7ff f9c8 	bl	8000a9c <PIN_LOW>
    delay(100);
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	f7fe fef9 	bl	8000504 <delay>
    RESET_IDLE;
 8001712:	2102      	movs	r1, #2
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <reset+0x90>)
 8001716:	f7ff f9d1 	bl	8000abc <PIN_HIGH>
    delay(100);
 800171a:	2064      	movs	r0, #100	; 0x64
 800171c:	f7fe fef2 	bl	8000504 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8001720:	2100      	movs	r1, #0
 8001722:	20b0      	movs	r0, #176	; 0xb0
 8001724:	f7ff facf 	bl	8000cc6 <WriteCmdData>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000036 	.word	0x20000036
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020800 	.word	0x40020800

0800173c <read16bits>:

static uint16_t read16bits(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8001742:	2101      	movs	r1, #1
 8001744:	4867      	ldr	r0, [pc, #412]	; (80018e4 <read16bits+0x1a8>)
 8001746:	f7ff f9b9 	bl	8000abc <PIN_HIGH>
 800174a:	2101      	movs	r1, #1
 800174c:	4865      	ldr	r0, [pc, #404]	; (80018e4 <read16bits+0x1a8>)
 800174e:	f7ff f9a5 	bl	8000a9c <PIN_LOW>
 8001752:	2101      	movs	r1, #1
 8001754:	4863      	ldr	r0, [pc, #396]	; (80018e4 <read16bits+0x1a8>)
 8001756:	f7ff f9a1 	bl	8000a9c <PIN_LOW>
 800175a:	2101      	movs	r1, #1
 800175c:	4861      	ldr	r0, [pc, #388]	; (80018e4 <read16bits+0x1a8>)
 800175e:	f7ff f99d 	bl	8000a9c <PIN_LOW>
 8001762:	2101      	movs	r1, #1
 8001764:	485f      	ldr	r0, [pc, #380]	; (80018e4 <read16bits+0x1a8>)
 8001766:	f7ff f999 	bl	8000a9c <PIN_LOW>
 800176a:	4b5e      	ldr	r3, [pc, #376]	; (80018e4 <read16bits+0x1a8>)
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	b29a      	uxth	r2, r3
 8001778:	4b5a      	ldr	r3, [pc, #360]	; (80018e4 <read16bits+0x1a8>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	0a5b      	lsrs	r3, r3, #9
 800177e:	b29b      	uxth	r3, r3
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	b29b      	uxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b56      	ldr	r3, [pc, #344]	; (80018e4 <read16bits+0x1a8>)
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b29b      	uxth	r3, r3
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	b29b      	uxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b52      	ldr	r3, [pc, #328]	; (80018e8 <read16bits+0x1ac>)
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <read16bits+0x1ac>)
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <read16bits+0x1ac>)
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b45      	ldr	r3, [pc, #276]	; (80018e8 <read16bits+0x1ac>)
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	4b41      	ldr	r3, [pc, #260]	; (80018ec <read16bits+0x1b0>)
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]
 80017f6:	2101      	movs	r1, #1
 80017f8:	483a      	ldr	r0, [pc, #232]	; (80018e4 <read16bits+0x1a8>)
 80017fa:	f7ff f95f 	bl	8000abc <PIN_HIGH>
 80017fe:	2101      	movs	r1, #1
 8001800:	4838      	ldr	r0, [pc, #224]	; (80018e4 <read16bits+0x1a8>)
 8001802:	f7ff f95b 	bl	8000abc <PIN_HIGH>
    READ_8(lo);
 8001806:	2101      	movs	r1, #1
 8001808:	4836      	ldr	r0, [pc, #216]	; (80018e4 <read16bits+0x1a8>)
 800180a:	f7ff f957 	bl	8000abc <PIN_HIGH>
 800180e:	2101      	movs	r1, #1
 8001810:	4834      	ldr	r0, [pc, #208]	; (80018e4 <read16bits+0x1a8>)
 8001812:	f7ff f943 	bl	8000a9c <PIN_LOW>
 8001816:	2101      	movs	r1, #1
 8001818:	4832      	ldr	r0, [pc, #200]	; (80018e4 <read16bits+0x1a8>)
 800181a:	f7ff f93f 	bl	8000a9c <PIN_LOW>
 800181e:	2101      	movs	r1, #1
 8001820:	4830      	ldr	r0, [pc, #192]	; (80018e4 <read16bits+0x1a8>)
 8001822:	f7ff f93b 	bl	8000a9c <PIN_LOW>
 8001826:	2101      	movs	r1, #1
 8001828:	482e      	ldr	r0, [pc, #184]	; (80018e4 <read16bits+0x1a8>)
 800182a:	f7ff f937 	bl	8000a9c <PIN_LOW>
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <read16bits+0x1a8>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	085b      	lsrs	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <read16bits+0x1a8>)
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	0a5b      	lsrs	r3, r3, #9
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <read16bits+0x1a8>)
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <read16bits+0x1ac>)
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <read16bits+0x1ac>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <read16bits+0x1ac>)
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <read16bits+0x1ac>)
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <read16bits+0x1b0>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	717b      	strb	r3, [r7, #5]
 80018ba:	2101      	movs	r1, #1
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <read16bits+0x1a8>)
 80018be:	f7ff f8fd 	bl	8000abc <PIN_HIGH>
 80018c2:	2101      	movs	r1, #1
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <read16bits+0x1a8>)
 80018c6:	f7ff f8f9 	bl	8000abc <PIN_HIGH>
    return (ret << 8) | lo;
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	797b      	ldrb	r3, [r7, #5]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	b29b      	uxth	r3, r3
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020800 	.word	0x40020800

080018f0 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	80fb      	strh	r3, [r7, #6]
 80018fc:	4613      	mov	r3, r2
 80018fe:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8001900:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <readReg+0x188>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <readReg+0x1c>
        reset();
 8001908:	f7ff fece 	bl	80016a8 <reset>
    CS_ACTIVE;
 800190c:	2101      	movs	r1, #1
 800190e:	485b      	ldr	r0, [pc, #364]	; (8001a7c <readReg+0x18c>)
 8001910:	f7ff f8c4 	bl	8000a9c <PIN_LOW>
    WriteCmd(reg);
 8001914:	2110      	movs	r1, #16
 8001916:	485a      	ldr	r0, [pc, #360]	; (8001a80 <readReg+0x190>)
 8001918:	f7ff f8c0 	bl	8000a9c <PIN_LOW>
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	b29b      	uxth	r3, r3
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	73bb      	strb	r3, [r7, #14]
 8001928:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <readReg+0x190>)
 800192a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800192e:	619a      	str	r2, [r3, #24]
 8001930:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <readReg+0x18c>)
 8001932:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001936:	619a      	str	r2, [r3, #24]
 8001938:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <readReg+0x194>)
 800193a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800193e:	619a      	str	r2, [r3, #24]
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	431a      	orrs	r2, r3
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	025b      	lsls	r3, r3, #9
 8001956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800195a:	431a      	orrs	r2, r3
 800195c:	4b48      	ldr	r3, [pc, #288]	; (8001a80 <readReg+0x190>)
 800195e:	619a      	str	r2, [r3, #24]
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	105b      	asrs	r3, r3, #1
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	431a      	orrs	r2, r3
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	431a      	orrs	r2, r3
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	431a      	orrs	r2, r3
 8001984:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <readReg+0x18c>)
 8001986:	619a      	str	r2, [r3, #24]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	019b      	lsls	r3, r3, #6
 800198c:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <readReg+0x194>)
 800198e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	2102      	movs	r1, #2
 8001996:	483a      	ldr	r0, [pc, #232]	; (8001a80 <readReg+0x190>)
 8001998:	f7ff f880 	bl	8000a9c <PIN_LOW>
 800199c:	2102      	movs	r1, #2
 800199e:	4838      	ldr	r0, [pc, #224]	; (8001a80 <readReg+0x190>)
 80019a0:	f7ff f88c 	bl	8000abc <PIN_HIGH>
 80019a4:	2102      	movs	r1, #2
 80019a6:	4836      	ldr	r0, [pc, #216]	; (8001a80 <readReg+0x190>)
 80019a8:	f7ff f888 	bl	8000abc <PIN_HIGH>
 80019ac:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <readReg+0x190>)
 80019ae:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80019b2:	619a      	str	r2, [r3, #24]
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <readReg+0x18c>)
 80019b6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80019ba:	619a      	str	r2, [r3, #24]
 80019bc:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <readReg+0x194>)
 80019be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019c2:	619a      	str	r2, [r3, #24]
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	431a      	orrs	r2, r3
 80019d6:	7bbb      	ldrb	r3, [r7, #14]
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019de:	431a      	orrs	r2, r3
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <readReg+0x190>)
 80019e2:	619a      	str	r2, [r3, #24]
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	105b      	asrs	r3, r3, #1
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	431a      	orrs	r2, r3
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	431a      	orrs	r2, r3
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	431a      	orrs	r2, r3
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <readReg+0x18c>)
 8001a0a:	619a      	str	r2, [r3, #24]
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	019b      	lsls	r3, r3, #6
 8001a10:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <readReg+0x194>)
 8001a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4819      	ldr	r0, [pc, #100]	; (8001a80 <readReg+0x190>)
 8001a1c:	f7ff f83e 	bl	8000a9c <PIN_LOW>
 8001a20:	2102      	movs	r1, #2
 8001a22:	4817      	ldr	r0, [pc, #92]	; (8001a80 <readReg+0x190>)
 8001a24:	f7ff f84a 	bl	8000abc <PIN_HIGH>
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4815      	ldr	r0, [pc, #84]	; (8001a80 <readReg+0x190>)
 8001a2c:	f7ff f846 	bl	8000abc <PIN_HIGH>
 8001a30:	2110      	movs	r1, #16
 8001a32:	4813      	ldr	r0, [pc, #76]	; (8001a80 <readReg+0x190>)
 8001a34:	f7ff f842 	bl	8000abc <PIN_HIGH>
    setReadDir();
 8001a38:	f7ff f96a 	bl	8000d10 <setReadDir>
    delay(1);    //1us should be adequate
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7fe fd61 	bl	8000504 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001a42:	f7ff fe7b 	bl	800173c <read16bits>
 8001a46:	4603      	mov	r3, r0
 8001a48:	81bb      	strh	r3, [r7, #12]
 8001a4a:	797b      	ldrb	r3, [r7, #5]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	717b      	strb	r3, [r7, #5]
 8001a52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	daf3      	bge.n	8001a42 <readReg+0x152>
    RD_IDLE;
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <readReg+0x190>)
 8001a5e:	f7ff f82d 	bl	8000abc <PIN_HIGH>
    CS_IDLE;
 8001a62:	2101      	movs	r1, #1
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <readReg+0x18c>)
 8001a66:	f7ff f829 	bl	8000abc <PIN_HIGH>
    setWriteDir();
 8001a6a:	f7ff f97f 	bl	8000d6c <setWriteDir>
    return ret;
 8001a6e:	89bb      	ldrh	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000036 	.word	0x20000036
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020800 	.word	0x40020800

08001a88 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff2a 	bl	80018f0 <readReg>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff23 	bl	80018f0 <readReg>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	89bb      	ldrh	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff0f 	bl	80018f0 <readReg>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff08 	bl	80018f0 <readReg>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff01 	bl	80018f0 <readReg>
 8001aee:	4603      	mov	r3, r0
 8001af0:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	89ba      	ldrh	r2, [r7, #12]
 8001af8:	0212      	lsls	r2, r2, #8
 8001afa:	4313      	orrs	r3, r2
 8001afc:	897a      	ldrh	r2, [r7, #10]
 8001afe:	0a12      	lsrs	r2, r2, #8
 8001b00:	b292      	uxth	r2, r2
 8001b02:	4313      	orrs	r3, r2
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <tft_init>:


void tft_init(uint16_t ID)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8001b1e:	4bc0      	ldr	r3, [pc, #768]	; (8001e20 <tft_init+0x314>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8001b24:	4abf      	ldr	r2, [pc, #764]	; (8001e24 <tft_init+0x318>)
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	8013      	strh	r3, [r2, #0]
 8001b2a:	4bbe      	ldr	r3, [pc, #760]	; (8001e24 <tft_init+0x318>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	f249 3202 	movw	r2, #37634	; 0x9302
 8001b32:	4293      	cmp	r3, r2
 8001b34:	f000 81da 	beq.w	8001eec <tft_init+0x3e0>
 8001b38:	f249 3202 	movw	r2, #37634	; 0x9302
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	dc73      	bgt.n	8001c28 <tft_init+0x11c>
 8001b40:	f242 0253 	movw	r2, #8275	; 0x2053
 8001b44:	4293      	cmp	r3, r2
 8001b46:	f000 81c7 	beq.w	8001ed8 <tft_init+0x3cc>
 8001b4a:	f242 0253 	movw	r2, #8275	; 0x2053
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	dc2d      	bgt.n	8001bae <tft_init+0xa2>
 8001b52:	f241 5211 	movw	r2, #5393	; 0x1511
 8001b56:	4293      	cmp	r3, r2
 8001b58:	f000 80df 	beq.w	8001d1a <tft_init+0x20e>
 8001b5c:	f241 5211 	movw	r2, #5393	; 0x1511
 8001b60:	4293      	cmp	r3, r2
 8001b62:	dc0b      	bgt.n	8001b7c <tft_init+0x70>
 8001b64:	2b99      	cmp	r3, #153	; 0x99
 8001b66:	f000 8141 	beq.w	8001dec <tft_init+0x2e0>
 8001b6a:	f241 5205 	movw	r2, #5381	; 0x1505
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	f000 8175 	beq.w	8001e5e <tft_init+0x352>
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	f000 814e 	beq.w	8001e16 <tft_init+0x30a>
 8001b7a:	e253      	b.n	8002024 <tft_init+0x518>
 8001b7c:	f241 5226 	movw	r2, #5414	; 0x1526
 8001b80:	4293      	cmp	r3, r2
 8001b82:	f000 80e7 	beq.w	8001d54 <tft_init+0x248>
 8001b86:	f241 5226 	movw	r2, #5414	; 0x1526
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	dc04      	bgt.n	8001b98 <tft_init+0x8c>
 8001b8e:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001b92:	f000 80d6 	beq.w	8001d42 <tft_init+0x236>
 8001b96:	e245      	b.n	8002024 <tft_init+0x518>
 8001b98:	f241 5281 	movw	r2, #5505	; 0x1581
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	f000 81dc 	beq.w	8001f5a <tft_init+0x44e>
 8001ba2:	f241 6202 	movw	r2, #5634	; 0x1602
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f000 818d 	beq.w	8001ec6 <tft_init+0x3ba>
 8001bac:	e23a      	b.n	8002024 <tft_init+0x518>
 8001bae:	f247 7293 	movw	r2, #30611	; 0x7793
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	f000 8227 	beq.w	8002006 <tft_init+0x4fa>
 8001bb8:	f247 7293 	movw	r2, #30611	; 0x7793
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	dc19      	bgt.n	8001bf4 <tft_init+0xe8>
 8001bc0:	f245 4208 	movw	r2, #21512	; 0x5408
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	f000 8145 	beq.w	8001e54 <tft_init+0x348>
 8001bca:	f245 4208 	movw	r2, #21512	; 0x5408
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	dc05      	bgt.n	8001bde <tft_init+0xd2>
 8001bd2:	f245 3210 	movw	r2, #21264	; 0x5310
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	f000 80c5 	beq.w	8001d66 <tft_init+0x25a>
 8001bdc:	e222      	b.n	8002024 <tft_init+0x518>
 8001bde:	f646 0209 	movw	r2, #26633	; 0x6809
 8001be2:	4293      	cmp	r3, r2
 8001be4:	f000 8146 	beq.w	8001e74 <tft_init+0x368>
 8001be8:	f247 7289 	movw	r2, #30601	; 0x7789
 8001bec:	4293      	cmp	r3, r2
 8001bee:	f000 80cf 	beq.w	8001d90 <tft_init+0x284>
 8001bf2:	e217      	b.n	8002024 <tft_init+0x518>
 8001bf4:	f248 0231 	movw	r2, #32817	; 0x8031
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	f000 80d2 	beq.w	8001da2 <tft_init+0x296>
 8001bfe:	f248 0231 	movw	r2, #32817	; 0x8031
 8001c02:	4293      	cmp	r3, r2
 8001c04:	dc05      	bgt.n	8001c12 <tft_init+0x106>
 8001c06:	f247 7296 	movw	r2, #30614	; 0x7796
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	f000 81d6 	beq.w	8001fbc <tft_init+0x4b0>
 8001c10:	e208      	b.n	8002024 <tft_init+0x518>
 8001c12:	f248 3257 	movw	r2, #33623	; 0x8357
 8001c16:	4293      	cmp	r3, r2
 8001c18:	f000 80cc 	beq.w	8001db4 <tft_init+0x2a8>
 8001c1c:	f249 0290 	movw	r2, #37008	; 0x9090
 8001c20:	4293      	cmp	r3, r2
 8001c22:	f000 80cc 	beq.w	8001dbe <tft_init+0x2b2>
 8001c26:	e1fd      	b.n	8002024 <tft_init+0x518>
 8001c28:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	f000 8177 	beq.w	8001f20 <tft_init+0x414>
 8001c32:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c36:	4293      	cmp	r3, r2
 8001c38:	dc3c      	bgt.n	8001cb4 <tft_init+0x1a8>
 8001c3a:	f249 3229 	movw	r2, #37673	; 0x9329
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	f000 815e 	beq.w	8001f00 <tft_init+0x3f4>
 8001c44:	f249 3229 	movw	r2, #37673	; 0x9329
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	dc19      	bgt.n	8001c80 <tft_init+0x174>
 8001c4c:	f249 3225 	movw	r2, #37669	; 0x9325
 8001c50:	4293      	cmp	r3, r2
 8001c52:	f000 8114 	beq.w	8001e7e <tft_init+0x372>
 8001c56:	f249 3225 	movw	r2, #37669	; 0x9325
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	dc05      	bgt.n	8001c6a <tft_init+0x15e>
 8001c5e:	f249 3220 	movw	r2, #37664	; 0x9320
 8001c62:	4293      	cmp	r3, r2
 8001c64:	f000 80fb 	beq.w	8001e5e <tft_init+0x352>
 8001c68:	e1dc      	b.n	8002024 <tft_init+0x518>
 8001c6a:	f249 3227 	movw	r2, #37671	; 0x9327
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	f000 8115 	beq.w	8001e9e <tft_init+0x392>
 8001c74:	f249 3228 	movw	r2, #37672	; 0x9328
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f000 8100 	beq.w	8001e7e <tft_init+0x372>
 8001c7e:	e1d1      	b.n	8002024 <tft_init+0x518>
 8001c80:	f249 3235 	movw	r2, #37685	; 0x9335
 8001c84:	4293      	cmp	r3, r2
 8001c86:	f000 80ff 	beq.w	8001e88 <tft_init+0x37c>
 8001c8a:	f249 3235 	movw	r2, #37685	; 0x9335
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	dc05      	bgt.n	8001c9e <tft_init+0x192>
 8001c92:	f249 3231 	movw	r2, #37681	; 0x9331
 8001c96:	4293      	cmp	r3, r2
 8001c98:	f000 80f6 	beq.w	8001e88 <tft_init+0x37c>
 8001c9c:	e1c2      	b.n	8002024 <tft_init+0x518>
 8001c9e:	f249 3238 	movw	r2, #37688	; 0x9338
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f000 8127 	beq.w	8001ef6 <tft_init+0x3ea>
 8001ca8:	f249 3240 	movw	r2, #37696	; 0x9340
 8001cac:	4293      	cmp	r3, r2
 8001cae:	f000 8132 	beq.w	8001f16 <tft_init+0x40a>
 8001cb2:	e1b7      	b.n	8002024 <tft_init+0x518>
 8001cb4:	f249 4288 	movw	r2, #38024	; 0x9488
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	dc14      	bgt.n	8001ce6 <tft_init+0x1da>
 8001cbc:	f249 4287 	movw	r2, #38023	; 0x9487
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	f280 8180 	bge.w	8001fc6 <tft_init+0x4ba>
 8001cc6:	f249 4281 	movw	r2, #38017	; 0x9481
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	f000 814a 	beq.w	8001f64 <tft_init+0x458>
 8001cd0:	f249 4286 	movw	r2, #38022	; 0x9486
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	f000 815c 	beq.w	8001f92 <tft_init+0x486>
 8001cda:	f249 3242 	movw	r2, #37698	; 0x9342
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	f000 8127 	beq.w	8001f32 <tft_init+0x426>
 8001ce4:	e19e      	b.n	8002024 <tft_init+0x518>
 8001ce6:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001cea:	4293      	cmp	r3, r2
 8001cec:	f000 8182 	beq.w	8001ff4 <tft_init+0x4e8>
 8001cf0:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	dc05      	bgt.n	8001d04 <tft_init+0x1f8>
 8001cf8:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	f000 80f0 	beq.w	8001ee2 <tft_init+0x3d6>
 8001d02:	e18f      	b.n	8002024 <tft_init+0x518>
 8001d04:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	f000 817c 	beq.w	8002006 <tft_init+0x4fa>
 8001d0e:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001d12:	4293      	cmp	r3, r2
 8001d14:	f000 816e 	beq.w	8001ff4 <tft_init+0x4e8>
 8001d18:	e184      	b.n	8002024 <tft_init+0x518>
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <tft_init+0x31c>)
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8001d20:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <tft_init+0x320>)
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	2303      	movs	r3, #3
 8001d26:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001d28:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <tft_init+0x324>)
 8001d2a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d32:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001d34:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <tft_init+0x328>)
 8001d36:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d3e:	801a      	strh	r2, [r3, #0]
        break;
 8001d40:	e176      	b.n	8002030 <tft_init+0x524>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <tft_init+0x31c>)
 8001d44:	f240 4213 	movw	r2, #1043	; 0x413
 8001d48:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <tft_init+0x32c>)
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	2306      	movs	r3, #6
 8001d50:	837b      	strh	r3, [r7, #26]
        break;
 8001d52:	e16d      	b.n	8002030 <tft_init+0x524>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001d54:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <tft_init+0x31c>)
 8001d56:	f240 4213 	movw	r2, #1043	; 0x413
 8001d5a:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8001d5c:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <tft_init+0x330>)
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	230c      	movs	r3, #12
 8001d62:	837b      	strh	r3, [r7, #26]
        break;
 8001d64:	e164      	b.n	8002030 <tft_init+0x524>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8001d66:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <tft_init+0x31c>)
 8001d68:	f640 6213 	movw	r2, #3603	; 0xe13
 8001d6c:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <tft_init+0x334>)
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2302      	movs	r3, #2
 8001d74:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <tft_init+0x324>)
 8001d78:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d80:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <tft_init+0x328>)
 8001d84:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d8c:	801a      	strh	r2, [r3, #0]
        break;
 8001d8e:	e14f      	b.n	8002030 <tft_init+0x524>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <tft_init+0x31c>)
 8001d92:	f240 4213 	movw	r2, #1043	; 0x413
 8001d96:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <tft_init+0x338>)
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	2341      	movs	r3, #65	; 0x41
 8001d9e:	837b      	strh	r3, [r7, #26]
        break;
 8001da0:	e146      	b.n	8002030 <tft_init+0x524>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <tft_init+0x31c>)
 8001da4:	f241 4213 	movw	r2, #5139	; 0x1413
 8001da8:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <tft_init+0x33c>)
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	2312      	movs	r3, #18
 8001db0:	837b      	strh	r3, [r7, #26]
        break;
 8001db2:	e13d      	b.n	8002030 <tft_init+0x524>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <tft_init+0x31c>)
 8001db6:	f241 4203 	movw	r2, #5123	; 0x1403
 8001dba:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8001dbc:	e003      	b.n	8001dc6 <tft_init+0x2ba>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <tft_init+0x31c>)
 8001dc0:	f241 4213 	movw	r2, #5139	; 0x1413
 8001dc4:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <tft_init+0x340>)
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	2302      	movs	r3, #2
 8001dd0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <tft_init+0x324>)
 8001dd4:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ddc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <tft_init+0x328>)
 8001de0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001de8:	801a      	strh	r2, [r3, #0]
        break;
 8001dea:	e121      	b.n	8002030 <tft_init+0x524>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <tft_init+0x31c>)
 8001dee:	f241 4213 	movw	r2, #5139	; 0x1413
 8001df2:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <tft_init+0x344>)
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	231d      	movs	r3, #29
 8001dfa:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <tft_init+0x324>)
 8001dfe:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e06:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <tft_init+0x328>)
 8001e0a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e12:	801a      	strh	r2, [r3, #0]
        break;
 8001e14:	e10c      	b.n	8002030 <tft_init+0x524>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <tft_init+0x31c>)
 8001e18:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001e1c:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8001e1e:	e022      	b.n	8001e66 <tft_init+0x35a>
 8001e20:	200000d8 	.word	0x200000d8
 8001e24:	200000d6 	.word	0x200000d6
 8001e28:	200000c8 	.word	0x200000c8
 8001e2c:	080075e8 	.word	0x080075e8
 8001e30:	08000b51 	.word	0x08000b51
 8001e34:	08000b39 	.word	0x08000b39
 8001e38:	080075ec 	.word	0x080075ec
 8001e3c:	080075f4 	.word	0x080075f4
 8001e40:	08007600 	.word	0x08007600
 8001e44:	08007604 	.word	0x08007604
 8001e48:	08007648 	.word	0x08007648
 8001e4c:	0800765c 	.word	0x0800765c
 8001e50:	08007660 	.word	0x08007660
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8001e54:	4ba0      	ldr	r3, [pc, #640]	; (80020d8 <tft_init+0x5cc>)
 8001e56:	f241 0204 	movw	r2, #4100	; 0x1004
 8001e5a:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8001e5c:	e003      	b.n	8001e66 <tft_init+0x35a>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8001e5e:	4b9e      	ldr	r3, [pc, #632]	; (80020d8 <tft_init+0x5cc>)
 8001e60:	f241 0204 	movw	r2, #4100	; 0x1004
 8001e64:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8001e6a:	21d8      	movs	r1, #216	; 0xd8
 8001e6c:	489b      	ldr	r0, [pc, #620]	; (80020dc <tft_init+0x5d0>)
 8001e6e:	f7ff fbeb 	bl	8001648 <init_table16>
        break;
 8001e72:	e0dd      	b.n	8002030 <tft_init+0x524>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8001e74:	4b98      	ldr	r3, [pc, #608]	; (80020d8 <tft_init+0x5cc>)
 8001e76:	f241 1202 	movw	r2, #4354	; 0x1102
 8001e7a:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001e7c:	e008      	b.n	8001e90 <tft_init+0x384>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8001e7e:	4b96      	ldr	r3, [pc, #600]	; (80020d8 <tft_init+0x5cc>)
 8001e80:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001e84:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001e86:	e003      	b.n	8001e90 <tft_init+0x384>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8001e88:	4b93      	ldr	r3, [pc, #588]	; (80020d8 <tft_init+0x5cc>)
 8001e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8e:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8001e94:	21cc      	movs	r1, #204	; 0xcc
 8001e96:	4892      	ldr	r0, [pc, #584]	; (80020e0 <tft_init+0x5d4>)
 8001e98:	f7ff fbd6 	bl	8001648 <init_table16>
        break;
 8001e9c:	e0c8      	b.n	8002030 <tft_init+0x524>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001e9e:	4b8e      	ldr	r3, [pc, #568]	; (80020d8 <tft_init+0x5cc>)
 8001ea0:	f240 4203 	movw	r2, #1027	; 0x403
 8001ea4:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8001ea6:	4b8f      	ldr	r3, [pc, #572]	; (80020e4 <tft_init+0x5d8>)
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	231e      	movs	r3, #30
 8001eac:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001eae:	4b8e      	ldr	r3, [pc, #568]	; (80020e8 <tft_init+0x5dc>)
 8001eb0:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001eb8:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001eba:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <tft_init+0x5e0>)
 8001ebc:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	22f0      	movs	r2, #240	; 0xf0
 8001ec2:	801a      	strh	r2, [r3, #0]
        break;
 8001ec4:	e0b4      	b.n	8002030 <tft_init+0x524>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8001ec6:	4b84      	ldr	r3, [pc, #528]	; (80020d8 <tft_init+0x5cc>)
 8001ec8:	f240 4203 	movw	r2, #1027	; 0x403
 8001ecc:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8001ece:	4b88      	ldr	r3, [pc, #544]	; (80020f0 <tft_init+0x5e4>)
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	837b      	strh	r3, [r7, #26]
        break;
 8001ed6:	e0ab      	b.n	8002030 <tft_init+0x524>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8001ed8:	4b7f      	ldr	r3, [pc, #508]	; (80020d8 <tft_init+0x5cc>)
 8001eda:	f241 4217 	movw	r2, #5143	; 0x1417
 8001ede:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001ee0:	e012      	b.n	8001f08 <tft_init+0x3fc>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	; (80020d8 <tft_init+0x5cc>)
 8001ee4:	f241 4213 	movw	r2, #5139	; 0x1413
 8001ee8:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001eea:	e00d      	b.n	8001f08 <tft_init+0x3fc>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001eec:	4b7a      	ldr	r3, [pc, #488]	; (80020d8 <tft_init+0x5cc>)
 8001eee:	f240 4203 	movw	r2, #1027	; 0x403
 8001ef2:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001ef4:	e008      	b.n	8001f08 <tft_init+0x3fc>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001ef6:	4b78      	ldr	r3, [pc, #480]	; (80020d8 <tft_init+0x5cc>)
 8001ef8:	f240 4213 	movw	r2, #1043	; 0x413
 8001efc:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001efe:	e003      	b.n	8001f08 <tft_init+0x3fc>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8001f00:	4b75      	ldr	r3, [pc, #468]	; (80020d8 <tft_init+0x5cc>)
 8001f02:	f241 6203 	movw	r2, #5635	; 0x1603
 8001f06:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8001f0c:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <tft_init+0x5e8>)
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	2303      	movs	r3, #3
 8001f12:	837b      	strh	r3, [r7, #26]
        break;
 8001f14:	e08c      	b.n	8002030 <tft_init+0x524>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001f16:	4b70      	ldr	r3, [pc, #448]	; (80020d8 <tft_init+0x5cc>)
 8001f18:	f241 4213 	movw	r2, #5139	; 0x1413
 8001f1c:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8001f1e:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001f20:	4b6d      	ldr	r3, [pc, #436]	; (80020d8 <tft_init+0x5cc>)
 8001f22:	f240 4213 	movw	r2, #1043	; 0x413
 8001f26:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <tft_init+0x5ec>)
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	2365      	movs	r3, #101	; 0x65
 8001f2e:	837b      	strh	r3, [r7, #26]
        break;
 8001f30:	e07e      	b.n	8002030 <tft_init+0x524>
#if defined(SUPPORT_9342)
    case 0x9342:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | INVERT_GS | REV_SCREEN;
 8001f32:	4b69      	ldr	r3, [pc, #420]	; (80020d8 <tft_init+0x5cc>)
 8001f34:	f241 5213 	movw	r2, #5395	; 0x1513
 8001f38:	801a      	strh	r2, [r3, #0]
            (0xC7), 1, 0xA4,
            (0xB8), 1, 0x0B,
            (0xE0), 15, 0x0F, 0x24, 0x21, 0x0C, 0x0F, 0x06, 0x50, 0x75, 0x3F, 0x07, 0x12, 0x05, 0x11, 0x0B, 0x08,
            (0xE1), 15, 0x08, 0x1D, 0x20, 0x02, 0x0E, 0x04, 0x31, 0x24, 0x42, 0x03, 0x0B, 0x09, 0x30, 0x36, 0x0F,
        };
        table8_ads = ILI9342_regValues_CPT24, table_size = sizeof(ILI9342_regValues_CPT24);   //
 8001f3a:	4b70      	ldr	r3, [pc, #448]	; (80020fc <tft_init+0x5f0>)
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	2338      	movs	r3, #56	; 0x38
 8001f40:	837b      	strh	r3, [r7, #26]
        //        table8_ads = ILI9342_regValues_Tianma23, table_size = sizeof(ILI9342_regValues_Tianma23);   //
        //        table8_ads = ILI9342_regValues_HSD23, table_size = sizeof(ILI9342_regValues_HSD23);   //
        p16 = (int16_t *) & height;
 8001f42:	4b69      	ldr	r3, [pc, #420]	; (80020e8 <tft_init+0x5dc>)
 8001f44:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	22f0      	movs	r2, #240	; 0xf0
 8001f4a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001f4c:	4b67      	ldr	r3, [pc, #412]	; (80020ec <tft_init+0x5e0>)
 8001f4e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f56:	801a      	strh	r2, [r3, #0]
        break;
 8001f58:	e06a      	b.n	8002030 <tft_init+0x524>
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <tft_init+0x5cc>)
 8001f5c:	f240 4213 	movw	r2, #1043	; 0x413
 8001f60:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8001f62:	e003      	b.n	8001f6c <tft_init+0x460>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8001f64:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <tft_init+0x5cc>)
 8001f66:	f240 4207 	movw	r2, #1031	; 0x407
 8001f6a:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8001f70:	4b63      	ldr	r3, [pc, #396]	; (8002100 <tft_init+0x5f4>)
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	2345      	movs	r3, #69	; 0x45
 8001f76:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8001f78:	4b5b      	ldr	r3, [pc, #364]	; (80020e8 <tft_init+0x5dc>)
 8001f7a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f82:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001f84:	4b59      	ldr	r3, [pc, #356]	; (80020ec <tft_init+0x5e0>)
 8001f86:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f8e:	801a      	strh	r2, [r3, #0]
        break;
 8001f90:	e04e      	b.n	8002030 <tft_init+0x524>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001f92:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <tft_init+0x5cc>)
 8001f94:	f240 4203 	movw	r2, #1027	; 0x403
 8001f98:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <tft_init+0x5f8>)
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	233b      	movs	r3, #59	; 0x3b
 8001fa0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <tft_init+0x5dc>)
 8001fa4:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fac:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001fae:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <tft_init+0x5e0>)
 8001fb0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fb8:	801a      	strh	r2, [r3, #0]
        break;
 8001fba:	e039      	b.n	8002030 <tft_init+0x524>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8001fbc:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <tft_init+0x5cc>)
 8001fbe:	f240 4203 	movw	r2, #1027	; 0x403
 8001fc2:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8001fc4:	e003      	b.n	8001fce <tft_init+0x4c2>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001fc6:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <tft_init+0x5cc>)
 8001fc8:	f240 4213 	movw	r2, #1043	; 0x413
 8001fcc:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8001fd2:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <tft_init+0x5fc>)
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	232b      	movs	r3, #43	; 0x2b
 8001fd8:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001fda:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <tft_init+0x5dc>)
 8001fdc:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fe4:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <tft_init+0x5e0>)
 8001fe8:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ff0:	801a      	strh	r2, [r3, #0]
        break;
 8001ff2:	e01d      	b.n	8002030 <tft_init+0x524>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8001ff4:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <tft_init+0x5cc>)
 8001ff6:	f241 0208 	movw	r2, #4104	; 0x1008
 8001ffa:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8001ffc:	21b0      	movs	r1, #176	; 0xb0
 8001ffe:	4843      	ldr	r0, [pc, #268]	; (800210c <tft_init+0x600>)
 8002000:	f7ff fb22 	bl	8001648 <init_table16>
        break;
 8002004:	e014      	b.n	8002030 <tft_init+0x524>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <tft_init+0x5cc>)
 8002008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800200c:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 800200e:	21c0      	movs	r1, #192	; 0xc0
 8002010:	483f      	ldr	r0, [pc, #252]	; (8002110 <tft_init+0x604>)
 8002012:	f7ff fb19 	bl	8001648 <init_table16>
        p16 = (int16_t *) & height;
 8002016:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <tft_init+0x5dc>)
 8002018:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002020:	801a      	strh	r2, [r3, #0]
        break;
 8002022:	e005      	b.n	8002030 <tft_init+0x524>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <tft_init+0x5e0>)
 8002026:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
        break;
 800202e:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8002030:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <tft_init+0x5cc>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b33      	ldr	r3, [pc, #204]	; (8002114 <tft_init+0x608>)
 8002046:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00d      	beq.n	800206a <tft_init+0x55e>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800204e:	2109      	movs	r1, #9
 8002050:	4831      	ldr	r0, [pc, #196]	; (8002118 <tft_init+0x60c>)
 8002052:	f7ff faa1 	bl	8001598 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8002056:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800205a:	4619      	mov	r1, r3
 800205c:	69f8      	ldr	r0, [r7, #28]
 800205e:	f7ff fa9b 	bl	8001598 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8002062:	2106      	movs	r1, #6
 8002064:	482d      	ldr	r0, [pc, #180]	; (800211c <tft_init+0x610>)
 8002066:	f7ff fa97 	bl	8001598 <init_table>
    }
    setRotation(0);             //PORTRAIT
 800206a:	2000      	movs	r0, #0
 800206c:	f000 ff06 	bl	8002e7c <setRotation>
    invertDisplay(false);
 8002070:	2000      	movs	r0, #0
 8002072:	f001 fcdf 	bl	8003a34 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <tft_init+0x614>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	f249 4288 	movw	r2, #38024	; 0x9488
 800207e:	4293      	cmp	r3, r2
 8002080:	d125      	bne.n	80020ce <tft_init+0x5c2>
		is555 = 0;
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <tft_init+0x618>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8002088:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800208c:	2100      	movs	r1, #0
 800208e:	2000      	movs	r0, #0
 8002090:	f001 f976 	bl	8003380 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8002094:	2100      	movs	r1, #0
 8002096:	2000      	movs	r0, #0
 8002098:	f7fe fdfd 	bl	8000c96 <readPixel>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	f64f 731f 	movw	r3, #65311	; 0xff1f
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d112      	bne.n	80020ce <tft_init+0x5c2>
			uint8_t pixfmt = 0x06;
 80020a8:	2306      	movs	r3, #6
 80020aa:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 80020ac:	f107 030f 	add.w	r3, r7, #15
 80020b0:	2201      	movs	r2, #1
 80020b2:	4619      	mov	r1, r3
 80020b4:	203a      	movs	r0, #58	; 0x3a
 80020b6:	f7fe fe18 	bl	8000cea <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <tft_init+0x5cc>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	f023 0310 	bic.w	r3, r3, #16
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <tft_init+0x5cc>)
 80020c6:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <tft_init+0x618>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200000c8 	.word	0x200000c8
 80020dc:	08007680 	.word	0x08007680
 80020e0:	08007758 	.word	0x08007758
 80020e4:	08007824 	.word	0x08007824
 80020e8:	08000b51 	.word	0x08000b51
 80020ec:	08000b39 	.word	0x08000b39
 80020f0:	08007844 	.word	0x08007844
 80020f4:	0800784c 	.word	0x0800784c
 80020f8:	08007850 	.word	0x08007850
 80020fc:	080078b8 	.word	0x080078b8
 8002100:	080078f0 	.word	0x080078f0
 8002104:	08007938 	.word	0x08007938
 8002108:	08007974 	.word	0x08007974
 800210c:	080079a0 	.word	0x080079a0
 8002110:	08007a50 	.word	0x08007a50
 8002114:	200000cc 	.word	0x200000cc
 8002118:	08007b10 	.word	0x08007b10
 800211c:	08007b1c 	.word	0x08007b1c
 8002120:	200000d6 	.word	0x200000d6
 8002124:	20000038 	.word	0x20000038

08002128 <readID>:




uint16_t readID(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 800212e:	2100      	movs	r1, #0
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff fbdd 	bl	80018f0 <readReg>
 8002136:	4603      	mov	r3, r0
 8002138:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	f245 4208 	movw	r2, #21512	; 0x5408
 8002140:	4293      	cmp	r3, r2
 8002142:	d102      	bne.n	800214a <readID+0x22>
        return 0x5408;
 8002144:	f245 4308 	movw	r3, #21512	; 0x5408
 8002148:	e128      	b.n	800239c <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	f245 4220 	movw	r2, #21536	; 0x5420
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <readID+0x32>
        return 0x5420;
 8002154:	f245 4320 	movw	r3, #21536	; 0x5420
 8002158:	e120      	b.n	800239c <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 800215a:	89fb      	ldrh	r3, [r7, #14]
 800215c:	f648 1289 	movw	r2, #35209	; 0x8989
 8002160:	4293      	cmp	r3, r2
 8002162:	d102      	bne.n	800216a <readID+0x42>
        return 0x1289;
 8002164:	f241 2389 	movw	r3, #4745	; 0x1289
 8002168:	e118      	b.n	800239c <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 800216a:	2100      	movs	r1, #0
 800216c:	2067      	movs	r0, #103	; 0x67
 800216e:	f7ff fbbf 	bl	80018f0 <readReg>
 8002172:	4603      	mov	r3, r0
 8002174:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8002176:	89fb      	ldrh	r3, [r7, #14]
 8002178:	f244 7247 	movw	r2, #18247	; 0x4747
 800217c:	4293      	cmp	r3, r2
 800217e:	d102      	bne.n	8002186 <readID+0x5e>
        return 0x8347;
 8002180:	f248 3347 	movw	r3, #33607	; 0x8347
 8002184:	e10a      	b.n	800239c <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8002186:	20a1      	movs	r0, #161	; 0xa1
 8002188:	f7ff fc7e 	bl	8001a88 <readReg32>
 800218c:	4603      	mov	r3, r0
 800218e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8002190:	89fb      	ldrh	r3, [r7, #14]
 8002192:	f246 1201 	movw	r2, #24833	; 0x6101
 8002196:	4293      	cmp	r3, r2
 8002198:	d102      	bne.n	80021a0 <readID+0x78>
        return 0x1963;
 800219a:	f641 1363 	movw	r3, #6499	; 0x1963
 800219e:	e0fd      	b.n	800239c <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d102      	bne.n	80021b0 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 80021aa:	f241 5326 	movw	r3, #5414	; 0x1526
 80021ae:	e0f5      	b.n	800239c <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 80021b0:	20bf      	movs	r0, #191	; 0xbf
 80021b2:	f7ff fc84 	bl	8001abe <readReg40>
 80021b6:	4603      	mov	r3, r0
 80021b8:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	f248 3257 	movw	r2, #33623	; 0x8357
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d102      	bne.n	80021ca <readID+0xa2>
        return 0x8357;
 80021c4:	f248 3357 	movw	r3, #33623	; 0x8357
 80021c8:	e0e8      	b.n	800239c <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	f249 4281 	movw	r2, #38017	; 0x9481
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d102      	bne.n	80021da <readID+0xb2>
        return 0x9481;
 80021d4:	f249 4381 	movw	r3, #38017	; 0x9481
 80021d8:	e0e0      	b.n	800239c <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 80021da:	89fb      	ldrh	r3, [r7, #14]
 80021dc:	f241 5211 	movw	r2, #5393	; 0x1511
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d102      	bne.n	80021ea <readID+0xc2>
        return 0x1511;
 80021e4:	f241 5311 	movw	r3, #5393	; 0x1511
 80021e8:	e0d8      	b.n	800239c <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 80021ea:	89fb      	ldrh	r3, [r7, #14]
 80021ec:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80021f0:	d102      	bne.n	80021f8 <readID+0xd0>
        return 0x1520;
 80021f2:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 80021f6:	e0d1      	b.n	800239c <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	f241 5226 	movw	r2, #5414	; 0x1526
 80021fe:	4293      	cmp	r3, r2
 8002200:	d102      	bne.n	8002208 <readID+0xe0>
        return 0x1526;
 8002202:	f241 5326 	movw	r3, #5414	; 0x1526
 8002206:	e0c9      	b.n	800239c <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	f241 5281 	movw	r2, #5505	; 0x1581
 800220e:	4293      	cmp	r3, r2
 8002210:	d102      	bne.n	8002218 <readID+0xf0>
        return 0x1581;
 8002212:	f241 5381 	movw	r3, #5505	; 0x1581
 8002216:	e0c1      	b.n	800239c <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800221e:	d102      	bne.n	8002226 <readID+0xfe>
        return 0x6814;
 8002220:	f646 0314 	movw	r3, #26644	; 0x6814
 8002224:	e0ba      	b.n	800239c <readID+0x274>
    ret = readReg32(0xD4);
 8002226:	20d4      	movs	r0, #212	; 0xd4
 8002228:	f7ff fc2e 	bl	8001a88 <readReg32>
 800222c:	4603      	mov	r3, r0
 800222e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8002230:	89fb      	ldrh	r3, [r7, #14]
 8002232:	f245 3210 	movw	r2, #21264	; 0x5310
 8002236:	4293      	cmp	r3, r2
 8002238:	d102      	bne.n	8002240 <readID+0x118>
        return 0x5310;
 800223a:	f245 3310 	movw	r3, #21264	; 0x5310
 800223e:	e0ad      	b.n	800239c <readID+0x274>
    ret = readReg32(0xD7);
 8002240:	20d7      	movs	r0, #215	; 0xd7
 8002242:	f7ff fc21 	bl	8001a88 <readReg32>
 8002246:	4603      	mov	r3, r0
 8002248:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 800224a:	89fb      	ldrh	r3, [r7, #14]
 800224c:	f248 0231 	movw	r2, #32817	; 0x8031
 8002250:	4293      	cmp	r3, r2
 8002252:	d102      	bne.n	800225a <readID+0x132>
        return 0x8031;
 8002254:	f248 0331 	movw	r3, #32817	; 0x8031
 8002258:	e0a0      	b.n	800239c <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 800225a:	20ef      	movs	r0, #239	; 0xef
 800225c:	f7ff fc2f 	bl	8001abe <readReg40>
 8002260:	4603      	mov	r3, r0
 8002262:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	f249 3227 	movw	r2, #37671	; 0x9327
 800226a:	4293      	cmp	r3, r2
 800226c:	d102      	bne.n	8002274 <readID+0x14c>
        return 0x9327;
 800226e:	f249 3327 	movw	r3, #37671	; 0x9327
 8002272:	e093      	b.n	800239c <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8002274:	20fe      	movs	r0, #254	; 0xfe
 8002276:	f7ff fc07 	bl	8001a88 <readReg32>
 800227a:	4603      	mov	r3, r0
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8002280:	89fb      	ldrh	r3, [r7, #14]
 8002282:	f242 0253 	movw	r2, #8275	; 0x2053
 8002286:	4293      	cmp	r3, r2
 8002288:	d102      	bne.n	8002290 <readID+0x168>
        return 0x2053;
 800228a:	f242 0353 	movw	r3, #8275	; 0x2053
 800228e:	e085      	b.n	800239c <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8002290:	2004      	movs	r0, #4
 8002292:	f7ff fbf9 	bl	8001a88 <readReg32>
 8002296:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	0c1b      	lsrs	r3, r3, #16
 800229c:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d122      	bne.n	80022ee <readID+0x1c6>
 80022a8:	89fb      	ldrh	r3, [r7, #14]
 80022aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ae:	d11e      	bne.n	80022ee <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 80022b0:	4a3c      	ldr	r2, [pc, #240]	; (80023a4 <readID+0x27c>)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	4611      	mov	r1, r2
 80022b8:	8019      	strh	r1, [r3, #0]
 80022ba:	3302      	adds	r3, #2
 80022bc:	0c12      	lsrs	r2, r2, #16
 80022be:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2203      	movs	r2, #3
 80022c4:	4619      	mov	r1, r3
 80022c6:	20b9      	movs	r0, #185	; 0xb9
 80022c8:	f7fe fd0f 	bl	8000cea <pushCommand>
        msb = readReg(0xD0,0);
 80022cc:	2100      	movs	r1, #0
 80022ce:	20d0      	movs	r0, #208	; 0xd0
 80022d0:	f7ff fb0e 	bl	80018f0 <readReg>
 80022d4:	4603      	mov	r3, r0
 80022d6:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b99      	cmp	r3, #153	; 0x99
 80022dc:	d101      	bne.n	80022e2 <readID+0x1ba>
 80022de:	2399      	movs	r3, #153	; 0x99
 80022e0:	e05c      	b.n	800239c <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	2b90      	cmp	r3, #144	; 0x90
 80022e6:	d102      	bne.n	80022ee <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 80022e8:	f249 0390 	movw	r3, #37008	; 0x9090
 80022ec:	e056      	b.n	800239c <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 80022ee:	89fb      	ldrh	r3, [r7, #14]
 80022f0:	f241 5226 	movw	r2, #5414	; 0x1526
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d102      	bne.n	80022fe <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 80022f8:	f241 5326 	movw	r3, #5414	; 0x1526
 80022fc:	e04e      	b.n	800239c <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8002304:	4293      	cmp	r3, r2
 8002306:	d102      	bne.n	800230e <readID+0x1e6>
        return 0x7735;
 8002308:	f247 7335 	movw	r3, #30517	; 0x7735
 800230c:	e046      	b.n	800239c <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 800230e:	89fb      	ldrh	r3, [r7, #14]
 8002310:	f248 5252 	movw	r2, #34130	; 0x8552
 8002314:	4293      	cmp	r3, r2
 8002316:	d102      	bne.n	800231e <readID+0x1f6>
        return 0x7789;
 8002318:	f247 7389 	movw	r3, #30601	; 0x7789
 800231c:	e03e      	b.n	800239c <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 800231e:	89fb      	ldrh	r3, [r7, #14]
 8002320:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002324:	4293      	cmp	r3, r2
 8002326:	d102      	bne.n	800232e <readID+0x206>
        return 0xAC11;
 8002328:	f64a 4311 	movw	r3, #44049	; 0xac11
 800232c:	e036      	b.n	800239c <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 800232e:	20d3      	movs	r0, #211	; 0xd3
 8002330:	f7ff fbaa 	bl	8001a88 <readReg32>
 8002334:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 800233c:	89fb      	ldrh	r3, [r7, #14]
 800233e:	f249 1263 	movw	r2, #37219	; 0x9163
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <readID+0x222>
 8002346:	89fb      	ldrh	r3, [r7, #14]
 8002348:	e028      	b.n	800239c <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 800234a:	20d3      	movs	r0, #211	; 0xd3
 800234c:	f7ff fb9c 	bl	8001a88 <readReg32>
 8002350:	4603      	mov	r3, r0
 8002352:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8002354:	89fb      	ldrh	r3, [r7, #14]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	b29b      	uxth	r3, r3
 800235a:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b93      	cmp	r3, #147	; 0x93
 8002360:	d00b      	beq.n	800237a <readID+0x252>
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2b94      	cmp	r3, #148	; 0x94
 8002366:	d008      	beq.n	800237a <readID+0x252>
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	2b98      	cmp	r3, #152	; 0x98
 800236c:	d005      	beq.n	800237a <readID+0x252>
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b77      	cmp	r3, #119	; 0x77
 8002372:	d002      	beq.n	800237a <readID+0x252>
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	2b16      	cmp	r3, #22
 8002378:	d101      	bne.n	800237e <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 800237a:	89fb      	ldrh	r3, [r7, #14]
 800237c:	e00e      	b.n	800239c <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	2bd3      	cmp	r3, #211	; 0xd3
 8002382:	d004      	beq.n	800238e <readID+0x266>
 8002384:	89fb      	ldrh	r3, [r7, #14]
 8002386:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <readID+0x26a>
        return ret;             //16-bit write-only bus
 800238e:	89fb      	ldrh	r3, [r7, #14]
 8002390:	e004      	b.n	800239c <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8002392:	2100      	movs	r1, #0
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff faab 	bl	80018f0 <readReg>
 800239a:	4603      	mov	r3, r0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	08006c04 	.word	0x08006c04

080023a8 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b08b      	sub	sp, #44	; 0x2c
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60ba      	str	r2, [r7, #8]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	81fb      	strh	r3, [r7, #14]
 80023b6:	460b      	mov	r3, r1
 80023b8:	81bb      	strh	r3, [r7, #12]
 80023ba:	4613      	mov	r3, r2
 80023bc:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 80023be:	4baf      	ldr	r3, [pc, #700]	; (800267c <readGRAM+0x2d4>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80023c8:	fb12 f303 	smulbb	r3, r2, r3
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80023d0:	2300      	movs	r3, #0
 80023d2:	843b      	strh	r3, [r7, #32]
 80023d4:	2300      	movs	r3, #0
 80023d6:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 80023d8:	4ba9      	ldr	r3, [pc, #676]	; (8002680 <readGRAM+0x2d8>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <readGRAM+0x48>
 80023e0:	4ba8      	ldr	r3, [pc, #672]	; (8002684 <readGRAM+0x2dc>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <readGRAM+0x48>
        _MR = 0x2E;
 80023ec:	232e      	movs	r3, #46	; 0x2e
 80023ee:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 80023f0:	4ba5      	ldr	r3, [pc, #660]	; (8002688 <readGRAM+0x2e0>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	f241 6202 	movw	r2, #5634	; 0x1602
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d101      	bne.n	8002400 <readGRAM+0x58>
 80023fc:	232e      	movs	r3, #46	; 0x2e
 80023fe:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8002400:	89fa      	ldrh	r2, [r7, #14]
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	4413      	add	r3, r2
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29b      	uxth	r3, r3
 800240c:	b21c      	sxth	r4, r3
 800240e:	89ba      	ldrh	r2, [r7, #12]
 8002410:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002412:	4413      	add	r3, r2
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29b      	uxth	r3, r3
 800241a:	b21b      	sxth	r3, r3
 800241c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002420:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002424:	4622      	mov	r2, r4
 8002426:	f001 f8a1 	bl	800356c <setAddrWindow>
    while (n > 0) {
 800242a:	f000 bcfc 	b.w	8002e26 <readGRAM+0xa7e>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 800242e:	4b95      	ldr	r3, [pc, #596]	; (8002684 <readGRAM+0x2dc>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d111      	bne.n	800245e <readGRAM+0xb6>
            WriteCmdData(_MC, x + col);
 800243a:	4b94      	ldr	r3, [pc, #592]	; (800268c <readGRAM+0x2e4>)
 800243c:	8818      	ldrh	r0, [r3, #0]
 800243e:	89fa      	ldrh	r2, [r7, #14]
 8002440:	8bfb      	ldrh	r3, [r7, #30]
 8002442:	4413      	add	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	4619      	mov	r1, r3
 8002448:	f7fe fc3d 	bl	8000cc6 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 800244c:	4b90      	ldr	r3, [pc, #576]	; (8002690 <readGRAM+0x2e8>)
 800244e:	8818      	ldrh	r0, [r3, #0]
 8002450:	89ba      	ldrh	r2, [r7, #12]
 8002452:	8c3b      	ldrh	r3, [r7, #32]
 8002454:	4413      	add	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	f7fe fc34 	bl	8000cc6 <WriteCmdData>
        }
        CS_ACTIVE;
 800245e:	2101      	movs	r1, #1
 8002460:	488c      	ldr	r0, [pc, #560]	; (8002694 <readGRAM+0x2ec>)
 8002462:	f7fe fb1b 	bl	8000a9c <PIN_LOW>
        WriteCmd(_MR);
 8002466:	2110      	movs	r1, #16
 8002468:	488b      	ldr	r0, [pc, #556]	; (8002698 <readGRAM+0x2f0>)
 800246a:	f7fe fb17 	bl	8000a9c <PIN_LOW>
 800246e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	b29b      	uxth	r3, r3
 8002474:	777b      	strb	r3, [r7, #29]
 8002476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002478:	773b      	strb	r3, [r7, #28]
 800247a:	4b87      	ldr	r3, [pc, #540]	; (8002698 <readGRAM+0x2f0>)
 800247c:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002480:	619a      	str	r2, [r3, #24]
 8002482:	4b84      	ldr	r3, [pc, #528]	; (8002694 <readGRAM+0x2ec>)
 8002484:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002488:	619a      	str	r2, [r3, #24]
 800248a:	4b84      	ldr	r3, [pc, #528]	; (800269c <readGRAM+0x2f4>)
 800248c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	7f7b      	ldrb	r3, [r7, #29]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800249a:	7f7b      	ldrb	r3, [r7, #29]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a2:	431a      	orrs	r2, r3
 80024a4:	7f7b      	ldrb	r3, [r7, #29]
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ac:	431a      	orrs	r2, r3
 80024ae:	4b7a      	ldr	r3, [pc, #488]	; (8002698 <readGRAM+0x2f0>)
 80024b0:	619a      	str	r2, [r3, #24]
 80024b2:	7f7b      	ldrb	r3, [r7, #29]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80024ba:	7f7b      	ldrb	r3, [r7, #29]
 80024bc:	105b      	asrs	r3, r3, #1
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	431a      	orrs	r2, r3
 80024c4:	7f7b      	ldrb	r3, [r7, #29]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	431a      	orrs	r2, r3
 80024ce:	7f7b      	ldrb	r3, [r7, #29]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	431a      	orrs	r2, r3
 80024d6:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <readGRAM+0x2ec>)
 80024d8:	619a      	str	r2, [r3, #24]
 80024da:	7f7b      	ldrb	r3, [r7, #29]
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	4a6f      	ldr	r2, [pc, #444]	; (800269c <readGRAM+0x2f4>)
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	6193      	str	r3, [r2, #24]
 80024e6:	2102      	movs	r1, #2
 80024e8:	486b      	ldr	r0, [pc, #428]	; (8002698 <readGRAM+0x2f0>)
 80024ea:	f7fe fad7 	bl	8000a9c <PIN_LOW>
 80024ee:	2102      	movs	r1, #2
 80024f0:	4869      	ldr	r0, [pc, #420]	; (8002698 <readGRAM+0x2f0>)
 80024f2:	f7fe fae3 	bl	8000abc <PIN_HIGH>
 80024f6:	2102      	movs	r1, #2
 80024f8:	4867      	ldr	r0, [pc, #412]	; (8002698 <readGRAM+0x2f0>)
 80024fa:	f7fe fadf 	bl	8000abc <PIN_HIGH>
 80024fe:	4b66      	ldr	r3, [pc, #408]	; (8002698 <readGRAM+0x2f0>)
 8002500:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002504:	619a      	str	r2, [r3, #24]
 8002506:	4b63      	ldr	r3, [pc, #396]	; (8002694 <readGRAM+0x2ec>)
 8002508:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800250c:	619a      	str	r2, [r3, #24]
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <readGRAM+0x2f4>)
 8002510:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002514:	619a      	str	r2, [r3, #24]
 8002516:	7f3b      	ldrb	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800251e:	7f3b      	ldrb	r3, [r7, #28]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	431a      	orrs	r2, r3
 8002528:	7f3b      	ldrb	r3, [r7, #28]
 800252a:	025b      	lsls	r3, r3, #9
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	431a      	orrs	r2, r3
 8002532:	4b59      	ldr	r3, [pc, #356]	; (8002698 <readGRAM+0x2f0>)
 8002534:	619a      	str	r2, [r3, #24]
 8002536:	7f3b      	ldrb	r3, [r7, #28]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800253e:	7f3b      	ldrb	r3, [r7, #28]
 8002540:	105b      	asrs	r3, r3, #1
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	431a      	orrs	r2, r3
 8002548:	7f3b      	ldrb	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	431a      	orrs	r2, r3
 8002552:	7f3b      	ldrb	r3, [r7, #28]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	431a      	orrs	r2, r3
 800255a:	4b4e      	ldr	r3, [pc, #312]	; (8002694 <readGRAM+0x2ec>)
 800255c:	619a      	str	r2, [r3, #24]
 800255e:	7f3b      	ldrb	r3, [r7, #28]
 8002560:	019b      	lsls	r3, r3, #6
 8002562:	4a4e      	ldr	r2, [pc, #312]	; (800269c <readGRAM+0x2f4>)
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	6193      	str	r3, [r2, #24]
 800256a:	2102      	movs	r1, #2
 800256c:	484a      	ldr	r0, [pc, #296]	; (8002698 <readGRAM+0x2f0>)
 800256e:	f7fe fa95 	bl	8000a9c <PIN_LOW>
 8002572:	2102      	movs	r1, #2
 8002574:	4848      	ldr	r0, [pc, #288]	; (8002698 <readGRAM+0x2f0>)
 8002576:	f7fe faa1 	bl	8000abc <PIN_HIGH>
 800257a:	2102      	movs	r1, #2
 800257c:	4846      	ldr	r0, [pc, #280]	; (8002698 <readGRAM+0x2f0>)
 800257e:	f7fe fa9d 	bl	8000abc <PIN_HIGH>
 8002582:	2110      	movs	r1, #16
 8002584:	4844      	ldr	r0, [pc, #272]	; (8002698 <readGRAM+0x2f0>)
 8002586:	f7fe fa99 	bl	8000abc <PIN_HIGH>
        setReadDir();
 800258a:	f7fe fbc1 	bl	8000d10 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 800258e:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <readGRAM+0x2dc>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 814e 	bne.w	8002838 <readGRAM+0x490>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <readGRAM+0x2dc>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <readGRAM+0x20c>
 80025a8:	4b37      	ldr	r3, [pc, #220]	; (8002688 <readGRAM+0x2e0>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f241 2289 	movw	r2, #4745	; 0x1289
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d175      	bne.n	80026a0 <readGRAM+0x2f8>
            READ_8(r);
 80025b4:	2101      	movs	r1, #1
 80025b6:	4838      	ldr	r0, [pc, #224]	; (8002698 <readGRAM+0x2f0>)
 80025b8:	f7fe fa80 	bl	8000abc <PIN_HIGH>
 80025bc:	2101      	movs	r1, #1
 80025be:	4836      	ldr	r0, [pc, #216]	; (8002698 <readGRAM+0x2f0>)
 80025c0:	f7fe fa6c 	bl	8000a9c <PIN_LOW>
 80025c4:	2101      	movs	r1, #1
 80025c6:	4834      	ldr	r0, [pc, #208]	; (8002698 <readGRAM+0x2f0>)
 80025c8:	f7fe fa68 	bl	8000a9c <PIN_LOW>
 80025cc:	2101      	movs	r1, #1
 80025ce:	4832      	ldr	r0, [pc, #200]	; (8002698 <readGRAM+0x2f0>)
 80025d0:	f7fe fa64 	bl	8000a9c <PIN_LOW>
 80025d4:	2101      	movs	r1, #1
 80025d6:	4830      	ldr	r0, [pc, #192]	; (8002698 <readGRAM+0x2f0>)
 80025d8:	f7fe fa60 	bl	8000a9c <PIN_LOW>
 80025dc:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <readGRAM+0x2f0>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <readGRAM+0x2f0>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	0a5b      	lsrs	r3, r3, #9
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b26      	ldr	r3, [pc, #152]	; (8002698 <readGRAM+0x2f0>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4313      	orrs	r3, r2
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <readGRAM+0x2ec>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	b2db      	uxtb	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <readGRAM+0x2ec>)
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	b2db      	uxtb	r3, r3
 800262e:	4313      	orrs	r3, r2
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <readGRAM+0x2ec>)
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	b2db      	uxtb	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <readGRAM+0x2ec>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <readGRAM+0x2f4>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	099b      	lsrs	r3, r3, #6
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	75fb      	strb	r3, [r7, #23]
 8002668:	2101      	movs	r1, #1
 800266a:	480b      	ldr	r0, [pc, #44]	; (8002698 <readGRAM+0x2f0>)
 800266c:	f7fe fa26 	bl	8000abc <PIN_HIGH>
 8002670:	2101      	movs	r1, #1
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <readGRAM+0x2f0>)
 8002674:	f7fe fa22 	bl	8000abc <PIN_HIGH>
 8002678:	e0de      	b.n	8002838 <readGRAM+0x490>
 800267a:	bf00      	nop
 800267c:	200000c6 	.word	0x200000c6
 8002680:	20000037 	.word	0x20000037
 8002684:	200000c8 	.word	0x200000c8
 8002688:	200000d6 	.word	0x200000d6
 800268c:	200000d0 	.word	0x200000d0
 8002690:	200000ce 	.word	0x200000ce
 8002694:	40020400 	.word	0x40020400
 8002698:	40020000 	.word	0x40020000
 800269c:	40020800 	.word	0x40020800
        } else {
            READ_16(dummy);
 80026a0:	2101      	movs	r1, #1
 80026a2:	489a      	ldr	r0, [pc, #616]	; (800290c <readGRAM+0x564>)
 80026a4:	f7fe fa0a 	bl	8000abc <PIN_HIGH>
 80026a8:	2101      	movs	r1, #1
 80026aa:	4898      	ldr	r0, [pc, #608]	; (800290c <readGRAM+0x564>)
 80026ac:	f7fe f9f6 	bl	8000a9c <PIN_LOW>
 80026b0:	2101      	movs	r1, #1
 80026b2:	4896      	ldr	r0, [pc, #600]	; (800290c <readGRAM+0x564>)
 80026b4:	f7fe f9f2 	bl	8000a9c <PIN_LOW>
 80026b8:	2101      	movs	r1, #1
 80026ba:	4894      	ldr	r0, [pc, #592]	; (800290c <readGRAM+0x564>)
 80026bc:	f7fe f9ee 	bl	8000a9c <PIN_LOW>
 80026c0:	2101      	movs	r1, #1
 80026c2:	4892      	ldr	r0, [pc, #584]	; (800290c <readGRAM+0x564>)
 80026c4:	f7fe f9ea 	bl	8000a9c <PIN_LOW>
 80026c8:	4b90      	ldr	r3, [pc, #576]	; (800290c <readGRAM+0x564>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b8d      	ldr	r3, [pc, #564]	; (800290c <readGRAM+0x564>)
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	0a5b      	lsrs	r3, r3, #9
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	4313      	orrs	r3, r2
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b88      	ldr	r3, [pc, #544]	; (800290c <readGRAM+0x564>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b85      	ldr	r3, [pc, #532]	; (8002910 <readGRAM+0x568>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4313      	orrs	r3, r2
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4b81      	ldr	r3, [pc, #516]	; (8002910 <readGRAM+0x568>)
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <readGRAM+0x568>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4b77      	ldr	r3, [pc, #476]	; (8002910 <readGRAM+0x568>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4313      	orrs	r3, r2
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b74      	ldr	r3, [pc, #464]	; (8002914 <readGRAM+0x56c>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	76fb      	strb	r3, [r7, #27]
 8002754:	2101      	movs	r1, #1
 8002756:	486d      	ldr	r0, [pc, #436]	; (800290c <readGRAM+0x564>)
 8002758:	f7fe f9b0 	bl	8000abc <PIN_HIGH>
 800275c:	2101      	movs	r1, #1
 800275e:	486b      	ldr	r0, [pc, #428]	; (800290c <readGRAM+0x564>)
 8002760:	f7fe f9ac 	bl	8000abc <PIN_HIGH>
 8002764:	2101      	movs	r1, #1
 8002766:	4869      	ldr	r0, [pc, #420]	; (800290c <readGRAM+0x564>)
 8002768:	f7fe f9a8 	bl	8000abc <PIN_HIGH>
 800276c:	2101      	movs	r1, #1
 800276e:	4867      	ldr	r0, [pc, #412]	; (800290c <readGRAM+0x564>)
 8002770:	f7fe f994 	bl	8000a9c <PIN_LOW>
 8002774:	2101      	movs	r1, #1
 8002776:	4865      	ldr	r0, [pc, #404]	; (800290c <readGRAM+0x564>)
 8002778:	f7fe f990 	bl	8000a9c <PIN_LOW>
 800277c:	2101      	movs	r1, #1
 800277e:	4863      	ldr	r0, [pc, #396]	; (800290c <readGRAM+0x564>)
 8002780:	f7fe f98c 	bl	8000a9c <PIN_LOW>
 8002784:	2101      	movs	r1, #1
 8002786:	4861      	ldr	r0, [pc, #388]	; (800290c <readGRAM+0x564>)
 8002788:	f7fe f988 	bl	8000a9c <PIN_LOW>
 800278c:	4b5f      	ldr	r3, [pc, #380]	; (800290c <readGRAM+0x564>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	b29b      	uxth	r3, r3
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b5c      	ldr	r3, [pc, #368]	; (800290c <readGRAM+0x564>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	0a5b      	lsrs	r3, r3, #9
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	4b57      	ldr	r3, [pc, #348]	; (800290c <readGRAM+0x564>)
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <readGRAM+0x568>)
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <readGRAM+0x568>)
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4313      	orrs	r3, r2
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <readGRAM+0x568>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b46      	ldr	r3, [pc, #280]	; (8002910 <readGRAM+0x568>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	b29b      	uxth	r3, r3
 8002802:	4313      	orrs	r3, r2
 8002804:	b29a      	uxth	r2, r3
 8002806:	4b43      	ldr	r3, [pc, #268]	; (8002914 <readGRAM+0x56c>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	b29b      	uxth	r3, r3
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	b29b      	uxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	833b      	strh	r3, [r7, #24]
 8002818:	2101      	movs	r1, #1
 800281a:	483c      	ldr	r0, [pc, #240]	; (800290c <readGRAM+0x564>)
 800281c:	f7fe f94e 	bl	8000abc <PIN_HIGH>
 8002820:	2101      	movs	r1, #1
 8002822:	483a      	ldr	r0, [pc, #232]	; (800290c <readGRAM+0x564>)
 8002824:	f7fe f94a 	bl	8000abc <PIN_HIGH>
 8002828:	7efb      	ldrb	r3, [r7, #27]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	b21a      	sxth	r2, r3
 800282e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	b21b      	sxth	r3, r3
 8002836:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8002838:	4b37      	ldr	r3, [pc, #220]	; (8002918 <readGRAM+0x570>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	f241 5211 	movw	r2, #5393	; 0x1511
 8002840:	4293      	cmp	r3, r2
 8002842:	f040 82c7 	bne.w	8002dd4 <readGRAM+0xa2c>
 8002846:	2101      	movs	r1, #1
 8002848:	4830      	ldr	r0, [pc, #192]	; (800290c <readGRAM+0x564>)
 800284a:	f7fe f937 	bl	8000abc <PIN_HIGH>
 800284e:	2101      	movs	r1, #1
 8002850:	482e      	ldr	r0, [pc, #184]	; (800290c <readGRAM+0x564>)
 8002852:	f7fe f923 	bl	8000a9c <PIN_LOW>
 8002856:	2101      	movs	r1, #1
 8002858:	482c      	ldr	r0, [pc, #176]	; (800290c <readGRAM+0x564>)
 800285a:	f7fe f91f 	bl	8000a9c <PIN_LOW>
 800285e:	2101      	movs	r1, #1
 8002860:	482a      	ldr	r0, [pc, #168]	; (800290c <readGRAM+0x564>)
 8002862:	f7fe f91b 	bl	8000a9c <PIN_LOW>
 8002866:	2101      	movs	r1, #1
 8002868:	4828      	ldr	r0, [pc, #160]	; (800290c <readGRAM+0x564>)
 800286a:	f7fe f917 	bl	8000a9c <PIN_LOW>
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <readGRAM+0x564>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b23      	ldr	r3, [pc, #140]	; (800290c <readGRAM+0x564>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	0a5b      	lsrs	r3, r3, #9
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4313      	orrs	r3, r2
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b1f      	ldr	r3, [pc, #124]	; (800290c <readGRAM+0x564>)
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	b2db      	uxtb	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <readGRAM+0x568>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4313      	orrs	r3, r2
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <readGRAM+0x568>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <readGRAM+0x568>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <readGRAM+0x568>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <readGRAM+0x56c>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	75fb      	strb	r3, [r7, #23]
 80028fa:	2101      	movs	r1, #1
 80028fc:	4803      	ldr	r0, [pc, #12]	; (800290c <readGRAM+0x564>)
 80028fe:	f7fe f8dd 	bl	8000abc <PIN_HIGH>
 8002902:	2101      	movs	r1, #1
 8002904:	4801      	ldr	r0, [pc, #4]	; (800290c <readGRAM+0x564>)
 8002906:	f7fe f8d9 	bl	8000abc <PIN_HIGH>
        while (n)
 800290a:	e263      	b.n	8002dd4 <readGRAM+0xa2c>
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	200000d6 	.word	0x200000d6
        {
            if (_lcd_capable & READ_24BITS)
 800291c:	4ba2      	ldr	r3, [pc, #648]	; (8002ba8 <readGRAM+0x800>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8147 	beq.w	8002bb8 <readGRAM+0x810>
            {
                READ_8(r);
 800292a:	2101      	movs	r1, #1
 800292c:	489f      	ldr	r0, [pc, #636]	; (8002bac <readGRAM+0x804>)
 800292e:	f7fe f8c5 	bl	8000abc <PIN_HIGH>
 8002932:	2101      	movs	r1, #1
 8002934:	489d      	ldr	r0, [pc, #628]	; (8002bac <readGRAM+0x804>)
 8002936:	f7fe f8b1 	bl	8000a9c <PIN_LOW>
 800293a:	2101      	movs	r1, #1
 800293c:	489b      	ldr	r0, [pc, #620]	; (8002bac <readGRAM+0x804>)
 800293e:	f7fe f8ad 	bl	8000a9c <PIN_LOW>
 8002942:	2101      	movs	r1, #1
 8002944:	4899      	ldr	r0, [pc, #612]	; (8002bac <readGRAM+0x804>)
 8002946:	f7fe f8a9 	bl	8000a9c <PIN_LOW>
 800294a:	2101      	movs	r1, #1
 800294c:	4897      	ldr	r0, [pc, #604]	; (8002bac <readGRAM+0x804>)
 800294e:	f7fe f8a5 	bl	8000a9c <PIN_LOW>
 8002952:	4b96      	ldr	r3, [pc, #600]	; (8002bac <readGRAM+0x804>)
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b92      	ldr	r3, [pc, #584]	; (8002bac <readGRAM+0x804>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	0a5b      	lsrs	r3, r3, #9
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b8e      	ldr	r3, [pc, #568]	; (8002bac <readGRAM+0x804>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4313      	orrs	r3, r2
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b8a      	ldr	r3, [pc, #552]	; (8002bb0 <readGRAM+0x808>)
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	b2db      	uxtb	r3, r3
 8002990:	4313      	orrs	r3, r2
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4b86      	ldr	r3, [pc, #536]	; (8002bb0 <readGRAM+0x808>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4313      	orrs	r3, r2
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b81      	ldr	r3, [pc, #516]	; (8002bb0 <readGRAM+0x808>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b7d      	ldr	r3, [pc, #500]	; (8002bb0 <readGRAM+0x808>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b79      	ldr	r3, [pc, #484]	; (8002bb4 <readGRAM+0x80c>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4313      	orrs	r3, r2
 80029dc:	75fb      	strb	r3, [r7, #23]
 80029de:	2101      	movs	r1, #1
 80029e0:	4872      	ldr	r0, [pc, #456]	; (8002bac <readGRAM+0x804>)
 80029e2:	f7fe f86b 	bl	8000abc <PIN_HIGH>
 80029e6:	2101      	movs	r1, #1
 80029e8:	4870      	ldr	r0, [pc, #448]	; (8002bac <readGRAM+0x804>)
 80029ea:	f7fe f867 	bl	8000abc <PIN_HIGH>
                READ_8(g);
 80029ee:	2101      	movs	r1, #1
 80029f0:	486e      	ldr	r0, [pc, #440]	; (8002bac <readGRAM+0x804>)
 80029f2:	f7fe f863 	bl	8000abc <PIN_HIGH>
 80029f6:	2101      	movs	r1, #1
 80029f8:	486c      	ldr	r0, [pc, #432]	; (8002bac <readGRAM+0x804>)
 80029fa:	f7fe f84f 	bl	8000a9c <PIN_LOW>
 80029fe:	2101      	movs	r1, #1
 8002a00:	486a      	ldr	r0, [pc, #424]	; (8002bac <readGRAM+0x804>)
 8002a02:	f7fe f84b 	bl	8000a9c <PIN_LOW>
 8002a06:	2101      	movs	r1, #1
 8002a08:	4868      	ldr	r0, [pc, #416]	; (8002bac <readGRAM+0x804>)
 8002a0a:	f7fe f847 	bl	8000a9c <PIN_LOW>
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4866      	ldr	r0, [pc, #408]	; (8002bac <readGRAM+0x804>)
 8002a12:	f7fe f843 	bl	8000a9c <PIN_LOW>
 8002a16:	4b65      	ldr	r3, [pc, #404]	; (8002bac <readGRAM+0x804>)
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b61      	ldr	r3, [pc, #388]	; (8002bac <readGRAM+0x804>)
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	0a5b      	lsrs	r3, r3, #9
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <readGRAM+0x804>)
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	4313      	orrs	r3, r2
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b59      	ldr	r3, [pc, #356]	; (8002bb0 <readGRAM+0x808>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4313      	orrs	r3, r2
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	4b55      	ldr	r3, [pc, #340]	; (8002bb0 <readGRAM+0x808>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <readGRAM+0x808>)
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <readGRAM+0x808>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <readGRAM+0x80c>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	757b      	strb	r3, [r7, #21]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4841      	ldr	r0, [pc, #260]	; (8002bac <readGRAM+0x804>)
 8002aa6:	f7fe f809 	bl	8000abc <PIN_HIGH>
 8002aaa:	2101      	movs	r1, #1
 8002aac:	483f      	ldr	r0, [pc, #252]	; (8002bac <readGRAM+0x804>)
 8002aae:	f7fe f805 	bl	8000abc <PIN_HIGH>
                READ_8(b);
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	483d      	ldr	r0, [pc, #244]	; (8002bac <readGRAM+0x804>)
 8002ab6:	f7fe f801 	bl	8000abc <PIN_HIGH>
 8002aba:	2101      	movs	r1, #1
 8002abc:	483b      	ldr	r0, [pc, #236]	; (8002bac <readGRAM+0x804>)
 8002abe:	f7fd ffed 	bl	8000a9c <PIN_LOW>
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4839      	ldr	r0, [pc, #228]	; (8002bac <readGRAM+0x804>)
 8002ac6:	f7fd ffe9 	bl	8000a9c <PIN_LOW>
 8002aca:	2101      	movs	r1, #1
 8002acc:	4837      	ldr	r0, [pc, #220]	; (8002bac <readGRAM+0x804>)
 8002ace:	f7fd ffe5 	bl	8000a9c <PIN_LOW>
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	4835      	ldr	r0, [pc, #212]	; (8002bac <readGRAM+0x804>)
 8002ad6:	f7fd ffe1 	bl	8000a9c <PIN_LOW>
 8002ada:	4b34      	ldr	r3, [pc, #208]	; (8002bac <readGRAM+0x804>)
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <readGRAM+0x804>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	0a5b      	lsrs	r3, r3, #9
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <readGRAM+0x804>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <readGRAM+0x808>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <readGRAM+0x808>)
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <readGRAM+0x808>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <readGRAM+0x808>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <readGRAM+0x80c>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	4313      	orrs	r3, r2
 8002b64:	753b      	strb	r3, [r7, #20]
 8002b66:	2101      	movs	r1, #1
 8002b68:	4810      	ldr	r0, [pc, #64]	; (8002bac <readGRAM+0x804>)
 8002b6a:	f7fd ffa7 	bl	8000abc <PIN_HIGH>
 8002b6e:	2101      	movs	r1, #1
 8002b70:	480e      	ldr	r0, [pc, #56]	; (8002bac <readGRAM+0x804>)
 8002b72:	f7fd ffa3 	bl	8000abc <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <readGRAM+0x800>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <readGRAM+0x7ec>
                    ret = color565(b, g, r);
 8002b82:	7dfa      	ldrb	r2, [r7, #23]
 8002b84:	7d79      	ldrb	r1, [r7, #21]
 8002b86:	7d3b      	ldrb	r3, [r7, #20]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe f85e 	bl	8000c4a <color565>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b92:	e104      	b.n	8002d9e <readGRAM+0x9f6>
                else
                    ret = color565(r, g, b);
 8002b94:	7d3a      	ldrb	r2, [r7, #20]
 8002b96:	7d79      	ldrb	r1, [r7, #21]
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe f855 	bl	8000c4a <color565>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ba4:	e0fb      	b.n	8002d9e <readGRAM+0x9f6>
 8002ba6:	bf00      	nop
 8002ba8:	200000c8 	.word	0x200000c8
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40020800 	.word	0x40020800
            } else
            {
                READ_16(ret);
 8002bb8:	2101      	movs	r1, #1
 8002bba:	48ab      	ldr	r0, [pc, #684]	; (8002e68 <readGRAM+0xac0>)
 8002bbc:	f7fd ff7e 	bl	8000abc <PIN_HIGH>
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	48a9      	ldr	r0, [pc, #676]	; (8002e68 <readGRAM+0xac0>)
 8002bc4:	f7fd ff6a 	bl	8000a9c <PIN_LOW>
 8002bc8:	2101      	movs	r1, #1
 8002bca:	48a7      	ldr	r0, [pc, #668]	; (8002e68 <readGRAM+0xac0>)
 8002bcc:	f7fd ff66 	bl	8000a9c <PIN_LOW>
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	48a5      	ldr	r0, [pc, #660]	; (8002e68 <readGRAM+0xac0>)
 8002bd4:	f7fd ff62 	bl	8000a9c <PIN_LOW>
 8002bd8:	2101      	movs	r1, #1
 8002bda:	48a3      	ldr	r0, [pc, #652]	; (8002e68 <readGRAM+0xac0>)
 8002bdc:	f7fd ff5e 	bl	8000a9c <PIN_LOW>
 8002be0:	4ba1      	ldr	r3, [pc, #644]	; (8002e68 <readGRAM+0xac0>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b9e      	ldr	r3, [pc, #632]	; (8002e68 <readGRAM+0xac0>)
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	0a5b      	lsrs	r3, r3, #9
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b99      	ldr	r3, [pc, #612]	; (8002e68 <readGRAM+0xac0>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b96      	ldr	r3, [pc, #600]	; (8002e6c <readGRAM+0xac4>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b92      	ldr	r3, [pc, #584]	; (8002e6c <readGRAM+0xac4>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	4313      	orrs	r3, r2
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4b8d      	ldr	r3, [pc, #564]	; (8002e6c <readGRAM+0xac4>)
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4313      	orrs	r3, r2
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <readGRAM+0xac4>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	4b85      	ldr	r3, [pc, #532]	; (8002e70 <readGRAM+0xac8>)
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	75bb      	strb	r3, [r7, #22]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	487e      	ldr	r0, [pc, #504]	; (8002e68 <readGRAM+0xac0>)
 8002c70:	f7fd ff24 	bl	8000abc <PIN_HIGH>
 8002c74:	2101      	movs	r1, #1
 8002c76:	487c      	ldr	r0, [pc, #496]	; (8002e68 <readGRAM+0xac0>)
 8002c78:	f7fd ff20 	bl	8000abc <PIN_HIGH>
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	487a      	ldr	r0, [pc, #488]	; (8002e68 <readGRAM+0xac0>)
 8002c80:	f7fd ff1c 	bl	8000abc <PIN_HIGH>
 8002c84:	2101      	movs	r1, #1
 8002c86:	4878      	ldr	r0, [pc, #480]	; (8002e68 <readGRAM+0xac0>)
 8002c88:	f7fd ff08 	bl	8000a9c <PIN_LOW>
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4876      	ldr	r0, [pc, #472]	; (8002e68 <readGRAM+0xac0>)
 8002c90:	f7fd ff04 	bl	8000a9c <PIN_LOW>
 8002c94:	2101      	movs	r1, #1
 8002c96:	4874      	ldr	r0, [pc, #464]	; (8002e68 <readGRAM+0xac0>)
 8002c98:	f7fd ff00 	bl	8000a9c <PIN_LOW>
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4872      	ldr	r0, [pc, #456]	; (8002e68 <readGRAM+0xac0>)
 8002ca0:	f7fd fefc 	bl	8000a9c <PIN_LOW>
 8002ca4:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <readGRAM+0xac0>)
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <readGRAM+0xac0>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	0a5b      	lsrs	r3, r3, #9
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <readGRAM+0xac0>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <readGRAM+0xac4>)
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <readGRAM+0xac4>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <readGRAM+0xac4>)
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	4b57      	ldr	r3, [pc, #348]	; (8002e6c <readGRAM+0xac4>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <readGRAM+0xac8>)
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d30:	2101      	movs	r1, #1
 8002d32:	484d      	ldr	r0, [pc, #308]	; (8002e68 <readGRAM+0xac0>)
 8002d34:	f7fd fec2 	bl	8000abc <PIN_HIGH>
 8002d38:	2101      	movs	r1, #1
 8002d3a:	484b      	ldr	r0, [pc, #300]	; (8002e68 <readGRAM+0xac0>)
 8002d3c:	f7fd febe 	bl	8000abc <PIN_HIGH>
 8002d40:	7dbb      	ldrb	r3, [r7, #22]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	b21a      	sxth	r2, r3
 8002d46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	b21b      	sxth	r3, r3
 8002d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8002d50:	4b48      	ldr	r3, [pc, #288]	; (8002e74 <readGRAM+0xacc>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <readGRAM+0x9c8>
                    ret = (ret >> 8) | (ret << 8);
 8002d5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8002d70:	4b40      	ldr	r3, [pc, #256]	; (8002e74 <readGRAM+0xacc>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d010      	beq.n	8002d9e <readGRAM+0x9f6>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8002d7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002d80:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002d84:	b21a      	sxth	r2, r3
 8002d86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d88:	0adb      	lsrs	r3, r3, #11
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	b21a      	sxth	r2, r3
 8002d92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d94:	02db      	lsls	r3, r3, #11
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8002d9e:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <readGRAM+0xad0>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <readGRAM+0xa0a>
 8002da6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fefd 	bl	8000ba8 <color555_to_565>
 8002dae:	4603      	mov	r3, r0
 8002db0:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1c9a      	adds	r2, r3, #2
 8002db6:	60ba      	str	r2, [r7, #8]
 8002db8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002dba:	801a      	strh	r2, [r3, #0]
            n--;
 8002dbc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <readGRAM+0xacc>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <readGRAM+0xa38>
        while (n)
 8002dd4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f47f ad9f 	bne.w	800291c <readGRAM+0x574>
 8002dde:	e000      	b.n	8002de2 <readGRAM+0xa3a>
                break;
 8002de0:	bf00      	nop
        }
        if (++col >= w) {
 8002de2:	8bfb      	ldrh	r3, [r7, #30]
 8002de4:	3301      	adds	r3, #1
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	83fb      	strh	r3, [r7, #30]
 8002dea:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	db0d      	blt.n	8002e12 <readGRAM+0xa6a>
            col = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8002dfa:	8c3b      	ldrh	r3, [r7, #32]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	843b      	strh	r3, [r7, #32]
 8002e02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002e06:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	db01      	blt.n	8002e12 <readGRAM+0xa6a>
                row = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8002e12:	2101      	movs	r1, #1
 8002e14:	4814      	ldr	r0, [pc, #80]	; (8002e68 <readGRAM+0xac0>)
 8002e16:	f7fd fe51 	bl	8000abc <PIN_HIGH>
        CS_IDLE;
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	4813      	ldr	r0, [pc, #76]	; (8002e6c <readGRAM+0xac4>)
 8002e1e:	f7fd fe4d 	bl	8000abc <PIN_HIGH>
        setWriteDir();
 8002e22:	f7fd ffa3 	bl	8000d6c <setWriteDir>
    while (n > 0) {
 8002e26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f73f aaff 	bgt.w	800242e <readGRAM+0x86>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <readGRAM+0xacc>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d110      	bne.n	8002e5e <readGRAM+0xab6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8002e3c:	f7fd fe7c 	bl	8000b38 <width>
 8002e40:	4603      	mov	r3, r0
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	b21c      	sxth	r4, r3
 8002e48:	f7fd fe82 	bl	8000b50 <height>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	4622      	mov	r2, r4
 8002e56:	2100      	movs	r1, #0
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f000 fb87 	bl	800356c <setAddrWindow>
    return 0;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	372c      	adds	r7, #44	; 0x2c
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd90      	pop	{r4, r7, pc}
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020800 	.word	0x40020800
 8002e74:	200000c8 	.word	0x200000c8
 8002e78:	20000038 	.word	0x20000038

08002e7c <setRotation>:

void setRotation(uint8_t r)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8002e86:	4bab      	ldr	r3, [pc, #684]	; (8003134 <setRotation+0x2b8>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4ba8      	ldr	r3, [pc, #672]	; (8003138 <setRotation+0x2bc>)
 8002e96:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8002e98:	4ba7      	ldr	r3, [pc, #668]	; (8003138 <setRotation+0x2bc>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <setRotation+0x2e>
 8002ea4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ea8:	e000      	b.n	8002eac <setRotation+0x30>
 8002eaa:	22f0      	movs	r2, #240	; 0xf0
 8002eac:	4ba3      	ldr	r3, [pc, #652]	; (800313c <setRotation+0x2c0>)
 8002eae:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8002eb0:	4ba1      	ldr	r3, [pc, #644]	; (8003138 <setRotation+0x2bc>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <setRotation+0x44>
 8002ebc:	22f0      	movs	r2, #240	; 0xf0
 8002ebe:	e001      	b.n	8002ec4 <setRotation+0x48>
 8002ec0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ec4:	4b9e      	ldr	r3, [pc, #632]	; (8003140 <setRotation+0x2c4>)
 8002ec6:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8002ec8:	4b9b      	ldr	r3, [pc, #620]	; (8003138 <setRotation+0x2bc>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d817      	bhi.n	8002f00 <setRotation+0x84>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <setRotation+0x5c>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002eef 	.word	0x08002eef
 8002ee0:	08002ef5 	.word	0x08002ef5
 8002ee4:	08002efb 	.word	0x08002efb
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8002ee8:	2348      	movs	r3, #72	; 0x48
 8002eea:	72fb      	strb	r3, [r7, #11]
       break;
 8002eec:	e008      	b.n	8002f00 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8002eee:	2328      	movs	r3, #40	; 0x28
 8002ef0:	72fb      	strb	r3, [r7, #11]
       break;
 8002ef2:	e005      	b.n	8002f00 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8002ef4:	2398      	movs	r3, #152	; 0x98
 8002ef6:	72fb      	strb	r3, [r7, #11]
       break;
 8002ef8:	e002      	b.n	8002f00 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8002efa:	23f8      	movs	r3, #248	; 0xf8
 8002efc:	72fb      	strb	r3, [r7, #11]
       break;
 8002efe:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8002f00:	4b90      	ldr	r3, [pc, #576]	; (8003144 <setRotation+0x2c8>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <setRotation+0x9c>
       val ^= 0x80;
 8002f0c:	7afb      	ldrb	r3, [r7, #11]
 8002f0e:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002f12:	43db      	mvns	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8002f18:	4b8a      	ldr	r3, [pc, #552]	; (8003144 <setRotation+0x2c8>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <setRotation+0xb2>
       val ^= 0x40;
 8002f24:	7afb      	ldrb	r3, [r7, #11]
 8002f26:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8002f2e:	4b85      	ldr	r3, [pc, #532]	; (8003144 <setRotation+0x2c8>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <setRotation+0xc8>
       val ^= 0x08;
 8002f3a:	7afb      	ldrb	r3, [r7, #11]
 8002f3c:	f083 0308 	eor.w	r3, r3, #8
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002f44:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <setRotation+0x2c8>)
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8119 	beq.w	8003184 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8002f52:	4b7d      	ldr	r3, [pc, #500]	; (8003148 <setRotation+0x2cc>)
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	f646 0214 	movw	r2, #26644	; 0x6814
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d128      	bne.n	8002fb0 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	105b      	asrs	r3, r3, #1
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	105b      	asrs	r3, r3, #1
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8002f7a:	7afb      	ldrb	r3, [r7, #11]
 8002f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8002f88:	8a3b      	ldrh	r3, [r7, #16]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	89fb      	ldrh	r3, [r7, #14]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	4313      	orrs	r3, r2
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8002f9c:	233b      	movs	r3, #59	; 0x3b
 8002f9e:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2103      	movs	r1, #3
 8002fa8:	20b6      	movs	r0, #182	; 0xb6
 8002faa:	f7fe f92b 	bl	8001204 <WriteCmdParamN>
           goto common_MC;
 8002fae:	e0a4      	b.n	80030fa <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8002fb0:	4b65      	ldr	r3, [pc, #404]	; (8003148 <setRotation+0x2cc>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	f641 1263 	movw	r2, #6499	; 0x1963
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <setRotation+0x158>
 8002fbc:	4b62      	ldr	r3, [pc, #392]	; (8003148 <setRotation+0x2cc>)
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	f249 4281 	movw	r2, #38017	; 0x9481
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d005      	beq.n	8002fd4 <setRotation+0x158>
 8002fc8:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <setRotation+0x2cc>)
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	f241 5211 	movw	r2, #5393	; 0x1511
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d139      	bne.n	8003048 <setRotation+0x1cc>
           if (val & 0x80)
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	b25b      	sxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da04      	bge.n	8002fe6 <setRotation+0x16a>
               val |= 0x01;    //GS
 8002fdc:	7afb      	ldrb	r3, [r7, #11]
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <setRotation+0x17e>
               val |= 0x02;    //SS
 8002ff0:	7afb      	ldrb	r3, [r7, #11]
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8002ffa:	4b53      	ldr	r3, [pc, #332]	; (8003148 <setRotation+0x2cc>)
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	f641 1263 	movw	r2, #6499	; 0x1963
 8003002:	4293      	cmp	r3, r2
 8003004:	d104      	bne.n	8003010 <setRotation+0x194>
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800300c:	b2db      	uxtb	r3, r3
 800300e:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8003010:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <setRotation+0x2cc>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	f249 4281 	movw	r2, #38017	; 0x9481
 8003018:	4293      	cmp	r3, r2
 800301a:	d104      	bne.n	8003026 <setRotation+0x1aa>
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8003022:	b2db      	uxtb	r3, r3
 8003024:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8003026:	4b48      	ldr	r3, [pc, #288]	; (8003148 <setRotation+0x2cc>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	f241 5211 	movw	r2, #5393	; 0x1511
 800302e:	4293      	cmp	r3, r2
 8003030:	d160      	bne.n	80030f4 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8003032:	7afb      	ldrb	r3, [r7, #11]
 8003034:	f023 0310 	bic.w	r3, r3, #16
 8003038:	b2db      	uxtb	r3, r3
 800303a:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 800303c:	7afb      	ldrb	r3, [r7, #11]
 800303e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003042:	b2db      	uxtb	r3, r3
 8003044:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8003046:	e055      	b.n	80030f4 <setRotation+0x278>
      }
       else if (is8347) {
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <setRotation+0x2d0>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d053      	beq.n	80030f8 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <setRotation+0x2d4>)
 8003052:	2202      	movs	r2, #2
 8003054:	801a      	strh	r2, [r3, #0]
 8003056:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <setRotation+0x2d8>)
 8003058:	2206      	movs	r2, #6
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	4b3e      	ldr	r3, [pc, #248]	; (8003158 <setRotation+0x2dc>)
 800305e:	2222      	movs	r2, #34	; 0x22
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	4b3e      	ldr	r3, [pc, #248]	; (800315c <setRotation+0x2e0>)
 8003064:	2202      	movs	r2, #2
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <setRotation+0x2e4>)
 800306a:	2204      	movs	r2, #4
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <setRotation+0x2e8>)
 8003070:	2206      	movs	r2, #6
 8003072:	801a      	strh	r2, [r3, #0]
 8003074:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <setRotation+0x2ec>)
 8003076:	2208      	movs	r2, #8
 8003078:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 800307a:	4b33      	ldr	r3, [pc, #204]	; (8003148 <setRotation+0x2cc>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	2b65      	cmp	r3, #101	; 0x65
 8003080:	d121      	bne.n	80030c6 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8003082:	7afb      	ldrb	r3, [r7, #11]
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 800308c:	7afb      	ldrb	r3, [r7, #11]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <setRotation+0x226>
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 800309c:	43db      	mvns	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <setRotation+0x23e>
 80030ac:	4b28      	ldr	r3, [pc, #160]	; (8003150 <setRotation+0x2d4>)
 80030ae:	2282      	movs	r2, #130	; 0x82
 80030b0:	801a      	strh	r2, [r3, #0]
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <setRotation+0x2d8>)
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	e005      	b.n	80030c6 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 80030ba:	4b25      	ldr	r3, [pc, #148]	; (8003150 <setRotation+0x2d4>)
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <setRotation+0x2d8>)
 80030c2:	2282      	movs	r2, #130	; 0x82
 80030c4:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <setRotation+0x2cc>)
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	f245 2252 	movw	r2, #21074	; 0x5252
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d129      	bne.n	8003126 <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 80030dc:	7afb      	ldrb	r3, [r7, #11]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01f      	beq.n	8003126 <setRotation+0x2aa>
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 80030ec:	43db      	mvns	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 80030f2:	e018      	b.n	8003126 <setRotation+0x2aa>
           goto common_MC;
 80030f4:	bf00      	nop
 80030f6:	e000      	b.n	80030fa <setRotation+0x27e>
       }
     common_MC:
 80030f8:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <setRotation+0x2d4>)
 80030fc:	222a      	movs	r2, #42	; 0x2a
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <setRotation+0x2d8>)
 8003102:	222b      	movs	r2, #43	; 0x2b
 8003104:	801a      	strh	r2, [r3, #0]
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <setRotation+0x2dc>)
 8003108:	222c      	movs	r2, #44	; 0x2c
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <setRotation+0x2e0>)
 800310e:	222a      	movs	r2, #42	; 0x2a
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <setRotation+0x2e4>)
 8003114:	222a      	movs	r2, #42	; 0x2a
 8003116:	801a      	strh	r2, [r3, #0]
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <setRotation+0x2e8>)
 800311a:	222b      	movs	r2, #43	; 0x2b
 800311c:	801a      	strh	r2, [r3, #0]
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <setRotation+0x2ec>)
 8003120:	222b      	movs	r2, #43	; 0x2b
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	e000      	b.n	8003128 <setRotation+0x2ac>
			goto common_BGR;
 8003126:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <setRotation+0x2d0>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01d      	beq.n	800316c <setRotation+0x2f0>
 8003130:	2316      	movs	r3, #22
 8003132:	e01c      	b.n	800316e <setRotation+0x2f2>
 8003134:	200000cc 	.word	0x200000cc
 8003138:	2000003c 	.word	0x2000003c
 800313c:	20000004 	.word	0x20000004
 8003140:	20000006 	.word	0x20000006
 8003144:	200000c8 	.word	0x200000c8
 8003148:	200000d6 	.word	0x200000d6
 800314c:	20000037 	.word	0x20000037
 8003150:	200000d0 	.word	0x200000d0
 8003154:	200000ce 	.word	0x200000ce
 8003158:	200000c6 	.word	0x200000c6
 800315c:	200000d2 	.word	0x200000d2
 8003160:	200000da 	.word	0x200000da
 8003164:	200000ca 	.word	0x200000ca
 8003168:	200000d4 	.word	0x200000d4
 800316c:	2336      	movs	r3, #54	; 0x36
 800316e:	f107 020b 	add.w	r2, r7, #11
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe f845 	bl	8001204 <WriteCmdParamN>
       _lcd_madctl = val;
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	b29a      	uxth	r2, r3
 800317e:	4b75      	ldr	r3, [pc, #468]	; (8003354 <setRotation+0x4d8>)
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	e0a2      	b.n	80032ca <setRotation+0x44e>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8003184:	4b74      	ldr	r3, [pc, #464]	; (8003358 <setRotation+0x4dc>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	f247 7293 	movw	r2, #30611	; 0x7793
 800318c:	4293      	cmp	r3, r2
 800318e:	d010      	beq.n	80031b2 <setRotation+0x336>
 8003190:	f247 7293 	movw	r2, #30611	; 0x7793
 8003194:	4293      	cmp	r3, r2
 8003196:	dc04      	bgt.n	80031a2 <setRotation+0x326>
 8003198:	f245 4220 	movw	r2, #21536	; 0x5420
 800319c:	4293      	cmp	r3, r2
 800319e:	d008      	beq.n	80031b2 <setRotation+0x336>
 80031a0:	e047      	b.n	8003232 <setRotation+0x3b6>
 80031a2:	f249 3226 	movw	r2, #37670	; 0x9326
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d003      	beq.n	80031b2 <setRotation+0x336>
 80031aa:	f24b 5209 	movw	r2, #46345	; 0xb509
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d13f      	bne.n	8003232 <setRotation+0x3b6>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80031b2:	4b6a      	ldr	r3, [pc, #424]	; (800335c <setRotation+0x4e0>)
 80031b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	4b69      	ldr	r3, [pc, #420]	; (8003360 <setRotation+0x4e4>)
 80031bc:	f240 2201 	movw	r2, #513	; 0x201
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	4b68      	ldr	r3, [pc, #416]	; (8003364 <setRotation+0x4e8>)
 80031c4:	f240 2202 	movw	r2, #514	; 0x202
 80031c8:	801a      	strh	r2, [r3, #0]
 80031ca:	4b67      	ldr	r3, [pc, #412]	; (8003368 <setRotation+0x4ec>)
 80031cc:	f44f 7204 	mov.w	r2, #528	; 0x210
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	4b66      	ldr	r3, [pc, #408]	; (800336c <setRotation+0x4f0>)
 80031d4:	f240 2211 	movw	r2, #529	; 0x211
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	4b65      	ldr	r3, [pc, #404]	; (8003370 <setRotation+0x4f4>)
 80031dc:	f240 2212 	movw	r2, #530	; 0x212
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	4b64      	ldr	r3, [pc, #400]	; (8003374 <setRotation+0x4f8>)
 80031e4:	f240 2213 	movw	r2, #531	; 0x213
 80031e8:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	b25b      	sxtb	r3, r3
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80031f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031f8:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 80031fa:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80031fe:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8003200:	4b55      	ldr	r3, [pc, #340]	; (8003358 <setRotation+0x4dc>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	f249 3226 	movw	r2, #37670	; 0x9326
 8003208:	4293      	cmp	r3, r2
 800320a:	d005      	beq.n	8003218 <setRotation+0x39c>
 800320c:	4b52      	ldr	r3, [pc, #328]	; (8003358 <setRotation+0x4dc>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f245 4220 	movw	r2, #21536	; 0x5420
 8003214:	4293      	cmp	r3, r2
 8003216:	d102      	bne.n	800321e <setRotation+0x3a2>
 8003218:	8abb      	ldrh	r3, [r7, #20]
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 800321e:	8a3a      	ldrh	r2, [r7, #16]
 8003220:	8abb      	ldrh	r3, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	4619      	mov	r1, r3
 8003228:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800322c:	f7fd fd4b 	bl	8000cc6 <WriteCmdData>
           goto common_SS;
 8003230:	e024      	b.n	800327c <setRotation+0x400>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8003232:	4b4a      	ldr	r3, [pc, #296]	; (800335c <setRotation+0x4e0>)
 8003234:	2220      	movs	r2, #32
 8003236:	801a      	strh	r2, [r3, #0]
 8003238:	4b49      	ldr	r3, [pc, #292]	; (8003360 <setRotation+0x4e4>)
 800323a:	2221      	movs	r2, #33	; 0x21
 800323c:	801a      	strh	r2, [r3, #0]
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <setRotation+0x4e8>)
 8003240:	2222      	movs	r2, #34	; 0x22
 8003242:	801a      	strh	r2, [r3, #0]
 8003244:	4b48      	ldr	r3, [pc, #288]	; (8003368 <setRotation+0x4ec>)
 8003246:	2250      	movs	r2, #80	; 0x50
 8003248:	801a      	strh	r2, [r3, #0]
 800324a:	4b48      	ldr	r3, [pc, #288]	; (800336c <setRotation+0x4f0>)
 800324c:	2251      	movs	r2, #81	; 0x51
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	4b47      	ldr	r3, [pc, #284]	; (8003370 <setRotation+0x4f4>)
 8003252:	2252      	movs	r2, #82	; 0x52
 8003254:	801a      	strh	r2, [r3, #0]
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <setRotation+0x4f8>)
 8003258:	2253      	movs	r2, #83	; 0x53
 800325a:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	b25b      	sxtb	r3, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003266:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800326a:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 800326c:	8a3b      	ldrh	r3, [r7, #16]
 800326e:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8003272:	b29b      	uxth	r3, r3
 8003274:	4619      	mov	r1, r3
 8003276:	2060      	movs	r0, #96	; 0x60
 8003278:	f7fd fd25 	bl	8000cc6 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 800327c:	7afb      	ldrb	r3, [r7, #11]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	b29b      	uxth	r3, r3
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8003288:	89fb      	ldrh	r3, [r7, #14]
 800328a:	4619      	mov	r1, r3
 800328c:	2001      	movs	r0, #1
 800328e:	f7fd fd1a 	bl	8000cc6 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8003292:	7afb      	ldrb	r3, [r7, #11]
 8003294:	109b      	asrs	r3, r3, #2
 8003296:	b29b      	uxth	r3, r3
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 800329e:	7afb      	ldrb	r3, [r7, #11]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <setRotation+0x434>
               ORG |= 0x1000;  //BGR
 80032a8:	8afb      	ldrh	r3, [r7, #22]
 80032aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032ae:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 80032b0:	8afb      	ldrh	r3, [r7, #22]
 80032b2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b26      	ldr	r3, [pc, #152]	; (8003354 <setRotation+0x4d8>)
 80032ba:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <setRotation+0x4d8>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	2003      	movs	r0, #3
 80032c4:	f7fd fcff 	bl	8000cc6 <WriteCmdData>
           break;
 80032c8:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 80032ca:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <setRotation+0x4fc>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d023      	beq.n	800331e <setRotation+0x4a2>
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <setRotation+0x500>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11d      	bne.n	800331e <setRotation+0x4a2>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 80032e2:	4b1e      	ldr	r3, [pc, #120]	; (800335c <setRotation+0x4e0>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	81bb      	strh	r3, [r7, #12]
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <setRotation+0x4e4>)
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <setRotation+0x4e0>)
 80032ee:	801a      	strh	r2, [r3, #0]
 80032f0:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <setRotation+0x4e4>)
 80032f2:	89bb      	ldrh	r3, [r7, #12]
 80032f4:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <setRotation+0x4ec>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	81bb      	strh	r3, [r7, #12]
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <setRotation+0x4f4>)
 80032fe:	881a      	ldrh	r2, [r3, #0]
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <setRotation+0x4ec>)
 8003302:	801a      	strh	r2, [r3, #0]
 8003304:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <setRotation+0x4f4>)
 8003306:	89bb      	ldrh	r3, [r7, #12]
 8003308:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 800330a:	4b18      	ldr	r3, [pc, #96]	; (800336c <setRotation+0x4f0>)
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	81bb      	strh	r3, [r7, #12]
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <setRotation+0x4f8>)
 8003312:	881a      	ldrh	r2, [r3, #0]
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <setRotation+0x4f0>)
 8003316:	801a      	strh	r2, [r3, #0]
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <setRotation+0x4f8>)
 800331a:	89bb      	ldrh	r3, [r7, #12]
 800331c:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 800331e:	f7fd fc0b 	bl	8000b38 <width>
 8003322:	4603      	mov	r3, r0
 8003324:	3b01      	subs	r3, #1
 8003326:	b29b      	uxth	r3, r3
 8003328:	b21c      	sxth	r4, r3
 800332a:	f7fd fc11 	bl	8000b50 <height>
 800332e:	4603      	mov	r3, r0
 8003330:	3b01      	subs	r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	b21b      	sxth	r3, r3
 8003336:	4622      	mov	r2, r4
 8003338:	2100      	movs	r1, #0
 800333a:	2000      	movs	r0, #0
 800333c:	f000 f916 	bl	800356c <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8003340:	2200      	movs	r2, #0
 8003342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003346:	2000      	movs	r0, #0
 8003348:	f000 fa34 	bl	80037b4 <vertScroll>
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	200000dc 	.word	0x200000dc
 8003358:	200000d6 	.word	0x200000d6
 800335c:	200000d0 	.word	0x200000d0
 8003360:	200000ce 	.word	0x200000ce
 8003364:	200000c6 	.word	0x200000c6
 8003368:	200000d2 	.word	0x200000d2
 800336c:	200000da 	.word	0x200000da
 8003370:	200000ca 	.word	0x200000ca
 8003374:	200000d4 	.word	0x200000d4
 8003378:	2000003c 	.word	0x2000003c
 800337c:	200000c8 	.word	0x200000c8

08003380 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
 800338a:	460b      	mov	r3, r1
 800338c:	80bb      	strh	r3, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8003392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f2c0 80d7 	blt.w	800354a <drawPixel+0x1ca>
 800339c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f2c0 80d2 	blt.w	800354a <drawPixel+0x1ca>
 80033a6:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80033aa:	f7fd fbc5 	bl	8000b38 <width>
 80033ae:	4603      	mov	r3, r0
 80033b0:	429c      	cmp	r4, r3
 80033b2:	f280 80ca 	bge.w	800354a <drawPixel+0x1ca>
 80033b6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80033ba:	f7fd fbc9 	bl	8000b50 <height>
 80033be:	4603      	mov	r3, r0
 80033c0:	429c      	cmp	r4, r3
 80033c2:	f280 80c2 	bge.w	800354a <drawPixel+0x1ca>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 80033c6:	4b63      	ldr	r3, [pc, #396]	; (8003554 <drawPixel+0x1d4>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <drawPixel+0x5a>
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd fbc9 	bl	8000b68 <color565_to_555>
 80033d6:	4603      	mov	r3, r0
 80033d8:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 80033da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80033e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80033ea:	f000 f8bf 	bl	800356c <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 80033ee:	4b5a      	ldr	r3, [pc, #360]	; (8003558 <drawPixel+0x1d8>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80a1 	beq.w	800353a <drawPixel+0x1ba>
 80033f8:	2101      	movs	r1, #1
 80033fa:	4858      	ldr	r0, [pc, #352]	; (800355c <drawPixel+0x1dc>)
 80033fc:	f7fd fb4e 	bl	8000a9c <PIN_LOW>
 8003400:	2110      	movs	r1, #16
 8003402:	4857      	ldr	r0, [pc, #348]	; (8003560 <drawPixel+0x1e0>)
 8003404:	f7fd fb4a 	bl	8000a9c <PIN_LOW>
 8003408:	4b56      	ldr	r3, [pc, #344]	; (8003564 <drawPixel+0x1e4>)
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	b29b      	uxth	r3, r3
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	4b54      	ldr	r3, [pc, #336]	; (8003564 <drawPixel+0x1e4>)
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	73bb      	strb	r3, [r7, #14]
 8003418:	4b51      	ldr	r3, [pc, #324]	; (8003560 <drawPixel+0x1e0>)
 800341a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800341e:	619a      	str	r2, [r3, #24]
 8003420:	4b4e      	ldr	r3, [pc, #312]	; (800355c <drawPixel+0x1dc>)
 8003422:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003426:	619a      	str	r2, [r3, #24]
 8003428:	4b4f      	ldr	r3, [pc, #316]	; (8003568 <drawPixel+0x1e8>)
 800342a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800342e:	619a      	str	r2, [r3, #24]
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	431a      	orrs	r2, r3
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	025b      	lsls	r3, r3, #9
 8003446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344a:	431a      	orrs	r2, r3
 800344c:	4b44      	ldr	r3, [pc, #272]	; (8003560 <drawPixel+0x1e0>)
 800344e:	619a      	str	r2, [r3, #24]
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	105b      	asrs	r3, r3, #1
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	431a      	orrs	r2, r3
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	431a      	orrs	r2, r3
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	431a      	orrs	r2, r3
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <drawPixel+0x1dc>)
 8003476:	619a      	str	r2, [r3, #24]
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	019b      	lsls	r3, r3, #6
 800347c:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <drawPixel+0x1e8>)
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	6193      	str	r3, [r2, #24]
 8003484:	2102      	movs	r1, #2
 8003486:	4836      	ldr	r0, [pc, #216]	; (8003560 <drawPixel+0x1e0>)
 8003488:	f7fd fb08 	bl	8000a9c <PIN_LOW>
 800348c:	2102      	movs	r1, #2
 800348e:	4834      	ldr	r0, [pc, #208]	; (8003560 <drawPixel+0x1e0>)
 8003490:	f7fd fb14 	bl	8000abc <PIN_HIGH>
 8003494:	2102      	movs	r1, #2
 8003496:	4832      	ldr	r0, [pc, #200]	; (8003560 <drawPixel+0x1e0>)
 8003498:	f7fd fb10 	bl	8000abc <PIN_HIGH>
 800349c:	4b30      	ldr	r3, [pc, #192]	; (8003560 <drawPixel+0x1e0>)
 800349e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80034a2:	619a      	str	r2, [r3, #24]
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <drawPixel+0x1dc>)
 80034a6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80034aa:	619a      	str	r2, [r3, #24]
 80034ac:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <drawPixel+0x1e8>)
 80034ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034b2:	619a      	str	r2, [r3, #24]
 80034b4:	7bbb      	ldrb	r3, [r7, #14]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	431a      	orrs	r2, r3
 80034c6:	7bbb      	ldrb	r3, [r7, #14]
 80034c8:	025b      	lsls	r3, r3, #9
 80034ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ce:	431a      	orrs	r2, r3
 80034d0:	4b23      	ldr	r3, [pc, #140]	; (8003560 <drawPixel+0x1e0>)
 80034d2:	619a      	str	r2, [r3, #24]
 80034d4:	7bbb      	ldrb	r3, [r7, #14]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80034dc:	7bbb      	ldrb	r3, [r7, #14]
 80034de:	105b      	asrs	r3, r3, #1
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	431a      	orrs	r2, r3
 80034e6:	7bbb      	ldrb	r3, [r7, #14]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	431a      	orrs	r2, r3
 80034f0:	7bbb      	ldrb	r3, [r7, #14]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	431a      	orrs	r2, r3
 80034f8:	4b18      	ldr	r3, [pc, #96]	; (800355c <drawPixel+0x1dc>)
 80034fa:	619a      	str	r2, [r3, #24]
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	019b      	lsls	r3, r3, #6
 8003500:	4a19      	ldr	r2, [pc, #100]	; (8003568 <drawPixel+0x1e8>)
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	6193      	str	r3, [r2, #24]
 8003508:	2102      	movs	r1, #2
 800350a:	4815      	ldr	r0, [pc, #84]	; (8003560 <drawPixel+0x1e0>)
 800350c:	f7fd fac6 	bl	8000a9c <PIN_LOW>
 8003510:	2102      	movs	r1, #2
 8003512:	4813      	ldr	r0, [pc, #76]	; (8003560 <drawPixel+0x1e0>)
 8003514:	f7fd fad2 	bl	8000abc <PIN_HIGH>
 8003518:	2102      	movs	r1, #2
 800351a:	4811      	ldr	r0, [pc, #68]	; (8003560 <drawPixel+0x1e0>)
 800351c:	f7fd face 	bl	8000abc <PIN_HIGH>
 8003520:	2110      	movs	r1, #16
 8003522:	480f      	ldr	r0, [pc, #60]	; (8003560 <drawPixel+0x1e0>)
 8003524:	f7fd faca 	bl	8000abc <PIN_HIGH>
 8003528:	887b      	ldrh	r3, [r7, #2]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fc4c 	bl	8000dc8 <write24>
 8003530:	2101      	movs	r1, #1
 8003532:	480a      	ldr	r0, [pc, #40]	; (800355c <drawPixel+0x1dc>)
 8003534:	f7fd fac2 	bl	8000abc <PIN_HIGH>
 8003538:	e008      	b.n	800354c <drawPixel+0x1cc>
   WriteCmdData(_MW, color);
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <drawPixel+0x1e4>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd fbbf 	bl	8000cc6 <WriteCmdData>
 8003548:	e000      	b.n	800354c <drawPixel+0x1cc>
       return;
 800354a:	bf00      	nop
}
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bd90      	pop	{r4, r7, pc}
 8003552:	bf00      	nop
 8003554:	20000038 	.word	0x20000038
 8003558:	20000039 	.word	0x20000039
 800355c:	40020400 	.word	0x40020400
 8003560:	40020000 	.word	0x40020000
 8003564:	200000c6 	.word	0x200000c6
 8003568:	40020800 	.word	0x40020800

0800356c <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b087      	sub	sp, #28
 8003570:	af02      	add	r7, sp, #8
 8003572:	4604      	mov	r4, r0
 8003574:	4608      	mov	r0, r1
 8003576:	4611      	mov	r1, r2
 8003578:	461a      	mov	r2, r3
 800357a:	4623      	mov	r3, r4
 800357c:	80fb      	strh	r3, [r7, #6]
 800357e:	4603      	mov	r3, r0
 8003580:	80bb      	strh	r3, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	807b      	strh	r3, [r7, #2]
 8003586:	4613      	mov	r3, r2
 8003588:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800358a:	4b80      	ldr	r3, [pc, #512]	; (800378c <setAddrWindow+0x220>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	f249 3227 	movw	r2, #37671	; 0x9327
 8003592:	4293      	cmp	r3, r2
 8003594:	d117      	bne.n	80035c6 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8003596:	4b7e      	ldr	r3, [pc, #504]	; (8003790 <setAddrWindow+0x224>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d107      	bne.n	80035ae <setAddrWindow+0x42>
 800359e:	88bb      	ldrh	r3, [r7, #4]
 80035a0:	3320      	adds	r3, #32
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	80bb      	strh	r3, [r7, #4]
 80035a6:	883b      	ldrh	r3, [r7, #0]
 80035a8:	3320      	adds	r3, #32
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 80035ae:	4b78      	ldr	r3, [pc, #480]	; (8003790 <setAddrWindow+0x224>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d107      	bne.n	80035c6 <setAddrWindow+0x5a>
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	3320      	adds	r3, #32
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	80fb      	strh	r3, [r7, #6]
 80035be:	887b      	ldrh	r3, [r7, #2]
 80035c0:	3320      	adds	r3, #32
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80035c6:	4b71      	ldr	r3, [pc, #452]	; (800378c <setAddrWindow+0x220>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	f241 5226 	movw	r2, #5414	; 0x1526
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d128      	bne.n	8003624 <setAddrWindow+0xb8>
 80035d2:	4b6f      	ldr	r3, [pc, #444]	; (8003790 <setAddrWindow+0x224>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d022      	beq.n	8003624 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	81fb      	strh	r3, [r7, #14]
 80035e8:	883a      	ldrh	r2, [r7, #0]
 80035ea:	88bb      	ldrh	r3, [r7, #4]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 80035f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <setAddrWindow+0x9c>
 80035fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3301      	adds	r3, #1
 8003602:	b29b      	uxth	r3, r3
 8003604:	803b      	strh	r3, [r7, #0]
 8003606:	e00d      	b.n	8003624 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003608:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <setAddrWindow+0xb8>
 8003610:	887a      	ldrh	r2, [r7, #2]
 8003612:	89bb      	ldrh	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	807b      	strh	r3, [r7, #2]
 800361a:	883a      	ldrh	r2, [r7, #0]
 800361c:	89bb      	ldrh	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	b29b      	uxth	r3, r3
 8003622:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003624:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <setAddrWindow+0x228>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d054      	beq.n	80036da <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <setAddrWindow+0x22c>)
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b2d8      	uxtb	r0, r3
 8003636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800363a:	121b      	asrs	r3, r3, #8
 800363c:	b21b      	sxth	r3, r3
 800363e:	b2d9      	uxtb	r1, r3
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003648:	121b      	asrs	r3, r3, #8
 800364a:	b21b      	sxth	r3, r3
 800364c:	b2dc      	uxtb	r4, r3
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	4623      	mov	r3, r4
 8003656:	f7fd ff7b 	bl	8001550 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 800365a:	4b50      	ldr	r3, [pc, #320]	; (800379c <setAddrWindow+0x230>)
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	b2d8      	uxtb	r0, r3
 8003660:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003664:	121b      	asrs	r3, r3, #8
 8003666:	b21b      	sxth	r3, r3
 8003668:	b2d9      	uxtb	r1, r3
 800366a:	88bb      	ldrh	r3, [r7, #4]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003672:	121b      	asrs	r3, r3, #8
 8003674:	b21b      	sxth	r3, r3
 8003676:	b2dc      	uxtb	r4, r3
 8003678:	883b      	ldrh	r3, [r7, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	4623      	mov	r3, r4
 8003680:	f7fd ff66 	bl	8001550 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8003684:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <setAddrWindow+0x234>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d07b      	beq.n	8003784 <setAddrWindow+0x218>
 800368c:	4b3f      	ldr	r3, [pc, #252]	; (800378c <setAddrWindow+0x220>)
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	2b65      	cmp	r3, #101	; 0x65
 8003692:	d177      	bne.n	8003784 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8003694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003698:	121b      	asrs	r3, r3, #8
 800369a:	b21b      	sxth	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	723b      	strb	r3, [r7, #8]
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 80036a6:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <setAddrWindow+0x238>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	f107 0208 	add.w	r2, r7, #8
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fd fda7 	bl	8001204 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 80036b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036ba:	121b      	asrs	r3, r3, #8
 80036bc:	b21b      	sxth	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	723b      	strb	r3, [r7, #8]
 80036c2:	88bb      	ldrh	r3, [r7, #4]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 80036c8:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <setAddrWindow+0x23c>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	f107 0208 	add.w	r2, r7, #8
 80036d0:	2102      	movs	r1, #2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fd96 	bl	8001204 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 80036d8:	e054      	b.n	8003784 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 80036da:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <setAddrWindow+0x238>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd faef 	bl	8000cc6 <WriteCmdData>
       WriteCmdData(_MP, y);
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <setAddrWindow+0x23c>)
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	88ba      	ldrh	r2, [r7, #4]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fae8 	bl	8000cc6 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 80036f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d105      	bne.n	800370e <setAddrWindow+0x1a2>
 8003702:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003706:	f9b7 3000 	ldrsh.w	r3, [r7]
 800370a:	429a      	cmp	r2, r3
 800370c:	d03a      	beq.n	8003784 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <setAddrWindow+0x228>)
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d018      	beq.n	800374c <setAddrWindow+0x1e0>
               if (rotation & 1)
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <setAddrWindow+0x224>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8003726:	f9b7 3000 	ldrsh.w	r3, [r7]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	b21a      	sxth	r2, r3
 800372e:	88bb      	ldrh	r3, [r7, #4]
 8003730:	4313      	orrs	r3, r2
 8003732:	80bb      	strh	r3, [r7, #4]
 8003734:	88bb      	ldrh	r3, [r7, #4]
 8003736:	803b      	strh	r3, [r7, #0]
 8003738:	e008      	b.n	800374c <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 800373a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	b21a      	sxth	r2, r3
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	4313      	orrs	r3, r2
 8003746:	80fb      	strh	r3, [r7, #6]
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 800374c:	4b12      	ldr	r3, [pc, #72]	; (8003798 <setAddrWindow+0x22c>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fab6 	bl	8000cc6 <WriteCmdData>
           WriteCmdData(_SP, y);
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <setAddrWindow+0x230>)
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	88ba      	ldrh	r2, [r7, #4]
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd faaf 	bl	8000cc6 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <setAddrWindow+0x240>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	887a      	ldrh	r2, [r7, #2]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7fd faa8 	bl	8000cc6 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <setAddrWindow+0x244>)
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	883a      	ldrh	r2, [r7, #0]
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd faa1 	bl	8000cc6 <WriteCmdData>
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bd90      	pop	{r4, r7, pc}
 800378c:	200000d6 	.word	0x200000d6
 8003790:	2000003c 	.word	0x2000003c
 8003794:	200000c8 	.word	0x200000c8
 8003798:	200000d2 	.word	0x200000d2
 800379c:	200000ca 	.word	0x200000ca
 80037a0:	20000037 	.word	0x20000037
 80037a4:	200000d0 	.word	0x200000d0
 80037a8:	200000ce 	.word	0x200000ce
 80037ac:	200000da 	.word	0x200000da
 80037b0:	200000d4 	.word	0x200000d4

080037b4 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
 80037be:	460b      	mov	r3, r1
 80037c0:	80bb      	strh	r3, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80037c6:	4b89      	ldr	r3, [pc, #548]	; (80039ec <vertScroll+0x238>)
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	f249 3227 	movw	r2, #37671	; 0x9327
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10b      	bne.n	80037ea <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 80037d2:	4b87      	ldr	r3, [pc, #540]	; (80039f0 <vertScroll+0x23c>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <vertScroll+0x2e>
 80037da:	4b85      	ldr	r3, [pc, #532]	; (80039f0 <vertScroll+0x23c>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d103      	bne.n	80037ea <vertScroll+0x36>
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	3320      	adds	r3, #32
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	425b      	negs	r3, r3
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	88bb      	ldrh	r3, [r7, #4]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003802:	4b7a      	ldr	r3, [pc, #488]	; (80039ec <vertScroll+0x238>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	f249 3227 	movw	r2, #37671	; 0x9327
 800380a:	4293      	cmp	r3, r2
 800380c:	d103      	bne.n	8003816 <vertScroll+0x62>
 800380e:	8afb      	ldrh	r3, [r7, #22]
 8003810:	3320      	adds	r3, #32
 8003812:	b29b      	uxth	r3, r3
 8003814:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8003816:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800381a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800381e:	425b      	negs	r3, r3
 8003820:	429a      	cmp	r2, r3
 8003822:	dd05      	ble.n	8003830 <vertScroll+0x7c>
 8003824:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003828:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	db01      	blt.n	8003834 <vertScroll+0x80>
 8003830:	2300      	movs	r3, #0
 8003832:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	887b      	ldrh	r3, [r7, #2]
 8003838:	4413      	add	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 800383e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da04      	bge.n	8003850 <vertScroll+0x9c>
        vsp += scrollines;          //keep in unsigned range
 8003846:	8aba      	ldrh	r2, [r7, #20]
 8003848:	88bb      	ldrh	r3, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	b29b      	uxth	r3, r3
 800384e:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	88bb      	ldrh	r3, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29b      	uxth	r3, r3
 800385c:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 800385e:	4b65      	ldr	r3, [pc, #404]	; (80039f4 <vertScroll+0x240>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d072      	beq.n	8003950 <vertScroll+0x19c>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 800386a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800386e:	121b      	asrs	r3, r3, #8
 8003870:	b21b      	sxth	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 800387c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003880:	121b      	asrs	r3, r3, #8
 8003882:	b21b      	sxth	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8003888:	88bb      	ldrh	r3, [r7, #4]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 800388e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003892:	121b      	asrs	r3, r3, #8
 8003894:	b21b      	sxth	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 800389a:	8afb      	ldrh	r3, [r7, #22]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80038a0:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <vertScroll+0x244>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <vertScroll+0xf8>
 80038a8:	230e      	movs	r3, #14
 80038aa:	e000      	b.n	80038ae <vertScroll+0xfa>
 80038ac:	2333      	movs	r3, #51	; 0x33
 80038ae:	f107 020c 	add.w	r2, r7, #12
 80038b2:	2106      	movs	r1, #6
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd fca5 	bl	8001204 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80038ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038be:	121b      	asrs	r3, r3, #8
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 80038c6:	8abb      	ldrh	r3, [r7, #20]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80038cc:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <vertScroll+0x244>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <vertScroll+0x124>
 80038d4:	2314      	movs	r3, #20
 80038d6:	e000      	b.n	80038da <vertScroll+0x126>
 80038d8:	2337      	movs	r3, #55	; 0x37
 80038da:	f107 020c 	add.w	r2, r7, #12
 80038de:	2102      	movs	r1, #2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fc8f 	bl	8001204 <WriteCmdParamN>
		if (is8347) {
 80038e6:	4b44      	ldr	r3, [pc, #272]	; (80039f8 <vertScroll+0x244>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01f      	beq.n	800392e <vertScroll+0x17a>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 80038ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <vertScroll+0x156>
 80038f6:	4b3d      	ldr	r3, [pc, #244]	; (80039ec <vertScroll+0x238>)
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	f248 3247 	movw	r2, #33607	; 0x8347
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <vertScroll+0x152>
 8003902:	2302      	movs	r3, #2
 8003904:	e002      	b.n	800390c <vertScroll+0x158>
 8003906:	2308      	movs	r3, #8
 8003908:	e000      	b.n	800390c <vertScroll+0x158>
 800390a:	2300      	movs	r3, #0
 800390c:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <vertScroll+0x238>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	f248 3247 	movw	r2, #33607	; 0x8347
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <vertScroll+0x16a>
 800391a:	2318      	movs	r3, #24
 800391c:	e000      	b.n	8003920 <vertScroll+0x16c>
 800391e:	2301      	movs	r3, #1
 8003920:	f107 020c 	add.w	r2, r7, #12
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fc6c 	bl	8001204 <WriteCmdParamN>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
		}
		return;
 800392c:	e059      	b.n	80039e2 <vertScroll+0x22e>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 800392e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d155      	bne.n	80039e2 <vertScroll+0x22e>
 8003936:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <vertScroll+0x240>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d04f      	beq.n	80039e2 <vertScroll+0x22e>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003942:	2200      	movs	r2, #0
 8003944:	2100      	movs	r1, #0
 8003946:	2013      	movs	r0, #19
 8003948:	f7fd fc5c 	bl	8001204 <WriteCmdParamN>
		return;
 800394c:	bf00      	nop
 800394e:	e048      	b.n	80039e2 <vertScroll+0x22e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003950:	4b26      	ldr	r3, [pc, #152]	; (80039ec <vertScroll+0x238>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	f247 7293 	movw	r2, #30611	; 0x7793
 8003958:	4293      	cmp	r3, r2
 800395a:	d021      	beq.n	80039a0 <vertScroll+0x1ec>
 800395c:	f247 7293 	movw	r2, #30611	; 0x7793
 8003960:	4293      	cmp	r3, r2
 8003962:	dc08      	bgt.n	8003976 <vertScroll+0x1c2>
 8003964:	f245 4220 	movw	r2, #21536	; 0x5420
 8003968:	4293      	cmp	r3, r2
 800396a:	d019      	beq.n	80039a0 <vertScroll+0x1ec>
 800396c:	f247 7283 	movw	r2, #30595	; 0x7783
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <vertScroll+0x1d4>
 8003974:	e025      	b.n	80039c2 <vertScroll+0x20e>
 8003976:	f249 3226 	movw	r2, #37670	; 0x9326
 800397a:	4293      	cmp	r3, r2
 800397c:	d010      	beq.n	80039a0 <vertScroll+0x1ec>
 800397e:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003982:	4293      	cmp	r3, r2
 8003984:	d00c      	beq.n	80039a0 <vertScroll+0x1ec>
 8003986:	e01c      	b.n	80039c2 <vertScroll+0x20e>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8003988:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <vertScroll+0x248>)
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	4619      	mov	r1, r3
 800398e:	2061      	movs	r0, #97	; 0x61
 8003990:	f7fd f999 	bl	8000cc6 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003994:	8abb      	ldrh	r3, [r7, #20]
 8003996:	4619      	mov	r1, r3
 8003998:	206a      	movs	r0, #106	; 0x6a
 800399a:	f7fd f994 	bl	8000cc6 <WriteCmdData>
        break;
 800399e:	e021      	b.n	80039e4 <vertScroll+0x230>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <vertScroll+0x248>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	f240 4001 	movw	r0, #1025	; 0x401
 80039b0:	f7fd f989 	bl	8000cc6 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 80039b4:	8abb      	ldrh	r3, [r7, #20]
 80039b6:	4619      	mov	r1, r3
 80039b8:	f240 4004 	movw	r0, #1028	; 0x404
 80039bc:	f7fd f983 	bl	8000cc6 <WriteCmdData>
        break;
 80039c0:	e010      	b.n	80039e4 <vertScroll+0x230>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <vertScroll+0x248>)
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	2061      	movs	r0, #97	; 0x61
 80039d0:	f7fd f979 	bl	8000cc6 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80039d4:	8abb      	ldrh	r3, [r7, #20]
 80039d6:	4619      	mov	r1, r3
 80039d8:	206a      	movs	r0, #106	; 0x6a
 80039da:	f7fd f974 	bl	8000cc6 <WriteCmdData>
        break;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <vertScroll+0x230>
		return;
 80039e2:	bf00      	nop
    }
}
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200000d6 	.word	0x200000d6
 80039f0:	2000003c 	.word	0x2000003c
 80039f4:	200000c8 	.word	0x200000c8
 80039f8:	20000037 	.word	0x20000037
 80039fc:	200000cc 	.word	0x200000cc

08003a00 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	4603      	mov	r3, r0
 8003a08:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <fillScreen+0x2c>)
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b21a      	sxth	r2, r3
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <fillScreen+0x30>)
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b219      	sxth	r1, r3
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f000 fbe0 	bl	80041e4 <fillRect>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000004 	.word	0x20000004
 8003a30:	20000006 	.word	0x20000006

08003a34 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8003a3e:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <invertDisplay+0x124>)
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	b21b      	sxth	r3, r3
 8003a56:	4053      	eors	r3, r2
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <invertDisplay+0x128>)
 8003a5e:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003a60:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <invertDisplay+0x124>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d035      	beq.n	8003ad8 <invertDisplay+0xa4>
        if (is8347) {
 8003a6c:	4b3c      	ldr	r3, [pc, #240]	; (8003b60 <invertDisplay+0x12c>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d024      	beq.n	8003abe <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8003a74:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <invertDisplay+0x130>)
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	f248 3247 	movw	r2, #33607	; 0x8347
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d005      	beq.n	8003a8c <invertDisplay+0x58>
 8003a80:	4b38      	ldr	r3, [pc, #224]	; (8003b64 <invertDisplay+0x130>)
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	f245 2252 	movw	r2, #21074	; 0x5252
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8003a8c:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <invertDisplay+0x128>)
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <invertDisplay+0x64>
 8003a94:	2306      	movs	r3, #6
 8003a96:	e000      	b.n	8003a9a <invertDisplay+0x66>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e007      	b.n	8003aae <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <invertDisplay+0x128>)
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <invertDisplay+0x76>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	e000      	b.n	8003aac <invertDisplay+0x78>
 8003aaa:	230a      	movs	r3, #10
 8003aac:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8003aae:	f107 030f 	add.w	r3, r7, #15
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f7fd fba4 	bl	8001204 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8003abc:	e049      	b.n	8003b52 <invertDisplay+0x11e>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8003abe:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <invertDisplay+0x128>)
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <invertDisplay+0x96>
 8003ac6:	2321      	movs	r3, #33	; 0x21
 8003ac8:	e000      	b.n	8003acc <invertDisplay+0x98>
 8003aca:	2320      	movs	r3, #32
 8003acc:	2200      	movs	r2, #0
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fd fb97 	bl	8001204 <WriteCmdParamN>
 8003ad6:	e03c      	b.n	8003b52 <invertDisplay+0x11e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003ad8:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <invertDisplay+0x130>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	f247 7293 	movw	r2, #30611	; 0x7793
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d024      	beq.n	8003b2e <invertDisplay+0xfa>
 8003ae4:	f247 7293 	movw	r2, #30611	; 0x7793
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	dc07      	bgt.n	8003afc <invertDisplay+0xc8>
 8003aec:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003af0:	d010      	beq.n	8003b14 <invertDisplay+0xe0>
 8003af2:	f245 4220 	movw	r2, #21536	; 0x5420
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d019      	beq.n	8003b2e <invertDisplay+0xfa>
 8003afa:	e023      	b.n	8003b44 <invertDisplay+0x110>
 8003afc:	f249 3226 	movw	r2, #37670	; 0x9326
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d014      	beq.n	8003b2e <invertDisplay+0xfa>
 8003b04:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d010      	beq.n	8003b2e <invertDisplay+0xfa>
 8003b0c:	f249 2225 	movw	r2, #37413	; 0x9225
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d117      	bne.n	8003b44 <invertDisplay+0x110>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <invertDisplay+0x128>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	b21b      	sxth	r3, r3
 8003b1c:	f043 0313 	orr.w	r3, r3, #19
 8003b20:	b21b      	sxth	r3, r3
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	4619      	mov	r1, r3
 8003b26:	2007      	movs	r0, #7
 8003b28:	f7fd f8cd 	bl	8000cc6 <WriteCmdData>
        break;
 8003b2c:	e011      	b.n	8003b52 <invertDisplay+0x11e>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <invertDisplay+0x128>)
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	f043 0302 	orr.w	r3, r3, #2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f240 4001 	movw	r0, #1025	; 0x401
 8003b3e:	f7fd f8c2 	bl	8000cc6 <WriteCmdData>
        break;
 8003b42:	e006      	b.n	8003b52 <invertDisplay+0x11e>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <invertDisplay+0x128>)
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	2061      	movs	r0, #97	; 0x61
 8003b4c:	f7fd f8bb 	bl	8000cc6 <WriteCmdData>
        break;
 8003b50:	bf00      	nop
    }
}
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	200000c8 	.word	0x200000c8
 8003b5c:	200000cc 	.word	0x200000cc
 8003b60:	20000037 	.word	0x20000037
 8003b64:	200000d6 	.word	0x200000d6

08003b68 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	4604      	mov	r4, r0
 8003b70:	4608      	mov	r0, r1
 8003b72:	4611      	mov	r1, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4623      	mov	r3, r4
 8003b78:	80fb      	strh	r3, [r7, #6]
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	80bb      	strh	r3, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	807b      	strh	r3, [r7, #2]
 8003b82:	4613      	mov	r3, r2
 8003b84:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 8003b86:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003b8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003b8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003b92:	883b      	ldrh	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	4613      	mov	r3, r2
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f000 fb23 	bl	80041e4 <fillRect>
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd90      	pop	{r4, r7, pc}

08003ba6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003ba6:	b590      	push	{r4, r7, lr}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	4604      	mov	r4, r0
 8003bae:	4608      	mov	r0, r1
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	80fb      	strh	r3, [r7, #6]
 8003bb8:	4603      	mov	r3, r0
 8003bba:	80bb      	strh	r3, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8003bc4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003bc8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003bcc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003bd0:	883b      	ldrh	r3, [r7, #0]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f000 fb05 	bl	80041e4 <fillRect>
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd90      	pop	{r4, r7, pc}

08003be2 <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4603      	mov	r3, r0
 8003bea:	80fb      	strh	r3, [r7, #6]
 8003bec:	460b      	mov	r3, r1
 8003bee:	80bb      	strh	r3, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fbbe 	bl	8003380 <drawPixel>
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4604      	mov	r4, r0
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	80fb      	strh	r3, [r7, #6]
 8003c1e:	4603      	mov	r3, r0
 8003c20:	80bb      	strh	r3, [r7, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	807b      	strh	r3, [r7, #2]
 8003c26:	4613      	mov	r3, r2
 8003c28:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003c2a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003c2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003c38:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003c3c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c44:	1acb      	subs	r3, r1, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bfb8      	it	lt
 8003c4a:	425b      	neglt	r3, r3
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	bfcc      	ite	gt
 8003c50:	2301      	movgt	r3, #1
 8003c52:	2300      	movle	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8003c58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	833b      	strh	r3, [r7, #24]
 8003c64:	88bb      	ldrh	r3, [r7, #4]
 8003c66:	80fb      	strh	r3, [r7, #6]
 8003c68:	8b3b      	ldrh	r3, [r7, #24]
 8003c6a:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8003c6c:	887b      	ldrh	r3, [r7, #2]
 8003c6e:	82fb      	strh	r3, [r7, #22]
 8003c70:	883b      	ldrh	r3, [r7, #0]
 8003c72:	807b      	strh	r3, [r7, #2]
 8003c74:	8afb      	ldrh	r3, [r7, #22]
 8003c76:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8003c78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	dd0b      	ble.n	8003c9c <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	82bb      	strh	r3, [r7, #20]
 8003c88:	887b      	ldrh	r3, [r7, #2]
 8003c8a:	80fb      	strh	r3, [r7, #6]
 8003c8c:	8abb      	ldrh	r3, [r7, #20]
 8003c8e:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8003c90:	88bb      	ldrh	r3, [r7, #4]
 8003c92:	827b      	strh	r3, [r7, #18]
 8003c94:	883b      	ldrh	r3, [r7, #0]
 8003c96:	80bb      	strh	r3, [r7, #4]
 8003c98:	8a7b      	ldrh	r3, [r7, #18]
 8003c9a:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003c9c:	887a      	ldrh	r2, [r7, #2]
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8003ca6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003caa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bfb8      	it	lt
 8003cb4:	425b      	neglt	r3, r3
 8003cb6:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8003cb8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003cbc:	0fda      	lsrs	r2, r3, #31
 8003cbe:	4413      	add	r3, r2
 8003cc0:	105b      	asrs	r3, r3, #1
 8003cc2:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8003cc4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003cc8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	da02      	bge.n	8003cd6 <writeLine+0xca>
        ystep = 1;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	83bb      	strh	r3, [r7, #28]
 8003cd4:	e031      	b.n	8003d3a <writeLine+0x12e>
    } else {
        ystep = -1;
 8003cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cda:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8003cdc:	e02d      	b.n	8003d3a <writeLine+0x12e>
        if (steep) {
 8003cde:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <writeLine+0xec>
            writePixel(y0, x0, color);
 8003ce6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003ce8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003cec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff76 	bl	8003be2 <writePixel>
 8003cf6:	e007      	b.n	8003d08 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8003cf8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003cfa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ff6d 	bl	8003be2 <writePixel>
        }
        err -= dy;
 8003d08:	8bfa      	ldrh	r2, [r7, #30]
 8003d0a:	89fb      	ldrh	r3, [r7, #14]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8003d12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	da09      	bge.n	8003d2e <writeLine+0x122>
            y0 += ystep;
 8003d1a:	88ba      	ldrh	r2, [r7, #4]
 8003d1c:	8bbb      	ldrh	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8003d24:	8bfa      	ldrh	r2, [r7, #30]
 8003d26:	8a3b      	ldrh	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8003d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	80fb      	strh	r3, [r7, #6]
 8003d3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	ddcb      	ble.n	8003cde <writeLine+0xd2>
        }
    }
}
 8003d46:	bf00      	nop
 8003d48:	3724      	adds	r7, #36	; 0x24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd90      	pop	{r4, r7, pc}

08003d4e <drawLine>:


void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003d4e:	b590      	push	{r4, r7, lr}
 8003d50:	b087      	sub	sp, #28
 8003d52:	af02      	add	r7, sp, #8
 8003d54:	4604      	mov	r4, r0
 8003d56:	4608      	mov	r0, r1
 8003d58:	4611      	mov	r1, r2
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4623      	mov	r3, r4
 8003d5e:	80fb      	strh	r3, [r7, #6]
 8003d60:	4603      	mov	r3, r0
 8003d62:	80bb      	strh	r3, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 8003d6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d11a      	bne.n	8003dae <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003d78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003d7c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	dd05      	ble.n	8003d90 <drawLine+0x42>
 8003d84:	88bb      	ldrh	r3, [r7, #4]
 8003d86:	81bb      	strh	r3, [r7, #12]
 8003d88:	883b      	ldrh	r3, [r7, #0]
 8003d8a:	80bb      	strh	r3, [r7, #4]
 8003d8c:	89bb      	ldrh	r3, [r7, #12]
 8003d8e:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003d90:	883a      	ldrh	r2, [r7, #0]
 8003d92:	88bb      	ldrh	r3, [r7, #4]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	b21a      	sxth	r2, r3
 8003d9e:	8c3b      	ldrh	r3, [r7, #32]
 8003da0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003da4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003da8:	f7ff fede 	bl	8003b68 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003dac:	e02d      	b.n	8003e0a <drawLine+0xbc>
    } else if(y0 == y1){
 8003dae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003db2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d11a      	bne.n	8003df0 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003dba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003dbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	dd05      	ble.n	8003dd2 <drawLine+0x84>
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	81fb      	strh	r3, [r7, #14]
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	80fb      	strh	r3, [r7, #6]
 8003dce:	89fb      	ldrh	r3, [r7, #14]
 8003dd0:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	b21a      	sxth	r2, r3
 8003de0:	8c3b      	ldrh	r3, [r7, #32]
 8003de2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003de6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003dea:	f7ff fedc 	bl	8003ba6 <drawFastHLine>
}
 8003dee:	e00c      	b.n	8003e0a <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 8003df0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003df4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003df8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003dfc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003e00:	8c3b      	ldrh	r3, [r7, #32]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4623      	mov	r3, r4
 8003e06:	f7ff ff01 	bl	8003c0c <writeLine>
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd90      	pop	{r4, r7, pc}

08003e12 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8003e12:	b590      	push	{r4, r7, lr}
 8003e14:	b087      	sub	sp, #28
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	4604      	mov	r4, r0
 8003e1a:	4608      	mov	r0, r1
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4623      	mov	r3, r4
 8003e22:	80fb      	strh	r3, [r7, #6]
 8003e24:	4603      	mov	r3, r0
 8003e26:	80bb      	strh	r3, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	807b      	strh	r3, [r7, #2]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8003e30:	887b      	ldrh	r3, [r7, #2]
 8003e32:	f1c3 0301 	rsb	r3, r3, #1
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	461a      	mov	r2, r3
 8003e42:	03d2      	lsls	r2, r2, #15
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8003e54:	88ba      	ldrh	r2, [r7, #4]
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	4413      	add	r3, r2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b219      	sxth	r1, r3
 8003e5e:	883a      	ldrh	r2, [r7, #0]
 8003e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff febc 	bl	8003be2 <writePixel>
    writePixel(x0  , y0-r, color);
 8003e6a:	88ba      	ldrh	r2, [r7, #4]
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	b219      	sxth	r1, r3
 8003e74:	883a      	ldrh	r2, [r7, #0]
 8003e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff feb1 	bl	8003be2 <writePixel>
    writePixel(x0+r, y0  , color);
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	4413      	add	r3, r2
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	883a      	ldrh	r2, [r7, #0]
 8003e8c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fea6 	bl	8003be2 <writePixel>
    writePixel(x0-r, y0  , color);
 8003e96:	88fa      	ldrh	r2, [r7, #6]
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	b21b      	sxth	r3, r3
 8003ea0:	883a      	ldrh	r2, [r7, #0]
 8003ea2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fe9b 	bl	8003be2 <writePixel>

    while (x<y) {
 8003eac:	e091      	b.n	8003fd2 <drawCircle+0x1c0>
        if (f >= 0) {
 8003eae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	db0e      	blt.n	8003ed4 <drawCircle+0xc2>
            y--;
 8003eb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003ec2:	8a7b      	ldrh	r3, [r7, #18]
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8003eca:	8afa      	ldrh	r2, [r7, #22]
 8003ecc:	8a7b      	ldrh	r3, [r7, #18]
 8003ece:	4413      	add	r3, r2
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003ed4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3301      	adds	r3, #1
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003ee0:	8abb      	ldrh	r3, [r7, #20]
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8003ee8:	8afa      	ldrh	r2, [r7, #22]
 8003eea:	8abb      	ldrh	r3, [r7, #20]
 8003eec:	4413      	add	r3, r2
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	8a3b      	ldrh	r3, [r7, #16]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b218      	sxth	r0, r3
 8003efc:	88ba      	ldrh	r2, [r7, #4]
 8003efe:	89fb      	ldrh	r3, [r7, #14]
 8003f00:	4413      	add	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	b21b      	sxth	r3, r3
 8003f06:	883a      	ldrh	r2, [r7, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7ff fe6a 	bl	8003be2 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	8a3b      	ldrh	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	b218      	sxth	r0, r3
 8003f18:	88ba      	ldrh	r2, [r7, #4]
 8003f1a:	89fb      	ldrh	r3, [r7, #14]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	b21b      	sxth	r3, r3
 8003f22:	883a      	ldrh	r2, [r7, #0]
 8003f24:	4619      	mov	r1, r3
 8003f26:	f7ff fe5c 	bl	8003be2 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8003f2a:	88fa      	ldrh	r2, [r7, #6]
 8003f2c:	8a3b      	ldrh	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	b218      	sxth	r0, r3
 8003f34:	88ba      	ldrh	r2, [r7, #4]
 8003f36:	89fb      	ldrh	r3, [r7, #14]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	b21b      	sxth	r3, r3
 8003f3e:	883a      	ldrh	r2, [r7, #0]
 8003f40:	4619      	mov	r1, r3
 8003f42:	f7ff fe4e 	bl	8003be2 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	8a3b      	ldrh	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	b218      	sxth	r0, r3
 8003f50:	88ba      	ldrh	r2, [r7, #4]
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	883a      	ldrh	r2, [r7, #0]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f7ff fe40 	bl	8003be2 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	89fb      	ldrh	r3, [r7, #14]
 8003f66:	4413      	add	r3, r2
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	b218      	sxth	r0, r3
 8003f6c:	88ba      	ldrh	r2, [r7, #4]
 8003f6e:	8a3b      	ldrh	r3, [r7, #16]
 8003f70:	4413      	add	r3, r2
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	b21b      	sxth	r3, r3
 8003f76:	883a      	ldrh	r2, [r7, #0]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7ff fe32 	bl	8003be2 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8003f7e:	88fa      	ldrh	r2, [r7, #6]
 8003f80:	89fb      	ldrh	r3, [r7, #14]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	b218      	sxth	r0, r3
 8003f88:	88ba      	ldrh	r2, [r7, #4]
 8003f8a:	8a3b      	ldrh	r3, [r7, #16]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	b21b      	sxth	r3, r3
 8003f92:	883a      	ldrh	r2, [r7, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	f7ff fe24 	bl	8003be2 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	89fb      	ldrh	r3, [r7, #14]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	b218      	sxth	r0, r3
 8003fa4:	88ba      	ldrh	r2, [r7, #4]
 8003fa6:	8a3b      	ldrh	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	b21b      	sxth	r3, r3
 8003fae:	883a      	ldrh	r2, [r7, #0]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f7ff fe16 	bl	8003be2 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	89fb      	ldrh	r3, [r7, #14]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	b218      	sxth	r0, r3
 8003fc0:	88ba      	ldrh	r2, [r7, #4]
 8003fc2:	8a3b      	ldrh	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	b21b      	sxth	r3, r3
 8003fca:	883a      	ldrh	r2, [r7, #0]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	f7ff fe08 	bl	8003be2 <writePixel>
    while (x<y) {
 8003fd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	f6ff af67 	blt.w	8003eae <drawCircle+0x9c>
    }
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd90      	pop	{r4, r7, pc}

08003fe8 <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	80fb      	strh	r3, [r7, #6]
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	80bb      	strh	r3, [r7, #4]
 8003ffe:	460b      	mov	r3, r1
 8004000:	807b      	strh	r3, [r7, #2]
 8004002:	4613      	mov	r3, r2
 8004004:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8004006:	88ba      	ldrh	r2, [r7, #4]
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	b29b      	uxth	r3, r3
 800400e:	b219      	sxth	r1, r3
 8004010:	887b      	ldrh	r3, [r7, #2]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	b29b      	uxth	r3, r3
 8004016:	3301      	adds	r3, #1
 8004018:	b29b      	uxth	r3, r3
 800401a:	b21a      	sxth	r2, r3
 800401c:	883b      	ldrh	r3, [r7, #0]
 800401e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004022:	f7ff fda1 	bl	8003b68 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8004026:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800402a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800402e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004032:	883b      	ldrh	r3, [r7, #0]
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2303      	movs	r3, #3
 800403c:	f000 f804 	bl	8004048 <fillCircleHelper>
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bd90      	pop	{r4, r7, pc}

08004048 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	4604      	mov	r4, r0
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4623      	mov	r3, r4
 8004058:	80fb      	strh	r3, [r7, #6]
 800405a:	4603      	mov	r3, r0
 800405c:	80bb      	strh	r3, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	807b      	strh	r3, [r7, #2]
 8004062:	4613      	mov	r3, r2
 8004064:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	f1c3 0301 	rsb	r3, r3, #1
 800406c:	b29b      	uxth	r3, r3
 800406e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004070:	2301      	movs	r3, #1
 8004072:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	461a      	mov	r2, r3
 8004078:	03d2      	lsls	r2, r2, #15
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	b29b      	uxth	r3, r3
 8004080:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 800408a:	8a3b      	ldrh	r3, [r7, #16]
 800408c:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8004092:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004096:	b29b      	uxth	r3, r3
 8004098:	3301      	adds	r3, #1
 800409a:	b29b      	uxth	r3, r3
 800409c:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 800409e:	e096      	b.n	80041ce <fillCircleHelper+0x186>
        if (f >= 0) {
 80040a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	db0e      	blt.n	80040c6 <fillCircleHelper+0x7e>
            y--;
 80040a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80040b4:	8a7b      	ldrh	r3, [r7, #18]
 80040b6:	3302      	adds	r3, #2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80040bc:	8afa      	ldrh	r2, [r7, #22]
 80040be:	8a7b      	ldrh	r3, [r7, #18]
 80040c0:	4413      	add	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80040c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80040d2:	8abb      	ldrh	r3, [r7, #20]
 80040d4:	3302      	adds	r3, #2
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80040da:	8afa      	ldrh	r2, [r7, #22]
 80040dc:	8abb      	ldrh	r3, [r7, #20]
 80040de:	4413      	add	r3, r2
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 80040e4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80040e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040ec:	3301      	adds	r3, #1
 80040ee:	429a      	cmp	r2, r3
 80040f0:	da31      	bge.n	8004156 <fillCircleHelper+0x10e>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80040f2:	787b      	ldrb	r3, [r7, #1]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <fillCircleHelper+0xdc>
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	8a3b      	ldrh	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	b29b      	uxth	r3, r3
 8004104:	b218      	sxth	r0, r3
 8004106:	88ba      	ldrh	r2, [r7, #4]
 8004108:	89fb      	ldrh	r3, [r7, #14]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	b29b      	uxth	r3, r3
 800410e:	b219      	sxth	r1, r3
 8004110:	89fb      	ldrh	r3, [r7, #14]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004118:	4413      	add	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	b21a      	sxth	r2, r3
 800411e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004120:	f7ff fd22 	bl	8003b68 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8004124:	787b      	ldrb	r3, [r7, #1]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d013      	beq.n	8004156 <fillCircleHelper+0x10e>
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	8a3b      	ldrh	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	b29b      	uxth	r3, r3
 8004136:	b218      	sxth	r0, r3
 8004138:	88ba      	ldrh	r2, [r7, #4]
 800413a:	89fb      	ldrh	r3, [r7, #14]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	b219      	sxth	r1, r3
 8004142:	89fb      	ldrh	r3, [r7, #14]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800414a:	4413      	add	r3, r2
 800414c:	b29b      	uxth	r3, r3
 800414e:	b21a      	sxth	r2, r3
 8004150:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004152:	f7ff fd09 	bl	8003b68 <drawFastVLine>
        }
        if(y != py) {
 8004156:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800415a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800415e:	429a      	cmp	r2, r3
 8004160:	d033      	beq.n	80041ca <fillCircleHelper+0x182>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8004162:	787b      	ldrb	r3, [r7, #1]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d013      	beq.n	8004194 <fillCircleHelper+0x14c>
 800416c:	88fa      	ldrh	r2, [r7, #6]
 800416e:	897b      	ldrh	r3, [r7, #10]
 8004170:	4413      	add	r3, r2
 8004172:	b29b      	uxth	r3, r3
 8004174:	b218      	sxth	r0, r3
 8004176:	88ba      	ldrh	r2, [r7, #4]
 8004178:	89bb      	ldrh	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	b29b      	uxth	r3, r3
 800417e:	b219      	sxth	r1, r3
 8004180:	89bb      	ldrh	r3, [r7, #12]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004188:	4413      	add	r3, r2
 800418a:	b29b      	uxth	r3, r3
 800418c:	b21a      	sxth	r2, r3
 800418e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004190:	f7ff fcea 	bl	8003b68 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8004194:	787b      	ldrb	r3, [r7, #1]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d013      	beq.n	80041c6 <fillCircleHelper+0x17e>
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	897b      	ldrh	r3, [r7, #10]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b218      	sxth	r0, r3
 80041a8:	88ba      	ldrh	r2, [r7, #4]
 80041aa:	89bb      	ldrh	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	b219      	sxth	r1, r3
 80041b2:	89bb      	ldrh	r3, [r7, #12]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041ba:	4413      	add	r3, r2
 80041bc:	b29b      	uxth	r3, r3
 80041be:	b21a      	sxth	r2, r3
 80041c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80041c2:	f7ff fcd1 	bl	8003b68 <drawFastVLine>
            py = y;
 80041c6:	89fb      	ldrh	r3, [r7, #14]
 80041c8:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 80041ca:	8a3b      	ldrh	r3, [r7, #16]
 80041cc:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 80041ce:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80041d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	f6ff af62 	blt.w	80040a0 <fillCircleHelper+0x58>
    }
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd90      	pop	{r4, r7, pc}

080041e4 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4623      	mov	r3, r4
 80041f4:	80fb      	strh	r3, [r7, #6]
 80041f6:	4603      	mov	r3, r0
 80041f8:	80bb      	strh	r3, [r7, #4]
 80041fa:	460b      	mov	r3, r1
 80041fc:	807b      	strh	r3, [r7, #2]
 80041fe:	4613      	mov	r3, r2
 8004200:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8004202:	4b8d      	ldr	r3, [pc, #564]	; (8004438 <fillRect+0x254>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <fillRect+0x32>
 800420a:	8c3b      	ldrh	r3, [r7, #32]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc fcab 	bl	8000b68 <color565_to_555>
 8004212:	4603      	mov	r3, r0
 8004214:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8004216:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800421a:	2b00      	cmp	r3, #0
 800421c:	da08      	bge.n	8004230 <fillRect+0x4c>
        w = -w;
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	425b      	negs	r3, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	807b      	strh	r3, [r7, #2]
        x -= w;
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	b29b      	uxth	r3, r3
 800422e:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	4413      	add	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 800423a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800423e:	2b00      	cmp	r3, #0
 8004240:	da01      	bge.n	8004246 <fillRect+0x62>
        x = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8004246:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800424a:	f7fc fc75 	bl	8000b38 <width>
 800424e:	4603      	mov	r3, r0
 8004250:	429c      	cmp	r4, r3
 8004252:	dd03      	ble.n	800425c <fillRect+0x78>
        end = width();
 8004254:	f7fc fc70 	bl	8000b38 <width>
 8004258:	4603      	mov	r3, r0
 800425a:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 800425c:	89fa      	ldrh	r2, [r7, #14]
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	b29b      	uxth	r3, r3
 8004264:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8004266:	f9b7 3000 	ldrsh.w	r3, [r7]
 800426a:	2b00      	cmp	r3, #0
 800426c:	da08      	bge.n	8004280 <fillRect+0x9c>
        h = -h;
 800426e:	883b      	ldrh	r3, [r7, #0]
 8004270:	425b      	negs	r3, r3
 8004272:	b29b      	uxth	r3, r3
 8004274:	803b      	strh	r3, [r7, #0]
        y -= h;
 8004276:	88ba      	ldrh	r2, [r7, #4]
 8004278:	883b      	ldrh	r3, [r7, #0]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	b29b      	uxth	r3, r3
 800427e:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8004280:	88ba      	ldrh	r2, [r7, #4]
 8004282:	883b      	ldrh	r3, [r7, #0]
 8004284:	4413      	add	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 800428a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	da01      	bge.n	8004296 <fillRect+0xb2>
        y = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8004296:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800429a:	f7fc fc59 	bl	8000b50 <height>
 800429e:	4603      	mov	r3, r0
 80042a0:	429c      	cmp	r4, r3
 80042a2:	dd03      	ble.n	80042ac <fillRect+0xc8>
        end = height();
 80042a4:	f7fc fc54 	bl	8000b50 <height>
 80042a8:	4603      	mov	r3, r0
 80042aa:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 80042ac:	89fa      	ldrh	r2, [r7, #14]
 80042ae:	88bb      	ldrh	r3, [r7, #4]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	887b      	ldrh	r3, [r7, #2]
 80042ba:	4413      	add	r3, r2
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	b21c      	sxth	r4, r3
 80042c4:	88ba      	ldrh	r2, [r7, #4]
 80042c6:	883b      	ldrh	r3, [r7, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	b21b      	sxth	r3, r3
 80042d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80042d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80042da:	4622      	mov	r2, r4
 80042dc:	f7ff f946 	bl	800356c <setAddrWindow>
    CS_ACTIVE;
 80042e0:	2101      	movs	r1, #1
 80042e2:	4856      	ldr	r0, [pc, #344]	; (800443c <fillRect+0x258>)
 80042e4:	f7fc fbda 	bl	8000a9c <PIN_LOW>
    WriteCmd(_MW);
 80042e8:	2110      	movs	r1, #16
 80042ea:	4855      	ldr	r0, [pc, #340]	; (8004440 <fillRect+0x25c>)
 80042ec:	f7fc fbd6 	bl	8000a9c <PIN_LOW>
 80042f0:	4b54      	ldr	r3, [pc, #336]	; (8004444 <fillRect+0x260>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	737b      	strb	r3, [r7, #13]
 80042fa:	4b52      	ldr	r3, [pc, #328]	; (8004444 <fillRect+0x260>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	733b      	strb	r3, [r7, #12]
 8004300:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <fillRect+0x25c>)
 8004302:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004306:	619a      	str	r2, [r3, #24]
 8004308:	4b4c      	ldr	r3, [pc, #304]	; (800443c <fillRect+0x258>)
 800430a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800430e:	619a      	str	r2, [r3, #24]
 8004310:	4b4d      	ldr	r3, [pc, #308]	; (8004448 <fillRect+0x264>)
 8004312:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004316:	619a      	str	r2, [r3, #24]
 8004318:	7b7b      	ldrb	r3, [r7, #13]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004320:	7b7b      	ldrb	r3, [r7, #13]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004328:	431a      	orrs	r2, r3
 800432a:	7b7b      	ldrb	r3, [r7, #13]
 800432c:	025b      	lsls	r3, r3, #9
 800432e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004332:	431a      	orrs	r2, r3
 8004334:	4b42      	ldr	r3, [pc, #264]	; (8004440 <fillRect+0x25c>)
 8004336:	619a      	str	r2, [r3, #24]
 8004338:	7b7b      	ldrb	r3, [r7, #13]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004340:	7b7b      	ldrb	r3, [r7, #13]
 8004342:	105b      	asrs	r3, r3, #1
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	431a      	orrs	r2, r3
 800434a:	7b7b      	ldrb	r3, [r7, #13]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	431a      	orrs	r2, r3
 8004354:	7b7b      	ldrb	r3, [r7, #13]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	431a      	orrs	r2, r3
 800435c:	4b37      	ldr	r3, [pc, #220]	; (800443c <fillRect+0x258>)
 800435e:	619a      	str	r2, [r3, #24]
 8004360:	7b7b      	ldrb	r3, [r7, #13]
 8004362:	019b      	lsls	r3, r3, #6
 8004364:	4a38      	ldr	r2, [pc, #224]	; (8004448 <fillRect+0x264>)
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	6193      	str	r3, [r2, #24]
 800436c:	2102      	movs	r1, #2
 800436e:	4834      	ldr	r0, [pc, #208]	; (8004440 <fillRect+0x25c>)
 8004370:	f7fc fb94 	bl	8000a9c <PIN_LOW>
 8004374:	2102      	movs	r1, #2
 8004376:	4832      	ldr	r0, [pc, #200]	; (8004440 <fillRect+0x25c>)
 8004378:	f7fc fba0 	bl	8000abc <PIN_HIGH>
 800437c:	2102      	movs	r1, #2
 800437e:	4830      	ldr	r0, [pc, #192]	; (8004440 <fillRect+0x25c>)
 8004380:	f7fc fb9c 	bl	8000abc <PIN_HIGH>
 8004384:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <fillRect+0x25c>)
 8004386:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800438a:	619a      	str	r2, [r3, #24]
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <fillRect+0x258>)
 800438e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004392:	619a      	str	r2, [r3, #24]
 8004394:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <fillRect+0x264>)
 8004396:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800439a:	619a      	str	r2, [r3, #24]
 800439c:	7b3b      	ldrb	r3, [r7, #12]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80043a4:	7b3b      	ldrb	r3, [r7, #12]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ac:	431a      	orrs	r2, r3
 80043ae:	7b3b      	ldrb	r3, [r7, #12]
 80043b0:	025b      	lsls	r3, r3, #9
 80043b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b6:	431a      	orrs	r2, r3
 80043b8:	4b21      	ldr	r3, [pc, #132]	; (8004440 <fillRect+0x25c>)
 80043ba:	619a      	str	r2, [r3, #24]
 80043bc:	7b3b      	ldrb	r3, [r7, #12]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80043c4:	7b3b      	ldrb	r3, [r7, #12]
 80043c6:	105b      	asrs	r3, r3, #1
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	7b3b      	ldrb	r3, [r7, #12]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	431a      	orrs	r2, r3
 80043d8:	7b3b      	ldrb	r3, [r7, #12]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	431a      	orrs	r2, r3
 80043e0:	4b16      	ldr	r3, [pc, #88]	; (800443c <fillRect+0x258>)
 80043e2:	619a      	str	r2, [r3, #24]
 80043e4:	7b3b      	ldrb	r3, [r7, #12]
 80043e6:	019b      	lsls	r3, r3, #6
 80043e8:	4a17      	ldr	r2, [pc, #92]	; (8004448 <fillRect+0x264>)
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	6193      	str	r3, [r2, #24]
 80043f0:	2102      	movs	r1, #2
 80043f2:	4813      	ldr	r0, [pc, #76]	; (8004440 <fillRect+0x25c>)
 80043f4:	f7fc fb52 	bl	8000a9c <PIN_LOW>
 80043f8:	2102      	movs	r1, #2
 80043fa:	4811      	ldr	r0, [pc, #68]	; (8004440 <fillRect+0x25c>)
 80043fc:	f7fc fb5e 	bl	8000abc <PIN_HIGH>
 8004400:	2102      	movs	r1, #2
 8004402:	480f      	ldr	r0, [pc, #60]	; (8004440 <fillRect+0x25c>)
 8004404:	f7fc fb5a 	bl	8000abc <PIN_HIGH>
 8004408:	2110      	movs	r1, #16
 800440a:	480d      	ldr	r0, [pc, #52]	; (8004440 <fillRect+0x25c>)
 800440c:	f7fc fb56 	bl	8000abc <PIN_HIGH>
    if (h > w) {
 8004410:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004414:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004418:	429a      	cmp	r2, r3
 800441a:	dd05      	ble.n	8004428 <fillRect+0x244>
        end = h;
 800441c:	883b      	ldrh	r3, [r7, #0]
 800441e:	81fb      	strh	r3, [r7, #14]
        h = w;
 8004420:	887b      	ldrh	r3, [r7, #2]
 8004422:	803b      	strh	r3, [r7, #0]
        w = end;
 8004424:	89fb      	ldrh	r3, [r7, #14]
 8004426:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8004428:	8c3b      	ldrh	r3, [r7, #32]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	b29b      	uxth	r3, r3
 800442e:	72fb      	strb	r3, [r7, #11]
 8004430:	8c3b      	ldrh	r3, [r7, #32]
 8004432:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8004434:	e099      	b.n	800456a <fillRect+0x386>
 8004436:	bf00      	nop
 8004438:	20000038 	.word	0x20000038
 800443c:	40020400 	.word	0x40020400
 8004440:	40020000 	.word	0x40020000
 8004444:	200000c6 	.word	0x200000c6
 8004448:	40020800 	.word	0x40020800
        end = w;
 800444c:	887b      	ldrh	r3, [r7, #2]
 800444e:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8004450:	4b60      	ldr	r3, [pc, #384]	; (80045d4 <fillRect+0x3f0>)
 8004452:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004456:	619a      	str	r2, [r3, #24]
 8004458:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <fillRect+0x3f4>)
 800445a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800445e:	619a      	str	r2, [r3, #24]
 8004460:	4b5e      	ldr	r3, [pc, #376]	; (80045dc <fillRect+0x3f8>)
 8004462:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004466:	619a      	str	r2, [r3, #24]
 8004468:	7afb      	ldrb	r3, [r7, #11]
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004470:	7afb      	ldrb	r3, [r7, #11]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	431a      	orrs	r2, r3
 800447a:	7afb      	ldrb	r3, [r7, #11]
 800447c:	025b      	lsls	r3, r3, #9
 800447e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004482:	431a      	orrs	r2, r3
 8004484:	4b53      	ldr	r3, [pc, #332]	; (80045d4 <fillRect+0x3f0>)
 8004486:	619a      	str	r2, [r3, #24]
 8004488:	7afb      	ldrb	r3, [r7, #11]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004490:	7afb      	ldrb	r3, [r7, #11]
 8004492:	105b      	asrs	r3, r3, #1
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	431a      	orrs	r2, r3
 800449a:	7afb      	ldrb	r3, [r7, #11]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	431a      	orrs	r2, r3
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	431a      	orrs	r2, r3
 80044ac:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <fillRect+0x3f4>)
 80044ae:	619a      	str	r2, [r3, #24]
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	019b      	lsls	r3, r3, #6
 80044b4:	4a49      	ldr	r2, [pc, #292]	; (80045dc <fillRect+0x3f8>)
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	6193      	str	r3, [r2, #24]
 80044bc:	2102      	movs	r1, #2
 80044be:	4845      	ldr	r0, [pc, #276]	; (80045d4 <fillRect+0x3f0>)
 80044c0:	f7fc faec 	bl	8000a9c <PIN_LOW>
 80044c4:	2102      	movs	r1, #2
 80044c6:	4843      	ldr	r0, [pc, #268]	; (80045d4 <fillRect+0x3f0>)
 80044c8:	f7fc faf8 	bl	8000abc <PIN_HIGH>
 80044cc:	2102      	movs	r1, #2
 80044ce:	4841      	ldr	r0, [pc, #260]	; (80045d4 <fillRect+0x3f0>)
 80044d0:	f7fc faf4 	bl	8000abc <PIN_HIGH>
            write8(lo);
 80044d4:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <fillRect+0x3f0>)
 80044d6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80044da:	619a      	str	r2, [r3, #24]
 80044dc:	4b3e      	ldr	r3, [pc, #248]	; (80045d8 <fillRect+0x3f4>)
 80044de:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80044e2:	619a      	str	r2, [r3, #24]
 80044e4:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <fillRect+0x3f8>)
 80044e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80044ea:	619a      	str	r2, [r3, #24]
 80044ec:	7abb      	ldrb	r3, [r7, #10]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80044f4:	7abb      	ldrb	r3, [r7, #10]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	431a      	orrs	r2, r3
 80044fe:	7abb      	ldrb	r3, [r7, #10]
 8004500:	025b      	lsls	r3, r3, #9
 8004502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004506:	431a      	orrs	r2, r3
 8004508:	4b32      	ldr	r3, [pc, #200]	; (80045d4 <fillRect+0x3f0>)
 800450a:	619a      	str	r2, [r3, #24]
 800450c:	7abb      	ldrb	r3, [r7, #10]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004514:	7abb      	ldrb	r3, [r7, #10]
 8004516:	105b      	asrs	r3, r3, #1
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	431a      	orrs	r2, r3
 800451e:	7abb      	ldrb	r3, [r7, #10]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	431a      	orrs	r2, r3
 8004528:	7abb      	ldrb	r3, [r7, #10]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	431a      	orrs	r2, r3
 8004530:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <fillRect+0x3f4>)
 8004532:	619a      	str	r2, [r3, #24]
 8004534:	7abb      	ldrb	r3, [r7, #10]
 8004536:	019b      	lsls	r3, r3, #6
 8004538:	4a28      	ldr	r2, [pc, #160]	; (80045dc <fillRect+0x3f8>)
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	6193      	str	r3, [r2, #24]
 8004540:	2102      	movs	r1, #2
 8004542:	4824      	ldr	r0, [pc, #144]	; (80045d4 <fillRect+0x3f0>)
 8004544:	f7fc faaa 	bl	8000a9c <PIN_LOW>
 8004548:	2102      	movs	r1, #2
 800454a:	4822      	ldr	r0, [pc, #136]	; (80045d4 <fillRect+0x3f0>)
 800454c:	f7fc fab6 	bl	8000abc <PIN_HIGH>
 8004550:	2102      	movs	r1, #2
 8004552:	4820      	ldr	r0, [pc, #128]	; (80045d4 <fillRect+0x3f0>)
 8004554:	f7fc fab2 	bl	8000abc <PIN_HIGH>
        } while (--end != 0);
 8004558:	89fb      	ldrh	r3, [r7, #14]
 800455a:	3b01      	subs	r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	81fb      	strh	r3, [r7, #14]
 8004560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f47f af73 	bne.w	8004450 <fillRect+0x26c>
    while (h-- > 0) {
 800456a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800456e:	b29a      	uxth	r2, r3
 8004570:	3a01      	subs	r2, #1
 8004572:	b292      	uxth	r2, r2
 8004574:	803a      	strh	r2, [r7, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f73f af68 	bgt.w	800444c <fillRect+0x268>
#endif
    }
    CS_IDLE;
 800457c:	2101      	movs	r1, #1
 800457e:	4816      	ldr	r0, [pc, #88]	; (80045d8 <fillRect+0x3f4>)
 8004580:	f7fc fa9c 	bl	8000abc <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <fillRect+0x3fc>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <fillRect+0x3c4>
 8004590:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <fillRect+0x400>)
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	f241 5226 	movw	r2, #5414	; 0x1526
 8004598:	4293      	cmp	r3, r2
 800459a:	d116      	bne.n	80045ca <fillRect+0x3e6>
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <fillRect+0x404>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <fillRect+0x3e6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80045a8:	f7fc fac6 	bl	8000b38 <width>
 80045ac:	4603      	mov	r3, r0
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	b21c      	sxth	r4, r3
 80045b4:	f7fc facc 	bl	8000b50 <height>
 80045b8:	4603      	mov	r3, r0
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29b      	uxth	r3, r3
 80045be:	b21b      	sxth	r3, r3
 80045c0:	4622      	mov	r2, r4
 80045c2:	2100      	movs	r1, #0
 80045c4:	2000      	movs	r0, #0
 80045c6:	f7fe ffd1 	bl	800356c <setAddrWindow>
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd90      	pop	{r4, r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40020400 	.word	0x40020400
 80045dc:	40020800 	.word	0x40020800
 80045e0:	200000c8 	.word	0x200000c8
 80045e4:	200000d6 	.word	0x200000d6
 80045e8:	2000003c 	.word	0x2000003c

080045ec <testFillScreen>:


/********************************* TESTS  *********************************************/

void testFillScreen()
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 80045f0:	2000      	movs	r0, #0
 80045f2:	f7ff fa05 	bl	8003a00 <fillScreen>
    fillScreen(RED);
 80045f6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80045fa:	f7ff fa01 	bl	8003a00 <fillScreen>
    fillScreen(GREEN);
 80045fe:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004602:	f7ff f9fd 	bl	8003a00 <fillScreen>
    fillScreen(BLUE);
 8004606:	201f      	movs	r0, #31
 8004608:	f7ff f9fa 	bl	8003a00 <fillScreen>
    fillScreen(BLACK);
 800460c:	2000      	movs	r0, #0
 800460e:	f7ff f9f7 	bl	8003a00 <fillScreen>
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}

08004616 <testLines>:

void testLines(uint16_t color)
{
 8004616:	b590      	push	{r4, r7, lr}
 8004618:	b08b      	sub	sp, #44	; 0x2c
 800461a:	af02      	add	r7, sp, #8
 800461c:	4603      	mov	r3, r0
 800461e:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = width(),
 8004620:	f7fc fa8a 	bl	8000b38 <width>
 8004624:	4603      	mov	r3, r0
 8004626:	617b      	str	r3, [r7, #20]
                  h = height();
 8004628:	f7fc fa92 	bl	8000b50 <height>
 800462c:	4603      	mov	r3, r0
 800462e:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8004630:	2000      	movs	r0, #0
 8004632:	f7ff f9e5 	bl	8003a00 <fillScreen>

    x1 = y1 = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3b01      	subs	r3, #1
 8004642:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	e00f      	b.n	800466a <testLines+0x54>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	b218      	sxth	r0, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	b219      	sxth	r1, r3
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	b21a      	sxth	r2, r3
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	b21c      	sxth	r4, r3
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4623      	mov	r3, r4
 8004660:	f7ff fb75 	bl	8003d4e <drawLine>
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	3306      	adds	r3, #6
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	429a      	cmp	r2, r3
 8004670:	dbeb      	blt.n	800464a <testLines+0x34>
    x2    = w - 1;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3b01      	subs	r3, #1
 8004676:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	e00f      	b.n	800469e <testLines+0x88>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	b218      	sxth	r0, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	b219      	sxth	r1, r3
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	b21a      	sxth	r2, r3
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	b21c      	sxth	r4, r3
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	4623      	mov	r3, r4
 8004694:	f7ff fb5b 	bl	8003d4e <drawLine>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	3306      	adds	r3, #6
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	dbeb      	blt.n	800467e <testLines+0x68>

    fillScreen(BLACK);
 80046a6:	2000      	movs	r0, #0
 80046a8:	f7ff f9aa 	bl	8003a00 <fillScreen>

    x1    = w - 1;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e00f      	b.n	80046e2 <testLines+0xcc>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	b218      	sxth	r0, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	b219      	sxth	r1, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	b21a      	sxth	r2, r3
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	b21c      	sxth	r4, r3
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4623      	mov	r3, r4
 80046d8:	f7ff fb39 	bl	8003d4e <drawLine>
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3306      	adds	r3, #6
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	dbeb      	blt.n	80046c2 <testLines+0xac>
    x2    = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80046ee:	2300      	movs	r3, #0
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e00f      	b.n	8004714 <testLines+0xfe>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	b218      	sxth	r0, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	b219      	sxth	r1, r3
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	b21a      	sxth	r2, r3
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	b21c      	sxth	r4, r3
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	4623      	mov	r3, r4
 800470a:	f7ff fb20 	bl	8003d4e <drawLine>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	3306      	adds	r3, #6
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	429a      	cmp	r2, r3
 800471a:	dbeb      	blt.n	80046f4 <testLines+0xde>

    fillScreen(BLACK);
 800471c:	2000      	movs	r0, #0
 800471e:	f7ff f96f 	bl	8003a00 <fillScreen>

    x1    = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3b01      	subs	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	e00f      	b.n	8004756 <testLines+0x140>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	b218      	sxth	r0, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	b219      	sxth	r1, r3
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	b21a      	sxth	r2, r3
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	b21c      	sxth	r4, r3
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	4623      	mov	r3, r4
 800474c:	f7ff faff 	bl	8003d4e <drawLine>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	3306      	adds	r3, #6
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	429a      	cmp	r2, r3
 800475c:	dbeb      	blt.n	8004736 <testLines+0x120>
    x2    = w - 1;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	3b01      	subs	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	e00f      	b.n	800478a <testLines+0x174>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	b218      	sxth	r0, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	b219      	sxth	r1, r3
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	b21a      	sxth	r2, r3
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	b21c      	sxth	r4, r3
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4623      	mov	r3, r4
 8004780:	f7ff fae5 	bl	8003d4e <drawLine>
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	3306      	adds	r3, #6
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	429a      	cmp	r2, r3
 8004790:	dbeb      	blt.n	800476a <testLines+0x154>

    fillScreen(BLACK);
 8004792:	2000      	movs	r0, #0
 8004794:	f7ff f934 	bl	8003a00 <fillScreen>

    x1    = w - 1;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	3b01      	subs	r3, #1
 800479c:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80047a8:	2300      	movs	r3, #0
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	e00f      	b.n	80047ce <testLines+0x1b8>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	b218      	sxth	r0, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	b219      	sxth	r1, r3
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	b21a      	sxth	r2, r3
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	b21c      	sxth	r4, r3
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	4623      	mov	r3, r4
 80047c4:	f7ff fac3 	bl	8003d4e <drawLine>
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	3306      	adds	r3, #6
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	dbeb      	blt.n	80047ae <testLines+0x198>
    x2    = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	e00f      	b.n	8004800 <testLines+0x1ea>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	b218      	sxth	r0, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	b219      	sxth	r1, r3
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	b21a      	sxth	r2, r3
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	b21c      	sxth	r4, r3
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4623      	mov	r3, r4
 80047f6:	f7ff faaa 	bl	8003d4e <drawLine>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	3306      	adds	r3, #6
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	429a      	cmp	r2, r3
 8004806:	dbeb      	blt.n	80047e0 <testLines+0x1ca>

}
 8004808:	bf00      	nop
 800480a:	3724      	adds	r7, #36	; 0x24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd90      	pop	{r4, r7, pc}

08004810 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	460a      	mov	r2, r1
 800481a:	80fb      	strh	r3, [r7, #6]
 800481c:	4613      	mov	r3, r2
 800481e:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = width(), h = height();
 8004820:	f7fc f98a 	bl	8000b38 <width>
 8004824:	4603      	mov	r3, r0
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	f7fc f992 	bl	8000b50 <height>
 800482c:	4603      	mov	r3, r0
 800482e:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8004830:	2000      	movs	r0, #0
 8004832:	f7ff f8e5 	bl	8003a00 <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	e00a      	b.n	8004852 <testFastLines+0x42>
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	b219      	sxth	r1, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	b21a      	sxth	r2, r3
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	2000      	movs	r0, #0
 8004848:	f7ff f9ad 	bl	8003ba6 <drawFastHLine>
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	3305      	adds	r3, #5
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	dbf0      	blt.n	800483c <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	e00a      	b.n	8004876 <testFastLines+0x66>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	b218      	sxth	r0, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	b21a      	sxth	r2, r3
 8004868:	88bb      	ldrh	r3, [r7, #4]
 800486a:	2100      	movs	r1, #0
 800486c:	f7ff f97c 	bl	8003b68 <drawFastVLine>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	3305      	adds	r3, #5
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	429a      	cmp	r2, r3
 800487c:	dbf0      	blt.n	8004860 <testFastLines+0x50>
}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b088      	sub	sp, #32
 800488a:	af00      	add	r7, sp, #0
 800488c:	4603      	mov	r3, r0
 800488e:	460a      	mov	r2, r1
 8004890:	71fb      	strb	r3, [r7, #7]
 8004892:	4613      	mov	r3, r2
 8004894:	80bb      	strh	r3, [r7, #4]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 8004896:	f7fc f94f 	bl	8000b38 <width>
 800489a:	4603      	mov	r3, r0
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	f7fc f957 	bl	8000b50 <height>
 80048a2:	4603      	mov	r3, r0
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 80048ac:	2000      	movs	r0, #0
 80048ae:	f7ff f8a7 	bl	8003a00 <fillScreen>
    for (x = radius; x < w; x += r2) {
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e017      	b.n	80048e8 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e00c      	b.n	80048d8 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	b218      	sxth	r0, r3
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	b219      	sxth	r1, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	b21a      	sxth	r2, r3
 80048ca:	88bb      	ldrh	r3, [r7, #4]
 80048cc:	f7ff fb8c 	bl	8003fe8 <fillCircle>
        for (y = radius; y < h; y += r2) {
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	429a      	cmp	r2, r3
 80048de:	dbee      	blt.n	80048be <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	dbe3      	blt.n	80048b8 <testFilledCircles+0x32>
        }
    }

}
 80048f0:	bf00      	nop
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	460a      	mov	r2, r1
 8004902:	71fb      	strb	r3, [r7, #7]
 8004904:	4613      	mov	r3, r2
 8004906:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	617b      	str	r3, [r7, #20]
                        w = width()  + radius,
 800490e:	f7fc f913 	bl	8000b38 <width>
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	4413      	add	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
                        h = height() + radius;
 800491c:	f7fc f918 	bl	8000b50 <height>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	4413      	add	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	e017      	b.n	8004960 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	e00c      	b.n	8004950 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	b218      	sxth	r0, r3
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	b219      	sxth	r1, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	b21a      	sxth	r2, r3
 8004942:	88bb      	ldrh	r3, [r7, #4]
 8004944:	f7ff fa65 	bl	8003e12 <drawCircle>
        for (y = 0; y < h; y += r2) {
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	4413      	add	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	dbee      	blt.n	8004936 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	4413      	add	r3, r2
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	429a      	cmp	r2, r3
 8004966:	dbe3      	blt.n	8004930 <testCircles+0x38>
        }
    }

}
 8004968:	bf00      	nop
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <drawChar>:
}



void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b08b      	sub	sp, #44	; 0x2c
 8004974:	af02      	add	r7, sp, #8
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	4611      	mov	r1, r2
 800497c:	461a      	mov	r2, r3
 800497e:	4623      	mov	r3, r4
 8004980:	80fb      	strh	r3, [r7, #6]
 8004982:	4603      	mov	r3, r0
 8004984:	80bb      	strh	r3, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	70fb      	strb	r3, [r7, #3]
 800498a:	4613      	mov	r3, r2
 800498c:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 800498e:	4b56      	ldr	r3, [pc, #344]	; (8004ae8 <drawChar+0x178>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4a51      	ldr	r2, [pc, #324]	; (8004ae8 <drawChar+0x178>)
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	3204      	adds	r2, #4
 80049a6:	8812      	ldrh	r2, [r2, #0]
 80049a8:	4413      	add	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 80049ac:	4b4e      	ldr	r3, [pc, #312]	; (8004ae8 <drawChar+0x178>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	789b      	ldrb	r3, [r3, #2]
 80049be:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	78db      	ldrb	r3, [r3, #3]
 80049c4:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	3305      	adds	r3, #5
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	3306      	adds	r3, #6
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	76fb      	strb	r3, [r7, #27]
 80049da:	2300      	movs	r3, #0
 80049dc:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	833b      	strh	r3, [r7, #24]
 80049e2:	2300      	movs	r3, #0
 80049e4:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 80049e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d905      	bls.n	80049fa <drawChar+0x8a>
            xo16 = xo;
 80049ee:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80049f2:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 80049f4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80049f8:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 80049fa:	2300      	movs	r3, #0
 80049fc:	773b      	strb	r3, [r7, #28]
 80049fe:	e06a      	b.n	8004ad6 <drawChar+0x166>
            for(xx=0; xx<w; xx++) {
 8004a00:	2300      	movs	r3, #0
 8004a02:	777b      	strb	r3, [r7, #29]
 8004a04:	e060      	b.n	8004ac8 <drawChar+0x158>
                if(!(bit++ & 7)) {
 8004a06:	7ebb      	ldrb	r3, [r7, #26]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	76ba      	strb	r2, [r7, #26]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <drawChar+0xb4>
                    bits = pgm_read_byte(&bitmap[bo++]);
 8004a14:	8bfb      	ldrh	r3, [r7, #30]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	83fa      	strh	r2, [r7, #30]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 8004a24:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da47      	bge.n	8004abc <drawChar+0x14c>
                    if(size == 1) {
 8004a2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d11a      	bne.n	8004a6a <drawChar+0xfa>
                        writePixel(x+xo+xx, y+yo+yy, color);
 8004a34:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	7f7b      	ldrb	r3, [r7, #29]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	b218      	sxth	r0, r3
 8004a4a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	88bb      	ldrh	r3, [r7, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	7f3b      	ldrb	r3, [r7, #28]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	b21b      	sxth	r3, r3
 8004a60:	883a      	ldrh	r2, [r7, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	f7ff f8bd 	bl	8003be2 <writePixel>
 8004a68:	e028      	b.n	8004abc <drawChar+0x14c>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 8004a6a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004a6e:	7f7b      	ldrb	r3, [r7, #29]
 8004a70:	4413      	add	r3, r2
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	fb12 f303 	smulbb	r3, r2, r3
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	4413      	add	r3, r2
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	b218      	sxth	r0, r3
 8004a88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004a8c:	7f3b      	ldrb	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	fb12 f303 	smulbb	r3, r2, r3
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	88bb      	ldrh	r3, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	b219      	sxth	r1, r3
 8004aa6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aaa:	b21a      	sxth	r2, r3
 8004aac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ab0:	b21c      	sxth	r4, r3
 8004ab2:	883b      	ldrh	r3, [r7, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	f7ff fb94 	bl	80041e4 <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 8004abc:	7efb      	ldrb	r3, [r7, #27]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 8004ac2:	7f7b      	ldrb	r3, [r7, #29]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	777b      	strb	r3, [r7, #29]
 8004ac8:	7f7a      	ldrb	r2, [r7, #29]
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d39a      	bcc.n	8004a06 <drawChar+0x96>
        for(yy=0; yy<h; yy++) {
 8004ad0:	7f3b      	ldrb	r3, [r7, #28]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	773b      	strb	r3, [r7, #28]
 8004ad6:	7f3a      	ldrb	r2, [r7, #28]
 8004ad8:	7abb      	ldrb	r3, [r7, #10]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d390      	bcc.n	8004a00 <drawChar+0x90>
            }
        }

    } // End classic vs custom font
}
 8004ade:	bf00      	nop
 8004ae0:	3724      	adds	r7, #36	; 0x24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd90      	pop	{r4, r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000040 	.word	0x20000040

08004aec <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 8004aec:	b5b0      	push	{r4, r5, r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	4603      	mov	r3, r0
 8004af4:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2b0a      	cmp	r3, #10
 8004afa:	d112      	bne.n	8004b22 <write+0x36>
            cursor_x  = 0;
 8004afc:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <write+0x12c>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004b02:	4b46      	ldr	r3, [pc, #280]	; (8004c1c <write+0x130>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330a      	adds	r3, #10
 8004b08:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 8004b0a:	4b45      	ldr	r3, [pc, #276]	; (8004c20 <write+0x134>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	fb12 f303 	smulbb	r3, r2, r3
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	4b43      	ldr	r3, [pc, #268]	; (8004c24 <write+0x138>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	4413      	add	r3, r2
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <write+0x138>)
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e074      	b.n	8004c0c <write+0x120>
        } else if(c != '\r') {
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	2b0d      	cmp	r3, #13
 8004b26:	d071      	beq.n	8004c0c <write+0x120>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 8004b28:	4b3c      	ldr	r3, [pc, #240]	; (8004c1c <write+0x130>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	7a1b      	ldrb	r3, [r3, #8]
 8004b2e:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8004b30:	79fa      	ldrb	r2, [r7, #7]
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d369      	bcc.n	8004c0c <write+0x120>
 8004b38:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <write+0x130>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3309      	adds	r3, #9
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	79fa      	ldrb	r2, [r7, #7]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d862      	bhi.n	8004c0c <write+0x120>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 8004b46:	79fa      	ldrb	r2, [r7, #7]
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	00db      	lsls	r3, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004b4e:	4a33      	ldr	r2, [pc, #204]	; (8004c1c <write+0x130>)
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	3204      	adds	r2, #4
 8004b54:	8812      	ldrh	r2, [r2, #0]
                  &gfxFont->glyph))[c - first]);
 8004b56:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004b58:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	789b      	ldrb	r3, [r3, #2]
 8004b5e:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	78db      	ldrb	r3, [r3, #3]
 8004b64:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d041      	beq.n	8004bf0 <write+0x104>
 8004b6c:	7bbb      	ldrb	r3, [r7, #14]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d03e      	beq.n	8004bf0 <write+0x104>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	3305      	adds	r3, #5
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	b25b      	sxtb	r3, r3
 8004b7a:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <write+0x13c>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d022      	beq.n	8004bca <write+0xde>
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <write+0x12c>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <write+0x134>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	4413      	add	r3, r2
 8004b98:	fb03 f300 	mul.w	r3, r3, r0
 8004b9c:	440b      	add	r3, r1
 8004b9e:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <write+0x140>)
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	dd11      	ble.n	8004bca <write+0xde>
                        cursor_x  = 0;
 8004ba6:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <write+0x12c>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004bac:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <write+0x130>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330a      	adds	r3, #10
 8004bb2:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <write+0x134>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	fb12 f303 	smulbb	r3, r2, r3
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <write+0x138>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <write+0x138>)
 8004bc8:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <write+0x12c>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b218      	sxth	r0, r3
 8004bd0:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <write+0x138>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b219      	sxth	r1, r3
 8004bd6:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <write+0x144>)
 8004bd8:	881d      	ldrh	r5, [r3, #0]
 8004bda:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <write+0x148>)
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <write+0x134>)
 8004be0:	7812      	ldrb	r2, [r2, #0]
 8004be2:	79fc      	ldrb	r4, [r7, #7]
 8004be4:	9201      	str	r2, [sp, #4]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	462b      	mov	r3, r5
 8004bea:	4622      	mov	r2, r4
 8004bec:	f7ff fec0 	bl	8004970 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <write+0x134>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	fb12 f303 	smulbb	r3, r2, r3
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <write+0x12c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <write+0x12c>)
 8004c0a:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 8004c0c:	2301      	movs	r3, #1
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bdb0      	pop	{r4, r5, r7, pc}
 8004c16:	bf00      	nop
 8004c18:	2000003b 	.word	0x2000003b
 8004c1c:	20000040 	.word	0x20000040
 8004c20:	20000008 	.word	0x20000008
 8004c24:	2000003a 	.word	0x2000003a
 8004c28:	2000000e 	.word	0x2000000e
 8004c2c:	20000004 	.word	0x20000004
 8004c30:	2000000a 	.word	0x2000000a
 8004c34:	2000000c 	.word	0x2000000c

08004c38 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <setFont+0x4c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d110      	bne.n	8004c70 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <setFont+0x50>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	3306      	adds	r3, #6
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <setFont+0x50>)
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	e009      	b.n	8004c70 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <setFont+0x4c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <setFont+0x50>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	3b06      	subs	r3, #6
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <setFont+0x50>)
 8004c6e:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <setFont+0x4c>)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6013      	str	r3, [r2, #0]
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000040 	.word	0x20000040
 8004c88:	2000003a 	.word	0x2000003a

08004c8c <printnewtstr>:
    }
}


void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	461a      	mov	r2, r3
 8004c98:	460b      	mov	r3, r1
 8004c9a:	817b      	strh	r3, [r7, #10]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	727b      	strb	r3, [r7, #9]
	setFont(f);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ffc9 	bl	8004c38 <setFont>
	textcolor = txtcolor;
 8004ca6:	4a10      	ldr	r2, [pc, #64]	; (8004ce8 <printnewtstr+0x5c>)
 8004ca8:	897b      	ldrh	r3, [r7, #10]
 8004caa:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8004cac:	7a7b      	ldrb	r3, [r7, #9]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <printnewtstr+0x2a>
 8004cb2:	7a7b      	ldrb	r3, [r7, #9]
 8004cb4:	e000      	b.n	8004cb8 <printnewtstr+0x2c>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4a0c      	ldr	r2, [pc, #48]	; (8004cec <printnewtstr+0x60>)
 8004cba:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	b21b      	sxth	r3, r3
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f000 f814 	bl	8004cf0 <setCursor>
	while (*str) write (*str++);
 8004cc8:	e006      	b.n	8004cd8 <printnewtstr+0x4c>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	61ba      	str	r2, [r7, #24]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ff0a 	bl	8004aec <write>
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f4      	bne.n	8004cca <printnewtstr+0x3e>
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	2000000a 	.word	0x2000000a
 8004cec:	20000008 	.word	0x20000008

08004cf0 <setCursor>:
void setTextSize (uint8_t size)
{
	textsize = size;
}

void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	460a      	mov	r2, r1
 8004cfa:	80fb      	strh	r3, [r7, #6]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	80bb      	strh	r3, [r7, #4]
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <setCursor+0x2c>)
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	88bb      	ldrh	r3, [r7, #4]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <setCursor+0x30>)
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	2000003b 	.word	0x2000003b
 8004d20:	2000003a 	.word	0x2000003a

08004d24 <getRotation>:

uint8_t getRotation (void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
	return rotation;
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <getRotation+0x14>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	2000003c 	.word	0x2000003c

08004d3c <scrollup>:

void scrollup (uint16_t speed)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	80fb      	strh	r3, [r7, #6]
     uint16_t maxscroll;
     if (getRotation() & 1) maxscroll = width();
 8004d46:	f7ff ffed 	bl	8004d24 <getRotation>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <scrollup+0x22>
 8004d54:	f7fb fef0 	bl	8000b38 <width>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	81fb      	strh	r3, [r7, #14]
 8004d5c:	e003      	b.n	8004d66 <scrollup+0x2a>
     else maxscroll = height();
 8004d5e:	f7fb fef7 	bl	8000b50 <height>
 8004d62:	4603      	mov	r3, r0
 8004d64:	81fb      	strh	r3, [r7, #14]
     for (uint16_t i = 1; i <= maxscroll; i++)
 8004d66:	2301      	movs	r3, #1
 8004d68:	81bb      	strh	r3, [r7, #12]
 8004d6a:	e01b      	b.n	8004da4 <scrollup+0x68>
     {
          vertScroll(0, maxscroll, i);
 8004d6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d74:	4619      	mov	r1, r3
 8004d76:	2000      	movs	r0, #0
 8004d78:	f7fe fd1c 	bl	80037b4 <vertScroll>
         if (speed < 655) delay(speed*100);
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	f240 228e 	movw	r2, #654	; 0x28e
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d807      	bhi.n	8004d96 <scrollup+0x5a>
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	2264      	movs	r2, #100	; 0x64
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fb fbb8 	bl	8000504 <delay>
 8004d94:	e003      	b.n	8004d9e <scrollup+0x62>
         else HAL_Delay(speed);
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f8a7 	bl	8004eec <HAL_Delay>
     for (uint16_t i = 1; i <= maxscroll; i++)
 8004d9e:	89bb      	ldrh	r3, [r7, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	81bb      	strh	r3, [r7, #12]
 8004da4:	89ba      	ldrh	r2, [r7, #12]
 8004da6:	89fb      	ldrh	r3, [r7, #14]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d9df      	bls.n	8004d6c <scrollup+0x30>
     }

}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004dba:	e003      	b.n	8004dc4 <LoopCopyDataInit>

08004dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004dc2:	3104      	adds	r1, #4

08004dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004dc4:	480b      	ldr	r0, [pc, #44]	; (8004df4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004dcc:	d3f6      	bcc.n	8004dbc <CopyDataInit>
  ldr  r2, =_sbss
 8004dce:	4a0b      	ldr	r2, [pc, #44]	; (8004dfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004dd0:	e002      	b.n	8004dd8 <LoopFillZerobss>

08004dd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004dd4:	f842 3b04 	str.w	r3, [r2], #4

08004dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ddc:	d3f9      	bcc.n	8004dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004dde:	f7fb fe47 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004de2:	f001 fed1 	bl	8006b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004de6:	f7fb fba5 	bl	8000534 <main>
  bx  lr    
 8004dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004dec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004df0:	08007b34 	.word	0x08007b34
  ldr  r0, =_sdata
 8004df4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004df8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8004dfc:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8004e00:	200000e4 	.word	0x200000e4

08004e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e04:	e7fe      	b.n	8004e04 <ADC_IRQHandler>
	...

08004e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e0c:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <HAL_Init+0x40>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0d      	ldr	r2, [pc, #52]	; (8004e48 <HAL_Init+0x40>)
 8004e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_Init+0x40>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <HAL_Init+0x40>)
 8004e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <HAL_Init+0x40>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <HAL_Init+0x40>)
 8004e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e30:	2003      	movs	r0, #3
 8004e32:	f000 f92f 	bl	8005094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e36:	2000      	movs	r0, #0
 8004e38:	f000 f808 	bl	8004e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e3c:	f7fb fd58 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40023c00 	.word	0x40023c00

08004e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e54:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_InitTick+0x54>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <HAL_InitTick+0x58>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f939 	bl	80050e2 <HAL_SYSTICK_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e00e      	b.n	8004e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b0f      	cmp	r3, #15
 8004e7e:	d80a      	bhi.n	8004e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e80:	2200      	movs	r2, #0
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	f000 f90f 	bl	80050aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e8c:	4a06      	ldr	r2, [pc, #24]	; (8004ea8 <HAL_InitTick+0x5c>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000000 	.word	0x20000000
 8004ea4:	20000014 	.word	0x20000014
 8004ea8:	20000010 	.word	0x20000010

08004eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_IncTick+0x20>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_IncTick+0x24>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4413      	add	r3, r2
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <HAL_IncTick+0x24>)
 8004ebe:	6013      	str	r3, [r2, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000014 	.word	0x20000014
 8004ed0:	200000e0 	.word	0x200000e0

08004ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_GetTick+0x14>)
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	200000e0 	.word	0x200000e0

08004eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ef4:	f7ff ffee 	bl	8004ed4 <HAL_GetTick>
 8004ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d005      	beq.n	8004f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <HAL_Delay+0x40>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f12:	bf00      	nop
 8004f14:	f7ff ffde 	bl	8004ed4 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d8f7      	bhi.n	8004f14 <HAL_Delay+0x28>
  {
  }
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000014 	.word	0x20000014

08004f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <__NVIC_SetPriorityGrouping+0x44>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f62:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <__NVIC_SetPriorityGrouping+0x44>)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	60d3      	str	r3, [r2, #12]
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f7c:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <__NVIC_GetPriorityGrouping+0x18>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	f003 0307 	and.w	r3, r3, #7
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	e000ed00 	.word	0xe000ed00

08004f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	db0a      	blt.n	8004fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	490c      	ldr	r1, [pc, #48]	; (8004fe0 <__NVIC_SetPriority+0x4c>)
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	0112      	lsls	r2, r2, #4
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fbc:	e00a      	b.n	8004fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	4908      	ldr	r1, [pc, #32]	; (8004fe4 <__NVIC_SetPriority+0x50>)
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	0112      	lsls	r2, r2, #4
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	761a      	strb	r2, [r3, #24]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000e100 	.word	0xe000e100
 8004fe4:	e000ed00 	.word	0xe000ed00

08004fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f1c3 0307 	rsb	r3, r3, #7
 8005002:	2b04      	cmp	r3, #4
 8005004:	bf28      	it	cs
 8005006:	2304      	movcs	r3, #4
 8005008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3304      	adds	r3, #4
 800500e:	2b06      	cmp	r3, #6
 8005010:	d902      	bls.n	8005018 <NVIC_EncodePriority+0x30>
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	3b03      	subs	r3, #3
 8005016:	e000      	b.n	800501a <NVIC_EncodePriority+0x32>
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43da      	mvns	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	401a      	ands	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005030:	f04f 31ff 	mov.w	r1, #4294967295
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	43d9      	mvns	r1, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005040:	4313      	orrs	r3, r2
         );
}
 8005042:	4618      	mov	r0, r3
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3b01      	subs	r3, #1
 800505c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005060:	d301      	bcc.n	8005066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005062:	2301      	movs	r3, #1
 8005064:	e00f      	b.n	8005086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005066:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <SysTick_Config+0x40>)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3b01      	subs	r3, #1
 800506c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800506e:	210f      	movs	r1, #15
 8005070:	f04f 30ff 	mov.w	r0, #4294967295
 8005074:	f7ff ff8e 	bl	8004f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <SysTick_Config+0x40>)
 800507a:	2200      	movs	r2, #0
 800507c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <SysTick_Config+0x40>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010

08005094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff ff47 	bl	8004f30 <__NVIC_SetPriorityGrouping>
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	4603      	mov	r3, r0
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050bc:	f7ff ff5c 	bl	8004f78 <__NVIC_GetPriorityGrouping>
 80050c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	6978      	ldr	r0, [r7, #20]
 80050c8:	f7ff ff8e 	bl	8004fe8 <NVIC_EncodePriority>
 80050cc:	4602      	mov	r2, r0
 80050ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff5d 	bl	8004f94 <__NVIC_SetPriority>
}
 80050da:	bf00      	nop
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ffb0 	bl	8005050 <SysTick_Config>
 80050f0:	4603      	mov	r3, r0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	e165      	b.n	80053e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005118:	2201      	movs	r2, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4013      	ands	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	429a      	cmp	r2, r3
 8005132:	f040 8154 	bne.w	80053de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d00b      	beq.n	8005156 <HAL_GPIO_Init+0x5a>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d007      	beq.n	8005156 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800514a:	2b11      	cmp	r3, #17
 800514c:	d003      	beq.n	8005156 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b12      	cmp	r3, #18
 8005154:	d130      	bne.n	80051b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	2203      	movs	r2, #3
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4313      	orrs	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800518c:	2201      	movs	r2, #1
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4013      	ands	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	091b      	lsrs	r3, r3, #4
 80051a2:	f003 0201 	and.w	r2, r3, #1
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	2203      	movs	r2, #3
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4013      	ands	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d003      	beq.n	80051f8 <HAL_GPIO_Init+0xfc>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b12      	cmp	r3, #18
 80051f6:	d123      	bne.n	8005240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	08da      	lsrs	r2, r3, #3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3208      	adds	r2, #8
 8005200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	220f      	movs	r2, #15
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4313      	orrs	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	08da      	lsrs	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3208      	adds	r2, #8
 800523a:	69b9      	ldr	r1, [r7, #24]
 800523c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	2203      	movs	r2, #3
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 0203 	and.w	r2, r3, #3
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 80ae 	beq.w	80053de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	4b5c      	ldr	r3, [pc, #368]	; (80053f8 <HAL_GPIO_Init+0x2fc>)
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	4a5b      	ldr	r2, [pc, #364]	; (80053f8 <HAL_GPIO_Init+0x2fc>)
 800528c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005290:	6453      	str	r3, [r2, #68]	; 0x44
 8005292:	4b59      	ldr	r3, [pc, #356]	; (80053f8 <HAL_GPIO_Init+0x2fc>)
 8005294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800529e:	4a57      	ldr	r2, [pc, #348]	; (80053fc <HAL_GPIO_Init+0x300>)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	089b      	lsrs	r3, r3, #2
 80052a4:	3302      	adds	r3, #2
 80052a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	220f      	movs	r2, #15
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	43db      	mvns	r3, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4013      	ands	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a4e      	ldr	r2, [pc, #312]	; (8005400 <HAL_GPIO_Init+0x304>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d025      	beq.n	8005316 <HAL_GPIO_Init+0x21a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a4d      	ldr	r2, [pc, #308]	; (8005404 <HAL_GPIO_Init+0x308>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01f      	beq.n	8005312 <HAL_GPIO_Init+0x216>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a4c      	ldr	r2, [pc, #304]	; (8005408 <HAL_GPIO_Init+0x30c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d019      	beq.n	800530e <HAL_GPIO_Init+0x212>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a4b      	ldr	r2, [pc, #300]	; (800540c <HAL_GPIO_Init+0x310>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_GPIO_Init+0x20e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a4a      	ldr	r2, [pc, #296]	; (8005410 <HAL_GPIO_Init+0x314>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00d      	beq.n	8005306 <HAL_GPIO_Init+0x20a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a49      	ldr	r2, [pc, #292]	; (8005414 <HAL_GPIO_Init+0x318>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d007      	beq.n	8005302 <HAL_GPIO_Init+0x206>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a48      	ldr	r2, [pc, #288]	; (8005418 <HAL_GPIO_Init+0x31c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d101      	bne.n	80052fe <HAL_GPIO_Init+0x202>
 80052fa:	2306      	movs	r3, #6
 80052fc:	e00c      	b.n	8005318 <HAL_GPIO_Init+0x21c>
 80052fe:	2307      	movs	r3, #7
 8005300:	e00a      	b.n	8005318 <HAL_GPIO_Init+0x21c>
 8005302:	2305      	movs	r3, #5
 8005304:	e008      	b.n	8005318 <HAL_GPIO_Init+0x21c>
 8005306:	2304      	movs	r3, #4
 8005308:	e006      	b.n	8005318 <HAL_GPIO_Init+0x21c>
 800530a:	2303      	movs	r3, #3
 800530c:	e004      	b.n	8005318 <HAL_GPIO_Init+0x21c>
 800530e:	2302      	movs	r3, #2
 8005310:	e002      	b.n	8005318 <HAL_GPIO_Init+0x21c>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <HAL_GPIO_Init+0x21c>
 8005316:	2300      	movs	r3, #0
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	f002 0203 	and.w	r2, r2, #3
 800531e:	0092      	lsls	r2, r2, #2
 8005320:	4093      	lsls	r3, r2
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005328:	4934      	ldr	r1, [pc, #208]	; (80053fc <HAL_GPIO_Init+0x300>)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	089b      	lsrs	r3, r3, #2
 800532e:	3302      	adds	r3, #2
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005336:	4b39      	ldr	r3, [pc, #228]	; (800541c <HAL_GPIO_Init+0x320>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	43db      	mvns	r3, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4013      	ands	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800535a:	4a30      	ldr	r2, [pc, #192]	; (800541c <HAL_GPIO_Init+0x320>)
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005360:	4b2e      	ldr	r3, [pc, #184]	; (800541c <HAL_GPIO_Init+0x320>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005384:	4a25      	ldr	r2, [pc, #148]	; (800541c <HAL_GPIO_Init+0x320>)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800538a:	4b24      	ldr	r3, [pc, #144]	; (800541c <HAL_GPIO_Init+0x320>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053ae:	4a1b      	ldr	r2, [pc, #108]	; (800541c <HAL_GPIO_Init+0x320>)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053b4:	4b19      	ldr	r3, [pc, #100]	; (800541c <HAL_GPIO_Init+0x320>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	43db      	mvns	r3, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4013      	ands	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053d8:	4a10      	ldr	r2, [pc, #64]	; (800541c <HAL_GPIO_Init+0x320>)
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	3301      	adds	r3, #1
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	f67f ae96 	bls.w	8005118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053ec:	bf00      	nop
 80053ee:	3724      	adds	r7, #36	; 0x24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40013800 	.word	0x40013800
 8005400:	40020000 	.word	0x40020000
 8005404:	40020400 	.word	0x40020400
 8005408:	40020800 	.word	0x40020800
 800540c:	40020c00 	.word	0x40020c00
 8005410:	40021000 	.word	0x40021000
 8005414:	40021400 	.word	0x40021400
 8005418:	40021800 	.word	0x40021800
 800541c:	40013c00 	.word	0x40013c00

08005420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	807b      	strh	r3, [r7, #2]
 800542c:	4613      	mov	r3, r2
 800542e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005430:	787b      	ldrb	r3, [r7, #1]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005436:	887a      	ldrh	r2, [r7, #2]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800543c:	e003      	b.n	8005446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800543e:	887b      	ldrh	r3, [r7, #2]
 8005440:	041a      	lsls	r2, r3, #16
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	619a      	str	r2, [r3, #24]
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0cc      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005468:	4b68      	ldr	r3, [pc, #416]	; (800560c <HAL_RCC_ClockConfig+0x1b8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d90c      	bls.n	8005490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b65      	ldr	r3, [pc, #404]	; (800560c <HAL_RCC_ClockConfig+0x1b8>)
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b63      	ldr	r3, [pc, #396]	; (800560c <HAL_RCC_ClockConfig+0x1b8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0b8      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d020      	beq.n	80054de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a8:	4b59      	ldr	r3, [pc, #356]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4a58      	ldr	r2, [pc, #352]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c0:	4b53      	ldr	r3, [pc, #332]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4a52      	ldr	r2, [pc, #328]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054cc:	4b50      	ldr	r3, [pc, #320]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	494d      	ldr	r1, [pc, #308]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d044      	beq.n	8005574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f2:	4b47      	ldr	r3, [pc, #284]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d119      	bne.n	8005532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e07f      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d003      	beq.n	8005512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800550e:	2b03      	cmp	r3, #3
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005512:	4b3f      	ldr	r3, [pc, #252]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e06f      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005522:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e067      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005532:	4b37      	ldr	r3, [pc, #220]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f023 0203 	bic.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4934      	ldr	r1, [pc, #208]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	4313      	orrs	r3, r2
 8005542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005544:	f7ff fcc6 	bl	8004ed4 <HAL_GetTick>
 8005548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554a:	e00a      	b.n	8005562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554c:	f7ff fcc2 	bl	8004ed4 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	; 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e04f      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005562:	4b2b      	ldr	r3, [pc, #172]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 020c 	and.w	r2, r3, #12
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	429a      	cmp	r2, r3
 8005572:	d1eb      	bne.n	800554c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <HAL_RCC_ClockConfig+0x1b8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d20c      	bcs.n	800559c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005582:	4b22      	ldr	r3, [pc, #136]	; (800560c <HAL_RCC_ClockConfig+0x1b8>)
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b20      	ldr	r3, [pc, #128]	; (800560c <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e032      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a8:	4b19      	ldr	r3, [pc, #100]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4916      	ldr	r1, [pc, #88]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055c6:	4b12      	ldr	r3, [pc, #72]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	490e      	ldr	r1, [pc, #56]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055da:	f000 f855 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 80055de:	4601      	mov	r1, r0
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	091b      	lsrs	r3, r3, #4
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	4a0a      	ldr	r2, [pc, #40]	; (8005614 <HAL_RCC_ClockConfig+0x1c0>)
 80055ec:	5cd3      	ldrb	r3, [r2, r3]
 80055ee:	fa21 f303 	lsr.w	r3, r1, r3
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_ClockConfig+0x1c8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fc26 	bl	8004e4c <HAL_InitTick>

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40023c00 	.word	0x40023c00
 8005610:	40023800 	.word	0x40023800
 8005614:	080075d0 	.word	0x080075d0
 8005618:	20000000 	.word	0x20000000
 800561c:	20000010 	.word	0x20000010

08005620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005624:	4b03      	ldr	r3, [pc, #12]	; (8005634 <HAL_RCC_GetHCLKFreq+0x14>)
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000000 	.word	0x20000000

08005638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800563c:	f7ff fff0 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8005640:	4601      	mov	r1, r0
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	0a9b      	lsrs	r3, r3, #10
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4a03      	ldr	r2, [pc, #12]	; (800565c <HAL_RCC_GetPCLK1Freq+0x24>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40023800 	.word	0x40023800
 800565c:	080075e0 	.word	0x080075e0

08005660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005664:	f7ff ffdc 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8005668:	4601      	mov	r1, r0
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	0b5b      	lsrs	r3, r3, #13
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	4a03      	ldr	r2, [pc, #12]	; (8005684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005676:	5cd3      	ldrb	r3, [r2, r3]
 8005678:	fa21 f303 	lsr.w	r3, r1, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40023800 	.word	0x40023800
 8005684:	080075e0 	.word	0x080075e0

08005688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056a2:	4bc6      	ldr	r3, [pc, #792]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
 80056aa:	2b0c      	cmp	r3, #12
 80056ac:	f200 817e 	bhi.w	80059ac <HAL_RCC_GetSysClockFreq+0x324>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056ed 	.word	0x080056ed
 80056bc:	080059ad 	.word	0x080059ad
 80056c0:	080059ad 	.word	0x080059ad
 80056c4:	080059ad 	.word	0x080059ad
 80056c8:	080056f3 	.word	0x080056f3
 80056cc:	080059ad 	.word	0x080059ad
 80056d0:	080059ad 	.word	0x080059ad
 80056d4:	080059ad 	.word	0x080059ad
 80056d8:	080056f9 	.word	0x080056f9
 80056dc:	080059ad 	.word	0x080059ad
 80056e0:	080059ad 	.word	0x080059ad
 80056e4:	080059ad 	.word	0x080059ad
 80056e8:	08005855 	.word	0x08005855
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4bb4      	ldr	r3, [pc, #720]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x338>)
 80056ee:	613b      	str	r3, [r7, #16]
       break;
 80056f0:	e15f      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056f2:	4bb4      	ldr	r3, [pc, #720]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80056f4:	613b      	str	r3, [r7, #16]
      break;
 80056f6:	e15c      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056f8:	4bb0      	ldr	r3, [pc, #704]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005700:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005702:	4bae      	ldr	r3, [pc, #696]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d04a      	beq.n	80057a4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800570e:	4bab      	ldr	r3, [pc, #684]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	099b      	lsrs	r3, r3, #6
 8005714:	f04f 0400 	mov.w	r4, #0
 8005718:	f240 11ff 	movw	r1, #511	; 0x1ff
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	ea03 0501 	and.w	r5, r3, r1
 8005724:	ea04 0602 	and.w	r6, r4, r2
 8005728:	4629      	mov	r1, r5
 800572a:	4632      	mov	r2, r6
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	f04f 0400 	mov.w	r4, #0
 8005734:	0154      	lsls	r4, r2, #5
 8005736:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800573a:	014b      	lsls	r3, r1, #5
 800573c:	4619      	mov	r1, r3
 800573e:	4622      	mov	r2, r4
 8005740:	1b49      	subs	r1, r1, r5
 8005742:	eb62 0206 	sbc.w	r2, r2, r6
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	f04f 0400 	mov.w	r4, #0
 800574e:	0194      	lsls	r4, r2, #6
 8005750:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005754:	018b      	lsls	r3, r1, #6
 8005756:	1a5b      	subs	r3, r3, r1
 8005758:	eb64 0402 	sbc.w	r4, r4, r2
 800575c:	f04f 0100 	mov.w	r1, #0
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	00e2      	lsls	r2, r4, #3
 8005766:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800576a:	00d9      	lsls	r1, r3, #3
 800576c:	460b      	mov	r3, r1
 800576e:	4614      	mov	r4, r2
 8005770:	195b      	adds	r3, r3, r5
 8005772:	eb44 0406 	adc.w	r4, r4, r6
 8005776:	f04f 0100 	mov.w	r1, #0
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	0262      	lsls	r2, r4, #9
 8005780:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005784:	0259      	lsls	r1, r3, #9
 8005786:	460b      	mov	r3, r1
 8005788:	4614      	mov	r4, r2
 800578a:	4618      	mov	r0, r3
 800578c:	4621      	mov	r1, r4
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f04f 0400 	mov.w	r4, #0
 8005794:	461a      	mov	r2, r3
 8005796:	4623      	mov	r3, r4
 8005798:	f7fa fd34 	bl	8000204 <__aeabi_uldivmod>
 800579c:	4603      	mov	r3, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e049      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057a4:	4b85      	ldr	r3, [pc, #532]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	099b      	lsrs	r3, r3, #6
 80057aa:	f04f 0400 	mov.w	r4, #0
 80057ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	ea03 0501 	and.w	r5, r3, r1
 80057ba:	ea04 0602 	and.w	r6, r4, r2
 80057be:	4629      	mov	r1, r5
 80057c0:	4632      	mov	r2, r6
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	f04f 0400 	mov.w	r4, #0
 80057ca:	0154      	lsls	r4, r2, #5
 80057cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80057d0:	014b      	lsls	r3, r1, #5
 80057d2:	4619      	mov	r1, r3
 80057d4:	4622      	mov	r2, r4
 80057d6:	1b49      	subs	r1, r1, r5
 80057d8:	eb62 0206 	sbc.w	r2, r2, r6
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	f04f 0400 	mov.w	r4, #0
 80057e4:	0194      	lsls	r4, r2, #6
 80057e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80057ea:	018b      	lsls	r3, r1, #6
 80057ec:	1a5b      	subs	r3, r3, r1
 80057ee:	eb64 0402 	sbc.w	r4, r4, r2
 80057f2:	f04f 0100 	mov.w	r1, #0
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	00e2      	lsls	r2, r4, #3
 80057fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005800:	00d9      	lsls	r1, r3, #3
 8005802:	460b      	mov	r3, r1
 8005804:	4614      	mov	r4, r2
 8005806:	195b      	adds	r3, r3, r5
 8005808:	eb44 0406 	adc.w	r4, r4, r6
 800580c:	f04f 0100 	mov.w	r1, #0
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	02a2      	lsls	r2, r4, #10
 8005816:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800581a:	0299      	lsls	r1, r3, #10
 800581c:	460b      	mov	r3, r1
 800581e:	4614      	mov	r4, r2
 8005820:	4618      	mov	r0, r3
 8005822:	4621      	mov	r1, r4
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f04f 0400 	mov.w	r4, #0
 800582a:	461a      	mov	r2, r3
 800582c:	4623      	mov	r3, r4
 800582e:	f7fa fce9 	bl	8000204 <__aeabi_uldivmod>
 8005832:	4603      	mov	r3, r0
 8005834:	460c      	mov	r4, r1
 8005836:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005838:	4b60      	ldr	r3, [pc, #384]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	3301      	adds	r3, #1
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	613b      	str	r3, [r7, #16]
      break;
 8005852:	e0ae      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800585c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800585e:	4b57      	ldr	r3, [pc, #348]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d04a      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800586a:	4b54      	ldr	r3, [pc, #336]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	099b      	lsrs	r3, r3, #6
 8005870:	f04f 0400 	mov.w	r4, #0
 8005874:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	ea03 0501 	and.w	r5, r3, r1
 8005880:	ea04 0602 	and.w	r6, r4, r2
 8005884:	4629      	mov	r1, r5
 8005886:	4632      	mov	r2, r6
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	f04f 0400 	mov.w	r4, #0
 8005890:	0154      	lsls	r4, r2, #5
 8005892:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005896:	014b      	lsls	r3, r1, #5
 8005898:	4619      	mov	r1, r3
 800589a:	4622      	mov	r2, r4
 800589c:	1b49      	subs	r1, r1, r5
 800589e:	eb62 0206 	sbc.w	r2, r2, r6
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	f04f 0400 	mov.w	r4, #0
 80058aa:	0194      	lsls	r4, r2, #6
 80058ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058b0:	018b      	lsls	r3, r1, #6
 80058b2:	1a5b      	subs	r3, r3, r1
 80058b4:	eb64 0402 	sbc.w	r4, r4, r2
 80058b8:	f04f 0100 	mov.w	r1, #0
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	00e2      	lsls	r2, r4, #3
 80058c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058c6:	00d9      	lsls	r1, r3, #3
 80058c8:	460b      	mov	r3, r1
 80058ca:	4614      	mov	r4, r2
 80058cc:	195b      	adds	r3, r3, r5
 80058ce:	eb44 0406 	adc.w	r4, r4, r6
 80058d2:	f04f 0100 	mov.w	r1, #0
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	0262      	lsls	r2, r4, #9
 80058dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80058e0:	0259      	lsls	r1, r3, #9
 80058e2:	460b      	mov	r3, r1
 80058e4:	4614      	mov	r4, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	4621      	mov	r1, r4
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f04f 0400 	mov.w	r4, #0
 80058f0:	461a      	mov	r2, r3
 80058f2:	4623      	mov	r3, r4
 80058f4:	f7fa fc86 	bl	8000204 <__aeabi_uldivmod>
 80058f8:	4603      	mov	r3, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	e049      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005900:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	099b      	lsrs	r3, r3, #6
 8005906:	f04f 0400 	mov.w	r4, #0
 800590a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	ea03 0501 	and.w	r5, r3, r1
 8005916:	ea04 0602 	and.w	r6, r4, r2
 800591a:	4629      	mov	r1, r5
 800591c:	4632      	mov	r2, r6
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	f04f 0400 	mov.w	r4, #0
 8005926:	0154      	lsls	r4, r2, #5
 8005928:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800592c:	014b      	lsls	r3, r1, #5
 800592e:	4619      	mov	r1, r3
 8005930:	4622      	mov	r2, r4
 8005932:	1b49      	subs	r1, r1, r5
 8005934:	eb62 0206 	sbc.w	r2, r2, r6
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	f04f 0400 	mov.w	r4, #0
 8005940:	0194      	lsls	r4, r2, #6
 8005942:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005946:	018b      	lsls	r3, r1, #6
 8005948:	1a5b      	subs	r3, r3, r1
 800594a:	eb64 0402 	sbc.w	r4, r4, r2
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	00e2      	lsls	r2, r4, #3
 8005958:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800595c:	00d9      	lsls	r1, r3, #3
 800595e:	460b      	mov	r3, r1
 8005960:	4614      	mov	r4, r2
 8005962:	195b      	adds	r3, r3, r5
 8005964:	eb44 0406 	adc.w	r4, r4, r6
 8005968:	f04f 0100 	mov.w	r1, #0
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	02a2      	lsls	r2, r4, #10
 8005972:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005976:	0299      	lsls	r1, r3, #10
 8005978:	460b      	mov	r3, r1
 800597a:	4614      	mov	r4, r2
 800597c:	4618      	mov	r0, r3
 800597e:	4621      	mov	r1, r4
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f04f 0400 	mov.w	r4, #0
 8005986:	461a      	mov	r2, r3
 8005988:	4623      	mov	r3, r4
 800598a:	f7fa fc3b 	bl	8000204 <__aeabi_uldivmod>
 800598e:	4603      	mov	r3, r0
 8005990:	460c      	mov	r4, r1
 8005992:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_RCC_GetSysClockFreq+0x334>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	0f1b      	lsrs	r3, r3, #28
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	613b      	str	r3, [r7, #16]
      break;
 80059aa:	e002      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x338>)
 80059ae:	613b      	str	r3, [r7, #16]
      break;
 80059b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059b2:	693b      	ldr	r3, [r7, #16]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059bc:	40023800 	.word	0x40023800
 80059c0:	00f42400 	.word	0x00f42400
 80059c4:	007a1200 	.word	0x007a1200

080059c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8083 	beq.w	8005ae8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059e2:	4b95      	ldr	r3, [pc, #596]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d019      	beq.n	8005a22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059ee:	4b92      	ldr	r3, [pc, #584]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d106      	bne.n	8005a08 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059fa:	4b8f      	ldr	r3, [pc, #572]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a06:	d00c      	beq.n	8005a22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a08:	4b8b      	ldr	r3, [pc, #556]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	d112      	bne.n	8005a3a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a14:	4b88      	ldr	r3, [pc, #544]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a20:	d10b      	bne.n	8005a3a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a22:	4b85      	ldr	r3, [pc, #532]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d05b      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x11e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d157      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e216      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a42:	d106      	bne.n	8005a52 <HAL_RCC_OscConfig+0x8a>
 8005a44:	4b7c      	ldr	r3, [pc, #496]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a7b      	ldr	r2, [pc, #492]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	e01d      	b.n	8005a8e <HAL_RCC_OscConfig+0xc6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a5a:	d10c      	bne.n	8005a76 <HAL_RCC_OscConfig+0xae>
 8005a5c:	4b76      	ldr	r3, [pc, #472]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a75      	ldr	r2, [pc, #468]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	4b73      	ldr	r3, [pc, #460]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a72      	ldr	r2, [pc, #456]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e00b      	b.n	8005a8e <HAL_RCC_OscConfig+0xc6>
 8005a76:	4b70      	ldr	r3, [pc, #448]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a6f      	ldr	r2, [pc, #444]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	4b6d      	ldr	r3, [pc, #436]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a6c      	ldr	r2, [pc, #432]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d013      	beq.n	8005abe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7ff fa1d 	bl	8004ed4 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a9e:	f7ff fa19 	bl	8004ed4 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b64      	cmp	r3, #100	; 0x64
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e1db      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab0:	4b61      	ldr	r3, [pc, #388]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0xd6>
 8005abc:	e014      	b.n	8005ae8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abe:	f7ff fa09 	bl	8004ed4 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac6:	f7ff fa05 	bl	8004ed4 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b64      	cmp	r3, #100	; 0x64
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e1c7      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ad8:	4b57      	ldr	r3, [pc, #348]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1f0      	bne.n	8005ac6 <HAL_RCC_OscConfig+0xfe>
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d06f      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005af4:	4b50      	ldr	r3, [pc, #320]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 030c 	and.w	r3, r3, #12
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d017      	beq.n	8005b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b00:	4b4d      	ldr	r3, [pc, #308]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b0c:	4b4a      	ldr	r3, [pc, #296]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b18:	4b47      	ldr	r3, [pc, #284]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d11c      	bne.n	8005b5e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b24:	4b44      	ldr	r3, [pc, #272]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d116      	bne.n	8005b5e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b30:	4b41      	ldr	r3, [pc, #260]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_RCC_OscConfig+0x180>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e18f      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b48:	4b3b      	ldr	r3, [pc, #236]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	4938      	ldr	r1, [pc, #224]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b5c:	e03a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b66:	4b35      	ldr	r3, [pc, #212]	; (8005c3c <HAL_RCC_OscConfig+0x274>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6c:	f7ff f9b2 	bl	8004ed4 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b74:	f7ff f9ae 	bl	8004ed4 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e170      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b86:	4b2c      	ldr	r3, [pc, #176]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f0      	beq.n	8005b74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b92:	4b29      	ldr	r3, [pc, #164]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4925      	ldr	r1, [pc, #148]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	600b      	str	r3, [r1, #0]
 8005ba6:	e015      	b.n	8005bd4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ba8:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <HAL_RCC_OscConfig+0x274>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bae:	f7ff f991 	bl	8004ed4 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bb6:	f7ff f98d 	bl	8004ed4 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e14f      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f0      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d037      	beq.n	8005c50 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d016      	beq.n	8005c16 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_RCC_OscConfig+0x278>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bee:	f7ff f971 	bl	8004ed4 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bf6:	f7ff f96d 	bl	8004ed4 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e12f      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_RCC_OscConfig+0x270>)
 8005c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x22e>
 8005c14:	e01c      	b.n	8005c50 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c16:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <HAL_RCC_OscConfig+0x278>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1c:	f7ff f95a 	bl	8004ed4 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c22:	e00f      	b.n	8005c44 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c24:	f7ff f956 	bl	8004ed4 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d908      	bls.n	8005c44 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e118      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
 8005c36:	bf00      	nop
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	42470000 	.word	0x42470000
 8005c40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c44:	4b8a      	ldr	r3, [pc, #552]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e9      	bne.n	8005c24 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8097 	beq.w	8005d8c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c62:	4b83      	ldr	r3, [pc, #524]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10f      	bne.n	8005c8e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4b7f      	ldr	r3, [pc, #508]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	4a7e      	ldr	r2, [pc, #504]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c7e:	4b7c      	ldr	r3, [pc, #496]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8e:	4b79      	ldr	r3, [pc, #484]	; (8005e74 <HAL_RCC_OscConfig+0x4ac>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d118      	bne.n	8005ccc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c9a:	4b76      	ldr	r3, [pc, #472]	; (8005e74 <HAL_RCC_OscConfig+0x4ac>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a75      	ldr	r2, [pc, #468]	; (8005e74 <HAL_RCC_OscConfig+0x4ac>)
 8005ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ca6:	f7ff f915 	bl	8004ed4 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cae:	f7ff f911 	bl	8004ed4 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e0d3      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc0:	4b6c      	ldr	r3, [pc, #432]	; (8005e74 <HAL_RCC_OscConfig+0x4ac>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d106      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x31a>
 8005cd4:	4b66      	ldr	r3, [pc, #408]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4a65      	ldr	r2, [pc, #404]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce0:	e01c      	b.n	8005d1c <HAL_RCC_OscConfig+0x354>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCC_OscConfig+0x33c>
 8005cea:	4b61      	ldr	r3, [pc, #388]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	4a60      	ldr	r2, [pc, #384]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005cf0:	f043 0304 	orr.w	r3, r3, #4
 8005cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf6:	4b5e      	ldr	r3, [pc, #376]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	4a5d      	ldr	r2, [pc, #372]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	6713      	str	r3, [r2, #112]	; 0x70
 8005d02:	e00b      	b.n	8005d1c <HAL_RCC_OscConfig+0x354>
 8005d04:	4b5a      	ldr	r3, [pc, #360]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d08:	4a59      	ldr	r2, [pc, #356]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d10:	4b57      	ldr	r3, [pc, #348]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d14:	4a56      	ldr	r2, [pc, #344]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005d16:	f023 0304 	bic.w	r3, r3, #4
 8005d1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d015      	beq.n	8005d50 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7ff f8d6 	bl	8004ed4 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d2c:	f7ff f8d2 	bl	8004ed4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e092      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d42:	4b4b      	ldr	r3, [pc, #300]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0ee      	beq.n	8005d2c <HAL_RCC_OscConfig+0x364>
 8005d4e:	e014      	b.n	8005d7a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d50:	f7ff f8c0 	bl	8004ed4 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d56:	e00a      	b.n	8005d6e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d58:	f7ff f8bc 	bl	8004ed4 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e07c      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d6e:	4b40      	ldr	r3, [pc, #256]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1ee      	bne.n	8005d58 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d105      	bne.n	8005d8c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d80:	4b3b      	ldr	r3, [pc, #236]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	4a3a      	ldr	r2, [pc, #232]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d068      	beq.n	8005e66 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d94:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 030c 	and.w	r3, r3, #12
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d060      	beq.n	8005e62 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d145      	bne.n	8005e34 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da8:	4b33      	ldr	r3, [pc, #204]	; (8005e78 <HAL_RCC_OscConfig+0x4b0>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dae:	f7ff f891 	bl	8004ed4 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db6:	f7ff f88d 	bl	8004ed4 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e04f      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc8:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f0      	bne.n	8005db6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	019b      	lsls	r3, r3, #6
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	3b01      	subs	r3, #1
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	061b      	lsls	r3, r3, #24
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	071b      	lsls	r3, r3, #28
 8005e00:	491b      	ldr	r1, [pc, #108]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e06:	4b1c      	ldr	r3, [pc, #112]	; (8005e78 <HAL_RCC_OscConfig+0x4b0>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0c:	f7ff f862 	bl	8004ed4 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e14:	f7ff f85e 	bl	8004ed4 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e020      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e26:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCC_OscConfig+0x44c>
 8005e32:	e018      	b.n	8005e66 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e34:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <HAL_RCC_OscConfig+0x4b0>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3a:	f7ff f84b 	bl	8004ed4 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e42:	f7ff f847 	bl	8004ed4 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e009      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <HAL_RCC_OscConfig+0x4a8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f0      	bne.n	8005e42 <HAL_RCC_OscConfig+0x47a>
 8005e60:	e001      	b.n	8005e66 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40023800 	.word	0x40023800
 8005e74:	40007000 	.word	0x40007000
 8005e78:	42470060 	.word	0x42470060

08005e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e01d      	b.n	8005eca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fa fd4c 	bl	8000940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f000 f8e4 	bl	8006088 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b06      	cmp	r3, #6
 8005ef2:	d007      	beq.n	8005f04 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_ConfigClockSource+0x18>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e0a6      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x166>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f58:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b40      	cmp	r3, #64	; 0x40
 8005f68:	d067      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x120>
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d80b      	bhi.n	8005f86 <HAL_TIM_ConfigClockSource+0x6c>
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d073      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x140>
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d802      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x62>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d06f      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005f7a:	e078      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d06c      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x140>
 8005f80:	2b30      	cmp	r3, #48	; 0x30
 8005f82:	d06a      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005f84:	e073      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f86:	2b70      	cmp	r3, #112	; 0x70
 8005f88:	d00d      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x8c>
 8005f8a:	2b70      	cmp	r3, #112	; 0x70
 8005f8c:	d804      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x7e>
 8005f8e:	2b50      	cmp	r3, #80	; 0x50
 8005f90:	d033      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0xe0>
 8005f92:	2b60      	cmp	r3, #96	; 0x60
 8005f94:	d041      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f96:	e06a      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9c:	d066      	beq.n	800606c <HAL_TIM_ConfigClockSource+0x152>
 8005f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa2:	d017      	beq.n	8005fd4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005fa4:	e063      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f000 f981 	bl	80062bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	609a      	str	r2, [r3, #8]
      break;
 8005fd2:	e04c      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6899      	ldr	r1, [r3, #8]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f000 f96a 	bl	80062bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ff6:	609a      	str	r2, [r3, #8]
      break;
 8005ff8:	e039      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	461a      	mov	r2, r3
 8006008:	f000 f8de 	bl	80061c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2150      	movs	r1, #80	; 0x50
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f937 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8006018:	e029      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	461a      	mov	r2, r3
 8006028:	f000 f8fd 	bl	8006226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2160      	movs	r1, #96	; 0x60
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f927 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8006038:	e019      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	461a      	mov	r2, r3
 8006048:	f000 f8be 	bl	80061c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2140      	movs	r1, #64	; 0x40
 8006052:	4618      	mov	r0, r3
 8006054:	f000 f917 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8006058:	e009      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f000 f90e 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 800606a:	e000      	b.n	800606e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800606c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a40      	ldr	r2, [pc, #256]	; (800619c <TIM_Base_SetConfig+0x114>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a6:	d00f      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a3d      	ldr	r2, [pc, #244]	; (80061a0 <TIM_Base_SetConfig+0x118>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00b      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a3c      	ldr	r2, [pc, #240]	; (80061a4 <TIM_Base_SetConfig+0x11c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a3b      	ldr	r2, [pc, #236]	; (80061a8 <TIM_Base_SetConfig+0x120>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a3a      	ldr	r2, [pc, #232]	; (80061ac <TIM_Base_SetConfig+0x124>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2f      	ldr	r2, [pc, #188]	; (800619c <TIM_Base_SetConfig+0x114>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d02b      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d027      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2c      	ldr	r2, [pc, #176]	; (80061a0 <TIM_Base_SetConfig+0x118>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d023      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <TIM_Base_SetConfig+0x11c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d01f      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <TIM_Base_SetConfig+0x120>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01b      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a29      	ldr	r2, [pc, #164]	; (80061ac <TIM_Base_SetConfig+0x124>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d017      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a28      	ldr	r2, [pc, #160]	; (80061b0 <TIM_Base_SetConfig+0x128>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a27      	ldr	r2, [pc, #156]	; (80061b4 <TIM_Base_SetConfig+0x12c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00f      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <TIM_Base_SetConfig+0x130>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00b      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a25      	ldr	r2, [pc, #148]	; (80061bc <TIM_Base_SetConfig+0x134>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d007      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a24      	ldr	r2, [pc, #144]	; (80061c0 <TIM_Base_SetConfig+0x138>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <TIM_Base_SetConfig+0x13c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d108      	bne.n	800614c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a0a      	ldr	r2, [pc, #40]	; (800619c <TIM_Base_SetConfig+0x114>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_Base_SetConfig+0xf8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a0c      	ldr	r2, [pc, #48]	; (80061ac <TIM_Base_SetConfig+0x124>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d103      	bne.n	8006188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	615a      	str	r2, [r3, #20]
}
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40010000 	.word	0x40010000
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800
 80061a8:	40000c00 	.word	0x40000c00
 80061ac:	40010400 	.word	0x40010400
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400
 80061b8:	40014800 	.word	0x40014800
 80061bc:	40001800 	.word	0x40001800
 80061c0:	40001c00 	.word	0x40001c00
 80061c4:	40002000 	.word	0x40002000

080061c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f023 0201 	bic.w	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 030a 	bic.w	r3, r3, #10
 8006204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f023 0210 	bic.w	r2, r3, #16
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	031b      	lsls	r3, r3, #12
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f043 0307 	orr.w	r3, r3, #7
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	431a      	orrs	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	609a      	str	r2, [r3, #8]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006310:	2302      	movs	r3, #2
 8006312:	e05a      	b.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d022      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006360:	d01d      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1d      	ldr	r2, [pc, #116]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d018      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00e      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d009      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a17      	ldr	r2, [pc, #92]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d10c      	bne.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40010400 	.word	0x40010400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40001800 	.word	0x40001800

080063f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e03f      	b.n	8006486 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d106      	bne.n	8006420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7fa fab2 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2224      	movs	r2, #36	; 0x24
 8006424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f829 	bl	8006490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800644c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695a      	ldr	r2, [r3, #20]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800645c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800646c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80064d2:	f023 030c 	bic.w	r3, r3, #12
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	430b      	orrs	r3, r1
 80064de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064fe:	f040 818b 	bne.w	8006818 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4ac1      	ldr	r2, [pc, #772]	; (800680c <UART_SetConfig+0x37c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d005      	beq.n	8006518 <UART_SetConfig+0x88>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4abf      	ldr	r2, [pc, #764]	; (8006810 <UART_SetConfig+0x380>)
 8006512:	4293      	cmp	r3, r2
 8006514:	f040 80bd 	bne.w	8006692 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006518:	f7ff f8a2 	bl	8005660 <HAL_RCC_GetPCLK2Freq>
 800651c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	461d      	mov	r5, r3
 8006522:	f04f 0600 	mov.w	r6, #0
 8006526:	46a8      	mov	r8, r5
 8006528:	46b1      	mov	r9, r6
 800652a:	eb18 0308 	adds.w	r3, r8, r8
 800652e:	eb49 0409 	adc.w	r4, r9, r9
 8006532:	4698      	mov	r8, r3
 8006534:	46a1      	mov	r9, r4
 8006536:	eb18 0805 	adds.w	r8, r8, r5
 800653a:	eb49 0906 	adc.w	r9, r9, r6
 800653e:	f04f 0100 	mov.w	r1, #0
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800654a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800654e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006552:	4688      	mov	r8, r1
 8006554:	4691      	mov	r9, r2
 8006556:	eb18 0005 	adds.w	r0, r8, r5
 800655a:	eb49 0106 	adc.w	r1, r9, r6
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	461d      	mov	r5, r3
 8006564:	f04f 0600 	mov.w	r6, #0
 8006568:	196b      	adds	r3, r5, r5
 800656a:	eb46 0406 	adc.w	r4, r6, r6
 800656e:	461a      	mov	r2, r3
 8006570:	4623      	mov	r3, r4
 8006572:	f7f9 fe47 	bl	8000204 <__aeabi_uldivmod>
 8006576:	4603      	mov	r3, r0
 8006578:	460c      	mov	r4, r1
 800657a:	461a      	mov	r2, r3
 800657c:	4ba5      	ldr	r3, [pc, #660]	; (8006814 <UART_SetConfig+0x384>)
 800657e:	fba3 2302 	umull	r2, r3, r3, r2
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	461d      	mov	r5, r3
 800658c:	f04f 0600 	mov.w	r6, #0
 8006590:	46a9      	mov	r9, r5
 8006592:	46b2      	mov	sl, r6
 8006594:	eb19 0309 	adds.w	r3, r9, r9
 8006598:	eb4a 040a 	adc.w	r4, sl, sl
 800659c:	4699      	mov	r9, r3
 800659e:	46a2      	mov	sl, r4
 80065a0:	eb19 0905 	adds.w	r9, r9, r5
 80065a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065bc:	4689      	mov	r9, r1
 80065be:	4692      	mov	sl, r2
 80065c0:	eb19 0005 	adds.w	r0, r9, r5
 80065c4:	eb4a 0106 	adc.w	r1, sl, r6
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	461d      	mov	r5, r3
 80065ce:	f04f 0600 	mov.w	r6, #0
 80065d2:	196b      	adds	r3, r5, r5
 80065d4:	eb46 0406 	adc.w	r4, r6, r6
 80065d8:	461a      	mov	r2, r3
 80065da:	4623      	mov	r3, r4
 80065dc:	f7f9 fe12 	bl	8000204 <__aeabi_uldivmod>
 80065e0:	4603      	mov	r3, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	461a      	mov	r2, r3
 80065e6:	4b8b      	ldr	r3, [pc, #556]	; (8006814 <UART_SetConfig+0x384>)
 80065e8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	2164      	movs	r1, #100	; 0x64
 80065f0:	fb01 f303 	mul.w	r3, r1, r3
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	3332      	adds	r3, #50	; 0x32
 80065fa:	4a86      	ldr	r2, [pc, #536]	; (8006814 <UART_SetConfig+0x384>)
 80065fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006608:	4498      	add	r8, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	461d      	mov	r5, r3
 800660e:	f04f 0600 	mov.w	r6, #0
 8006612:	46a9      	mov	r9, r5
 8006614:	46b2      	mov	sl, r6
 8006616:	eb19 0309 	adds.w	r3, r9, r9
 800661a:	eb4a 040a 	adc.w	r4, sl, sl
 800661e:	4699      	mov	r9, r3
 8006620:	46a2      	mov	sl, r4
 8006622:	eb19 0905 	adds.w	r9, r9, r5
 8006626:	eb4a 0a06 	adc.w	sl, sl, r6
 800662a:	f04f 0100 	mov.w	r1, #0
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006636:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800663a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800663e:	4689      	mov	r9, r1
 8006640:	4692      	mov	sl, r2
 8006642:	eb19 0005 	adds.w	r0, r9, r5
 8006646:	eb4a 0106 	adc.w	r1, sl, r6
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	461d      	mov	r5, r3
 8006650:	f04f 0600 	mov.w	r6, #0
 8006654:	196b      	adds	r3, r5, r5
 8006656:	eb46 0406 	adc.w	r4, r6, r6
 800665a:	461a      	mov	r2, r3
 800665c:	4623      	mov	r3, r4
 800665e:	f7f9 fdd1 	bl	8000204 <__aeabi_uldivmod>
 8006662:	4603      	mov	r3, r0
 8006664:	460c      	mov	r4, r1
 8006666:	461a      	mov	r2, r3
 8006668:	4b6a      	ldr	r3, [pc, #424]	; (8006814 <UART_SetConfig+0x384>)
 800666a:	fba3 1302 	umull	r1, r3, r3, r2
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	2164      	movs	r1, #100	; 0x64
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	3332      	adds	r3, #50	; 0x32
 800667c:	4a65      	ldr	r2, [pc, #404]	; (8006814 <UART_SetConfig+0x384>)
 800667e:	fba2 2303 	umull	r2, r3, r2, r3
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	f003 0207 	and.w	r2, r3, #7
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4442      	add	r2, r8
 800668e:	609a      	str	r2, [r3, #8]
 8006690:	e26f      	b.n	8006b72 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006692:	f7fe ffd1 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8006696:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	461d      	mov	r5, r3
 800669c:	f04f 0600 	mov.w	r6, #0
 80066a0:	46a8      	mov	r8, r5
 80066a2:	46b1      	mov	r9, r6
 80066a4:	eb18 0308 	adds.w	r3, r8, r8
 80066a8:	eb49 0409 	adc.w	r4, r9, r9
 80066ac:	4698      	mov	r8, r3
 80066ae:	46a1      	mov	r9, r4
 80066b0:	eb18 0805 	adds.w	r8, r8, r5
 80066b4:	eb49 0906 	adc.w	r9, r9, r6
 80066b8:	f04f 0100 	mov.w	r1, #0
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066cc:	4688      	mov	r8, r1
 80066ce:	4691      	mov	r9, r2
 80066d0:	eb18 0005 	adds.w	r0, r8, r5
 80066d4:	eb49 0106 	adc.w	r1, r9, r6
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	461d      	mov	r5, r3
 80066de:	f04f 0600 	mov.w	r6, #0
 80066e2:	196b      	adds	r3, r5, r5
 80066e4:	eb46 0406 	adc.w	r4, r6, r6
 80066e8:	461a      	mov	r2, r3
 80066ea:	4623      	mov	r3, r4
 80066ec:	f7f9 fd8a 	bl	8000204 <__aeabi_uldivmod>
 80066f0:	4603      	mov	r3, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	461a      	mov	r2, r3
 80066f6:	4b47      	ldr	r3, [pc, #284]	; (8006814 <UART_SetConfig+0x384>)
 80066f8:	fba3 2302 	umull	r2, r3, r3, r2
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	461d      	mov	r5, r3
 8006706:	f04f 0600 	mov.w	r6, #0
 800670a:	46a9      	mov	r9, r5
 800670c:	46b2      	mov	sl, r6
 800670e:	eb19 0309 	adds.w	r3, r9, r9
 8006712:	eb4a 040a 	adc.w	r4, sl, sl
 8006716:	4699      	mov	r9, r3
 8006718:	46a2      	mov	sl, r4
 800671a:	eb19 0905 	adds.w	r9, r9, r5
 800671e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006722:	f04f 0100 	mov.w	r1, #0
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800672e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006736:	4689      	mov	r9, r1
 8006738:	4692      	mov	sl, r2
 800673a:	eb19 0005 	adds.w	r0, r9, r5
 800673e:	eb4a 0106 	adc.w	r1, sl, r6
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	461d      	mov	r5, r3
 8006748:	f04f 0600 	mov.w	r6, #0
 800674c:	196b      	adds	r3, r5, r5
 800674e:	eb46 0406 	adc.w	r4, r6, r6
 8006752:	461a      	mov	r2, r3
 8006754:	4623      	mov	r3, r4
 8006756:	f7f9 fd55 	bl	8000204 <__aeabi_uldivmod>
 800675a:	4603      	mov	r3, r0
 800675c:	460c      	mov	r4, r1
 800675e:	461a      	mov	r2, r3
 8006760:	4b2c      	ldr	r3, [pc, #176]	; (8006814 <UART_SetConfig+0x384>)
 8006762:	fba3 1302 	umull	r1, r3, r3, r2
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	2164      	movs	r1, #100	; 0x64
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	3332      	adds	r3, #50	; 0x32
 8006774:	4a27      	ldr	r2, [pc, #156]	; (8006814 <UART_SetConfig+0x384>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006782:	4498      	add	r8, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	461d      	mov	r5, r3
 8006788:	f04f 0600 	mov.w	r6, #0
 800678c:	46a9      	mov	r9, r5
 800678e:	46b2      	mov	sl, r6
 8006790:	eb19 0309 	adds.w	r3, r9, r9
 8006794:	eb4a 040a 	adc.w	r4, sl, sl
 8006798:	4699      	mov	r9, r3
 800679a:	46a2      	mov	sl, r4
 800679c:	eb19 0905 	adds.w	r9, r9, r5
 80067a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80067a4:	f04f 0100 	mov.w	r1, #0
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067b8:	4689      	mov	r9, r1
 80067ba:	4692      	mov	sl, r2
 80067bc:	eb19 0005 	adds.w	r0, r9, r5
 80067c0:	eb4a 0106 	adc.w	r1, sl, r6
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	461d      	mov	r5, r3
 80067ca:	f04f 0600 	mov.w	r6, #0
 80067ce:	196b      	adds	r3, r5, r5
 80067d0:	eb46 0406 	adc.w	r4, r6, r6
 80067d4:	461a      	mov	r2, r3
 80067d6:	4623      	mov	r3, r4
 80067d8:	f7f9 fd14 	bl	8000204 <__aeabi_uldivmod>
 80067dc:	4603      	mov	r3, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	461a      	mov	r2, r3
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <UART_SetConfig+0x384>)
 80067e4:	fba3 1302 	umull	r1, r3, r3, r2
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	2164      	movs	r1, #100	; 0x64
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	3332      	adds	r3, #50	; 0x32
 80067f6:	4a07      	ldr	r2, [pc, #28]	; (8006814 <UART_SetConfig+0x384>)
 80067f8:	fba2 2303 	umull	r2, r3, r2, r3
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	f003 0207 	and.w	r2, r3, #7
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4442      	add	r2, r8
 8006808:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800680a:	e1b2      	b.n	8006b72 <UART_SetConfig+0x6e2>
 800680c:	40011000 	.word	0x40011000
 8006810:	40011400 	.word	0x40011400
 8006814:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4ad7      	ldr	r2, [pc, #860]	; (8006b7c <UART_SetConfig+0x6ec>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d005      	beq.n	800682e <UART_SetConfig+0x39e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4ad6      	ldr	r2, [pc, #856]	; (8006b80 <UART_SetConfig+0x6f0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	f040 80d1 	bne.w	80069d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800682e:	f7fe ff17 	bl	8005660 <HAL_RCC_GetPCLK2Freq>
 8006832:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	469a      	mov	sl, r3
 8006838:	f04f 0b00 	mov.w	fp, #0
 800683c:	46d0      	mov	r8, sl
 800683e:	46d9      	mov	r9, fp
 8006840:	eb18 0308 	adds.w	r3, r8, r8
 8006844:	eb49 0409 	adc.w	r4, r9, r9
 8006848:	4698      	mov	r8, r3
 800684a:	46a1      	mov	r9, r4
 800684c:	eb18 080a 	adds.w	r8, r8, sl
 8006850:	eb49 090b 	adc.w	r9, r9, fp
 8006854:	f04f 0100 	mov.w	r1, #0
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006860:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006864:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006868:	4688      	mov	r8, r1
 800686a:	4691      	mov	r9, r2
 800686c:	eb1a 0508 	adds.w	r5, sl, r8
 8006870:	eb4b 0609 	adc.w	r6, fp, r9
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4619      	mov	r1, r3
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	f04f 0400 	mov.w	r4, #0
 8006886:	0094      	lsls	r4, r2, #2
 8006888:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800688c:	008b      	lsls	r3, r1, #2
 800688e:	461a      	mov	r2, r3
 8006890:	4623      	mov	r3, r4
 8006892:	4628      	mov	r0, r5
 8006894:	4631      	mov	r1, r6
 8006896:	f7f9 fcb5 	bl	8000204 <__aeabi_uldivmod>
 800689a:	4603      	mov	r3, r0
 800689c:	460c      	mov	r4, r1
 800689e:	461a      	mov	r2, r3
 80068a0:	4bb8      	ldr	r3, [pc, #736]	; (8006b84 <UART_SetConfig+0x6f4>)
 80068a2:	fba3 2302 	umull	r2, r3, r3, r2
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	469b      	mov	fp, r3
 80068b0:	f04f 0c00 	mov.w	ip, #0
 80068b4:	46d9      	mov	r9, fp
 80068b6:	46e2      	mov	sl, ip
 80068b8:	eb19 0309 	adds.w	r3, r9, r9
 80068bc:	eb4a 040a 	adc.w	r4, sl, sl
 80068c0:	4699      	mov	r9, r3
 80068c2:	46a2      	mov	sl, r4
 80068c4:	eb19 090b 	adds.w	r9, r9, fp
 80068c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068cc:	f04f 0100 	mov.w	r1, #0
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068e0:	4689      	mov	r9, r1
 80068e2:	4692      	mov	sl, r2
 80068e4:	eb1b 0509 	adds.w	r5, fp, r9
 80068e8:	eb4c 060a 	adc.w	r6, ip, sl
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4619      	mov	r1, r3
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	f04f 0400 	mov.w	r4, #0
 80068fe:	0094      	lsls	r4, r2, #2
 8006900:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006904:	008b      	lsls	r3, r1, #2
 8006906:	461a      	mov	r2, r3
 8006908:	4623      	mov	r3, r4
 800690a:	4628      	mov	r0, r5
 800690c:	4631      	mov	r1, r6
 800690e:	f7f9 fc79 	bl	8000204 <__aeabi_uldivmod>
 8006912:	4603      	mov	r3, r0
 8006914:	460c      	mov	r4, r1
 8006916:	461a      	mov	r2, r3
 8006918:	4b9a      	ldr	r3, [pc, #616]	; (8006b84 <UART_SetConfig+0x6f4>)
 800691a:	fba3 1302 	umull	r1, r3, r3, r2
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	2164      	movs	r1, #100	; 0x64
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	3332      	adds	r3, #50	; 0x32
 800692c:	4a95      	ldr	r2, [pc, #596]	; (8006b84 <UART_SetConfig+0x6f4>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006938:	4498      	add	r8, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	469b      	mov	fp, r3
 800693e:	f04f 0c00 	mov.w	ip, #0
 8006942:	46d9      	mov	r9, fp
 8006944:	46e2      	mov	sl, ip
 8006946:	eb19 0309 	adds.w	r3, r9, r9
 800694a:	eb4a 040a 	adc.w	r4, sl, sl
 800694e:	4699      	mov	r9, r3
 8006950:	46a2      	mov	sl, r4
 8006952:	eb19 090b 	adds.w	r9, r9, fp
 8006956:	eb4a 0a0c 	adc.w	sl, sl, ip
 800695a:	f04f 0100 	mov.w	r1, #0
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006966:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800696a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800696e:	4689      	mov	r9, r1
 8006970:	4692      	mov	sl, r2
 8006972:	eb1b 0509 	adds.w	r5, fp, r9
 8006976:	eb4c 060a 	adc.w	r6, ip, sl
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4619      	mov	r1, r3
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	f04f 0400 	mov.w	r4, #0
 800698c:	0094      	lsls	r4, r2, #2
 800698e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006992:	008b      	lsls	r3, r1, #2
 8006994:	461a      	mov	r2, r3
 8006996:	4623      	mov	r3, r4
 8006998:	4628      	mov	r0, r5
 800699a:	4631      	mov	r1, r6
 800699c:	f7f9 fc32 	bl	8000204 <__aeabi_uldivmod>
 80069a0:	4603      	mov	r3, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	461a      	mov	r2, r3
 80069a6:	4b77      	ldr	r3, [pc, #476]	; (8006b84 <UART_SetConfig+0x6f4>)
 80069a8:	fba3 1302 	umull	r1, r3, r3, r2
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	2164      	movs	r1, #100	; 0x64
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	3332      	adds	r3, #50	; 0x32
 80069ba:	4a72      	ldr	r2, [pc, #456]	; (8006b84 <UART_SetConfig+0x6f4>)
 80069bc:	fba2 2303 	umull	r2, r3, r2, r3
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	f003 020f 	and.w	r2, r3, #15
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4442      	add	r2, r8
 80069cc:	609a      	str	r2, [r3, #8]
 80069ce:	e0d0      	b.n	8006b72 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80069d0:	f7fe fe32 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 80069d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	469a      	mov	sl, r3
 80069da:	f04f 0b00 	mov.w	fp, #0
 80069de:	46d0      	mov	r8, sl
 80069e0:	46d9      	mov	r9, fp
 80069e2:	eb18 0308 	adds.w	r3, r8, r8
 80069e6:	eb49 0409 	adc.w	r4, r9, r9
 80069ea:	4698      	mov	r8, r3
 80069ec:	46a1      	mov	r9, r4
 80069ee:	eb18 080a 	adds.w	r8, r8, sl
 80069f2:	eb49 090b 	adc.w	r9, r9, fp
 80069f6:	f04f 0100 	mov.w	r1, #0
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a0a:	4688      	mov	r8, r1
 8006a0c:	4691      	mov	r9, r2
 8006a0e:	eb1a 0508 	adds.w	r5, sl, r8
 8006a12:	eb4b 0609 	adc.w	r6, fp, r9
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f04f 0400 	mov.w	r4, #0
 8006a28:	0094      	lsls	r4, r2, #2
 8006a2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a2e:	008b      	lsls	r3, r1, #2
 8006a30:	461a      	mov	r2, r3
 8006a32:	4623      	mov	r3, r4
 8006a34:	4628      	mov	r0, r5
 8006a36:	4631      	mov	r1, r6
 8006a38:	f7f9 fbe4 	bl	8000204 <__aeabi_uldivmod>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	461a      	mov	r2, r3
 8006a42:	4b50      	ldr	r3, [pc, #320]	; (8006b84 <UART_SetConfig+0x6f4>)
 8006a44:	fba3 2302 	umull	r2, r3, r3, r2
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	469b      	mov	fp, r3
 8006a52:	f04f 0c00 	mov.w	ip, #0
 8006a56:	46d9      	mov	r9, fp
 8006a58:	46e2      	mov	sl, ip
 8006a5a:	eb19 0309 	adds.w	r3, r9, r9
 8006a5e:	eb4a 040a 	adc.w	r4, sl, sl
 8006a62:	4699      	mov	r9, r3
 8006a64:	46a2      	mov	sl, r4
 8006a66:	eb19 090b 	adds.w	r9, r9, fp
 8006a6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a6e:	f04f 0100 	mov.w	r1, #0
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a82:	4689      	mov	r9, r1
 8006a84:	4692      	mov	sl, r2
 8006a86:	eb1b 0509 	adds.w	r5, fp, r9
 8006a8a:	eb4c 060a 	adc.w	r6, ip, sl
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	4619      	mov	r1, r3
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	f04f 0400 	mov.w	r4, #0
 8006aa0:	0094      	lsls	r4, r2, #2
 8006aa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006aa6:	008b      	lsls	r3, r1, #2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4623      	mov	r3, r4
 8006aac:	4628      	mov	r0, r5
 8006aae:	4631      	mov	r1, r6
 8006ab0:	f7f9 fba8 	bl	8000204 <__aeabi_uldivmod>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4b32      	ldr	r3, [pc, #200]	; (8006b84 <UART_SetConfig+0x6f4>)
 8006abc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	2164      	movs	r1, #100	; 0x64
 8006ac4:	fb01 f303 	mul.w	r3, r1, r3
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	3332      	adds	r3, #50	; 0x32
 8006ace:	4a2d      	ldr	r2, [pc, #180]	; (8006b84 <UART_SetConfig+0x6f4>)
 8006ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ada:	4498      	add	r8, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	469b      	mov	fp, r3
 8006ae0:	f04f 0c00 	mov.w	ip, #0
 8006ae4:	46d9      	mov	r9, fp
 8006ae6:	46e2      	mov	sl, ip
 8006ae8:	eb19 0309 	adds.w	r3, r9, r9
 8006aec:	eb4a 040a 	adc.w	r4, sl, sl
 8006af0:	4699      	mov	r9, r3
 8006af2:	46a2      	mov	sl, r4
 8006af4:	eb19 090b 	adds.w	r9, r9, fp
 8006af8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006afc:	f04f 0100 	mov.w	r1, #0
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b10:	4689      	mov	r9, r1
 8006b12:	4692      	mov	sl, r2
 8006b14:	eb1b 0509 	adds.w	r5, fp, r9
 8006b18:	eb4c 060a 	adc.w	r6, ip, sl
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4619      	mov	r1, r3
 8006b22:	f04f 0200 	mov.w	r2, #0
 8006b26:	f04f 0300 	mov.w	r3, #0
 8006b2a:	f04f 0400 	mov.w	r4, #0
 8006b2e:	0094      	lsls	r4, r2, #2
 8006b30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b34:	008b      	lsls	r3, r1, #2
 8006b36:	461a      	mov	r2, r3
 8006b38:	4623      	mov	r3, r4
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	f7f9 fb61 	bl	8000204 <__aeabi_uldivmod>
 8006b42:	4603      	mov	r3, r0
 8006b44:	460c      	mov	r4, r1
 8006b46:	461a      	mov	r2, r3
 8006b48:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <UART_SetConfig+0x6f4>)
 8006b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	2164      	movs	r1, #100	; 0x64
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	3332      	adds	r3, #50	; 0x32
 8006b5c:	4a09      	ldr	r2, [pc, #36]	; (8006b84 <UART_SetConfig+0x6f4>)
 8006b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b62:	095b      	lsrs	r3, r3, #5
 8006b64:	f003 020f 	and.w	r2, r3, #15
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4442      	add	r2, r8
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	e7ff      	b.n	8006b72 <UART_SetConfig+0x6e2>
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b7c:	40011000 	.word	0x40011000
 8006b80:	40011400 	.word	0x40011400
 8006b84:	51eb851f 	.word	0x51eb851f

08006b88 <__libc_init_array>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	4e0d      	ldr	r6, [pc, #52]	; (8006bc0 <__libc_init_array+0x38>)
 8006b8c:	4c0d      	ldr	r4, [pc, #52]	; (8006bc4 <__libc_init_array+0x3c>)
 8006b8e:	1ba4      	subs	r4, r4, r6
 8006b90:	10a4      	asrs	r4, r4, #2
 8006b92:	2500      	movs	r5, #0
 8006b94:	42a5      	cmp	r5, r4
 8006b96:	d109      	bne.n	8006bac <__libc_init_array+0x24>
 8006b98:	4e0b      	ldr	r6, [pc, #44]	; (8006bc8 <__libc_init_array+0x40>)
 8006b9a:	4c0c      	ldr	r4, [pc, #48]	; (8006bcc <__libc_init_array+0x44>)
 8006b9c:	f000 f820 	bl	8006be0 <_init>
 8006ba0:	1ba4      	subs	r4, r4, r6
 8006ba2:	10a4      	asrs	r4, r4, #2
 8006ba4:	2500      	movs	r5, #0
 8006ba6:	42a5      	cmp	r5, r4
 8006ba8:	d105      	bne.n	8006bb6 <__libc_init_array+0x2e>
 8006baa:	bd70      	pop	{r4, r5, r6, pc}
 8006bac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bb0:	4798      	blx	r3
 8006bb2:	3501      	adds	r5, #1
 8006bb4:	e7ee      	b.n	8006b94 <__libc_init_array+0xc>
 8006bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bba:	4798      	blx	r3
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	e7f2      	b.n	8006ba6 <__libc_init_array+0x1e>
 8006bc0:	08007b2c 	.word	0x08007b2c
 8006bc4:	08007b2c 	.word	0x08007b2c
 8006bc8:	08007b2c 	.word	0x08007b2c
 8006bcc:	08007b30 	.word	0x08007b30

08006bd0 <memset>:
 8006bd0:	4402      	add	r2, r0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d100      	bne.n	8006bda <memset+0xa>
 8006bd8:	4770      	bx	lr
 8006bda:	f803 1b01 	strb.w	r1, [r3], #1
 8006bde:	e7f9      	b.n	8006bd4 <memset+0x4>

08006be0 <_init>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr

08006bec <_fini>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr
